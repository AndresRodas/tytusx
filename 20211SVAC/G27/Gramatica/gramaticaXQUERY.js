/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaXQUERY = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,7],$V3=[1,11],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,12],$Ve=[1,13],$Vf=[1,14],$Vg=[1,15],$Vh=[10,12,13,18,25,27,30,31,32,34,35,36,37,41,44,45,46],$Vi=[5,8,9,10,12,13,18,25,27,30,31,32,34,35,36,37,41,44,45,46],$Vj=[1,34],$Vk=[1,35],$Vl=[1,31],$Vm=[1,33],$Vn=[1,32],$Vo=[2,17],$Vp=[1,39],$Vq=[1,40],$Vr=[1,41],$Vs=[1,48],$Vt=[1,47],$Vu=[1,54],$Vv=[1,53],$Vw=[1,60],$Vx=[1,62],$Vy=[1,71],$Vz=[1,74],$VA=[1,72],$VB=[1,75],$VC=[1,68],$VD=[1,69],$VE=[1,70],$VF=[1,73],$VG=[1,85],$VH=[1,97],$VI=[1,96],$VJ=[1,95],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[21,24,38,43,50,51,55,56,57,58,59],$VR=[5,8,9,10,12,13,18,21,24,25,27,30,31,32,34,35,36,37,38,41,43,44,45,46,50,51,55,56,57,58,59],$VS=[21,24,43,51,55,56,57,58,59],$VT=[21,43,55,56,57,58,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"LISTA_NODOS":4,"EOF":5,"OPERADOR":6,"NODO":7,"union":8,"or":9,"ddoble":10,"VALOR_NODO":11,"dsimple":12,"nodoid":13,"NODO_COMPLEMENTO":14,"FUNCION":15,"SELECT":16,"EJE":17,"arroba":18,"cora":19,"EXPRESION":20,"corc":21,"punto":22,"SELECT_ARGUMENTO":23,"por":24,"ancestor":25,"OR_SELF":26,"attribute":27,"ddpuntos":28,"EJE_COMPLEMENTO":29,"child":30,"descendant":31,"following":32,"SIBLING":33,"namespace":34,"parent":35,"preceding":36,"self":37,"menos":38,"sibling":39,"EJE_COMPLEMENTO_2":40,"position":41,"parentesisa":42,"parentesisc":43,"last":44,"text":45,"node":46,"ARITMETICA":47,"LOGICA":48,"PRIMITIVO":49,"mas":50,"div":51,"entero":52,"decimal":53,"STRING":54,"menor":55,"mayor":56,"igual":57,"menorigual":58,"mayorigual":59,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"union",9:"or",10:"ddoble",12:"dsimple",13:"nodoid",18:"arroba",19:"cora",21:"corc",22:"punto",24:"por",25:"ancestor",27:"attribute",28:"ddpuntos",30:"child",31:"descendant",32:"following",34:"namespace",35:"parent",36:"preceding",37:"self",38:"menos",39:"sibling",41:"position",42:"parentesisa",43:"parentesisc",44:"last",45:"text",46:"node",50:"mas",51:"div",52:"entero",53:"decimal",54:"STRING",55:"menor",56:"mayor",57:"igual",58:"menorigual",59:"mayorigual"},
productions_: [0,[3,2],[4,3],[4,1],[6,1],[6,1],[6,0],[7,2],[7,2],[7,1],[11,2],[11,1],[11,1],[11,1],[11,3],[14,3],[14,2],[14,0],[16,2],[16,2],[23,2],[23,1],[23,1],[23,2],[17,2],[17,3],[17,3],[17,2],[17,2],[17,3],[17,3],[17,2],[17,3],[26,6],[26,2],[33,4],[33,2],[29,1],[29,2],[29,1],[40,3],[40,0],[15,3],[15,3],[15,3],[15,3],[20,1],[20,1],[20,1],[20,1],[47,3],[47,3],[47,3],[47,3],[47,3],[49,1],[49,1],[49,1],[49,1],[49,1],[49,2],[49,1],[48,3],[48,3],[48,3],[48,3],[48,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

       return $$[$0-1];

break;
case 2:

                     $$[$0-2].push($$[$0]);
                     this.$=$$[$0-2];
              
break;
case 3:

                     this.$=[$$[$0]];
              
break;
case 7:

              this.$=new Elemento($$[$0],tipoElemento.DOBLE_DIAGONAL);
       
break;
case 8:

              this.$=new Elemento($$[$0],tipoElemento.DIAGONAL);
       
break;
case 10:

              this.$ = $$[$0-1];              
              
break;
}
},
table: [{3:1,4:2,7:3,10:$V0,11:6,12:$V1,13:$V2,15:8,16:9,17:10,18:$V3,25:$V4,27:$V5,30:$V6,31:$V7,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,41:$Vd,44:$Ve,45:$Vf,46:$Vg},{1:[3]},o($Vh,[2,6],{6:26,5:[1,25],8:[1,27],9:[1,28]}),o($Vi,[2,3]),{10:$Vj,11:29,12:$Vk,13:$V2,15:8,16:9,17:10,18:$Vl,22:$Vm,23:30,24:$Vn,25:$V4,27:$V5,30:$V6,31:$V7,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,41:$Vd,44:$Ve,45:$Vf,46:$Vg},{10:$Vj,11:36,12:$Vk,13:$V2,15:8,16:9,17:10,18:$Vl,22:$Vm,23:37,24:$Vn,25:$V4,27:$V5,30:$V6,31:$V7,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,41:$Vd,44:$Ve,45:$Vf,46:$Vg},o($Vi,[2,9]),o($Vi,$Vo,{14:38,19:$Vp,22:$Vq}),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),{13:$Vr},{42:[1,42]},{42:[1,43]},{42:[1,44]},{42:[1,45]},{26:46,28:$Vs,38:$Vt},{28:[1,49]},{28:[1,50]},{26:51,28:$Vs,38:$Vt},{28:$Vu,33:52,38:$Vv},{28:[1,55]},{28:[1,56]},{28:$Vu,33:57,38:$Vv},{28:[1,58]},{1:[2,1]},{7:59,10:$V0,11:6,12:$V1,13:$V2,15:8,16:9,17:10,18:$V3,25:$V4,27:$V5,30:$V6,31:$V7,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,41:$Vd,44:$Ve,45:$Vf,46:$Vg},o($Vh,[2,4]),o($Vh,[2,5]),o($Vi,[2,7]),o($Vi,[2,18]),{13:$Vr,24:$Vw},o($Vi,[2,21]),o($Vi,[2,22],{22:[1,61]}),{18:$Vx,22:$Vm,23:30,24:$Vn},{18:$Vx,22:$Vm,23:37,24:$Vn},o($Vi,[2,8]),o($Vi,[2,19]),o($Vi,[2,10]),{13:$Vy,15:67,18:$Vz,20:63,22:$VA,24:$VB,41:$Vd,42:$VC,44:$Ve,45:$Vf,46:$Vg,47:64,48:65,49:66,52:$VD,53:$VE,54:$VF},{22:[1,76]},o($Vi,$Vo,{14:77,19:$Vp,22:$Vq}),{43:[1,78]},{43:[1,79]},{43:[1,80]},{43:[1,81]},o($Vi,[2,24]),{9:[1,82]},{13:$VG,15:84,18:$Vx,22:$Vm,23:86,24:$Vn,29:83,41:$Vd,44:$Ve,45:$Vf,46:$Vg},{13:$VG,15:84,18:$Vx,22:$Vm,23:86,24:$Vn,29:87,41:$Vd,44:$Ve,45:$Vf,46:$Vg},{13:$VG,15:84,18:$Vx,22:$Vm,23:86,24:$Vn,29:88,41:$Vd,44:$Ve,45:$Vf,46:$Vg},o($Vi,[2,27]),o($Vi,[2,28]),{39:[1,89]},{13:$VG,15:84,18:$Vx,22:$Vm,23:86,24:$Vn,29:90,41:$Vd,44:$Ve,45:$Vf,46:$Vg},{13:$VG,15:84,18:$Vx,22:$Vm,23:86,24:$Vn,29:91,41:$Vd,44:$Ve,45:$Vf,46:$Vg},{13:$VG,15:84,18:$Vx,22:$Vm,23:86,24:$Vn,29:92,41:$Vd,44:$Ve,45:$Vf,46:$Vg},o($Vi,[2,31]),{13:$VG,15:84,18:$Vx,22:$Vm,23:86,24:$Vn,29:93,41:$Vd,44:$Ve,45:$Vf,46:$Vg},o($Vi,[2,2]),o($Vi,[2,20]),o($Vi,[2,23]),{24:$Vw},{21:[1,94],24:$VH,38:$VI,50:$VJ,51:$VK,55:$VL,56:$VM,57:$VN,58:$VO,59:$VP},o($VQ,[2,46]),o($VQ,[2,47]),o($VQ,[2,48]),o($VQ,[2,49]),{13:$Vy,15:67,18:$Vz,20:104,22:$VA,24:$VB,41:$Vd,42:$VC,44:$Ve,45:$Vf,46:$Vg,47:64,48:65,49:66,52:$VD,53:$VE,54:$VF},o($VQ,[2,55]),o($VQ,[2,56]),o($VQ,[2,57]),o($VQ,[2,58]),o($VQ,[2,59]),{13:[1,105]},o($VQ,[2,61]),o($Vi,[2,16]),o($Vi,[2,14]),o($VR,[2,42]),o($VR,[2,43]),o($VR,[2,44]),o($VR,[2,45]),{38:[1,106]},o($Vi,[2,34]),o($Vi,[2,37]),o($Vi,[2,41],{40:107,19:[1,108]}),o($Vi,[2,39]),o($Vi,[2,25]),o($Vi,[2,26]),{28:[1,109]},o($Vi,[2,36]),o($Vi,[2,29]),o($Vi,[2,30]),o($Vi,[2,32]),o($Vi,[2,15]),{13:$Vy,15:67,18:$Vz,20:110,22:$VA,24:$VB,41:$Vd,42:$VC,44:$Ve,45:$Vf,46:$Vg,47:64,48:65,49:66,52:$VD,53:$VE,54:$VF},{13:$Vy,15:67,18:$Vz,20:111,22:$VA,24:$VB,41:$Vd,42:$VC,44:$Ve,45:$Vf,46:$Vg,47:64,48:65,49:66,52:$VD,53:$VE,54:$VF},{13:$Vy,15:67,18:$Vz,20:112,22:$VA,24:$VB,41:$Vd,42:$VC,44:$Ve,45:$Vf,46:$Vg,47:64,48:65,49:66,52:$VD,53:$VE,54:$VF},{13:$Vy,15:67,18:$Vz,20:113,22:$VA,24:$VB,41:$Vd,42:$VC,44:$Ve,45:$Vf,46:$Vg,47:64,48:65,49:66,52:$VD,53:$VE,54:$VF},{13:$Vy,15:67,18:$Vz,20:114,22:$VA,24:$VB,41:$Vd,42:$VC,44:$Ve,45:$Vf,46:$Vg,47:64,48:65,49:66,52:$VD,53:$VE,54:$VF},{13:$Vy,15:67,18:$Vz,20:115,22:$VA,24:$VB,41:$Vd,42:$VC,44:$Ve,45:$Vf,46:$Vg,47:64,48:65,49:66,52:$VD,53:$VE,54:$VF},{13:$Vy,15:67,18:$Vz,20:116,22:$VA,24:$VB,41:$Vd,42:$VC,44:$Ve,45:$Vf,46:$Vg,47:64,48:65,49:66,52:$VD,53:$VE,54:$VF},{13:$Vy,15:67,18:$Vz,20:117,22:$VA,24:$VB,41:$Vd,42:$VC,44:$Ve,45:$Vf,46:$Vg,47:64,48:65,49:66,52:$VD,53:$VE,54:$VF},{13:$Vy,15:67,18:$Vz,20:118,22:$VA,24:$VB,41:$Vd,42:$VC,44:$Ve,45:$Vf,46:$Vg,47:64,48:65,49:66,52:$VD,53:$VE,54:$VF},{24:$VH,38:$VI,43:[1,119],50:$VJ,51:$VK,55:$VL,56:$VM,57:$VN,58:$VO,59:$VP},o($VQ,[2,60]),{37:[1,120]},o($Vi,[2,38]),{13:$Vy,15:67,18:$Vz,20:121,22:$VA,24:$VB,41:$Vd,42:$VC,44:$Ve,45:$Vf,46:$Vg,47:64,48:65,49:66,52:$VD,53:$VE,54:$VF},{13:$VG,15:84,18:$Vx,22:$Vm,23:86,24:$Vn,29:122,41:$Vd,44:$Ve,45:$Vf,46:$Vg},o($VQ,[2,50]),o($VQ,[2,51]),o($VS,[2,52],{38:$VI,50:$VJ}),o($VS,[2,53],{38:$VI,50:$VJ}),o($VT,[2,62],{24:$VH,38:$VI,50:$VJ,51:$VK}),o($VT,[2,63],{24:$VH,38:$VI,50:$VJ,51:$VK}),o([21,43,57],[2,64],{24:$VH,38:$VI,50:$VJ,51:$VK,55:$VL,56:$VM,58:$VO,59:$VP}),o($VT,[2,65],{24:$VH,38:$VI,50:$VJ,51:$VK}),o($VT,[2,66],{24:$VH,38:$VI,50:$VJ,51:$VK}),o($VQ,[2,54]),{28:[1,123]},{21:[1,124],24:$VH,38:$VI,50:$VJ,51:$VK,55:$VL,56:$VM,57:$VN,58:$VO,59:$VP},o($Vi,[2,35]),{13:$VG,15:84,18:$Vx,22:$Vm,23:86,24:$Vn,29:125,41:$Vd,44:$Ve,45:$Vf,46:$Vg},o($Vi,[2,40]),o($Vi,[2,33])],
defaultActions: {25:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return  'last';
break;
case 2:return  'position';
break;
case 3:return  'text';
break;
case 4:return  'ancestor'; 
break;
case 5:return  'attribute'
break;
case 6:return  'child'
break;
case 7:return  'descendant'
break;
case 8:return  'following'
break;
case 9:return  'namespace'
break;
case 10:return  'parent'
break;
case 11:return  'preceding'
break;
case 12:return  'sibling'
break;
case 13:return  'self'
break;
case 14:return  'node'
break;
case 15:yy_.yytext = yy_.yytext.slice(1,-1); return 54;
break;
case 16:return 50;
break;
case 17:return 38;
break;
case 18:return 24;
break;
case 19:return 'mod';
break;
case 20:return 51;
break;
case 21:return 58;
break;
case 22:return 59;
break;
case 23:return 55;
break;
case 24:return 56;
break;
case 25:return 57;
break;
case 26:return 'digual';
break;
case 27:return 'noigual';
break;
case 28:return 'and';
break;
case 29:return 9;
break;
case 30:return 'not';
break;
case 31:return 'semicolon';
break;
case 32:return 42;
break;
case 33:return 43;
break;
case 34:return 'and';
break;
case 35:return 9;
break;
case 36:return 'not';
break;
case 37:return 8;
break;
case 38:return 19;
break;
case 39:return 21;
break;
case 40:return 22;
break;
case 41:return 28;
break;
case 42:return 18;
break;
case 43:return 53;
break;
case 44:return 52;
break;
case 45:return 13;
break;
case 46:return 10;
break;
case 47:return 12;
break;
case 48:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 49:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:text\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:sibling\b)/i,/^(?:self\b)/i,/^(?:node\b)/i,/^(?:"[^"]+")/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:div\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:or\b)/i,/^(?:!)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\|)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:::)/i,/^(?:@)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z0-9_nÑ]+)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaXQUERY;
exports.Parser = gramaticaXQUERY.Parser;
exports.parse = function () { return gramaticaXQUERY.parse.apply(gramaticaXQUERY, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}