/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica2C = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,16,17,18],$V1=[2,13],$V2=[1,14],$V3=[1,16],$V4=[1,15],$V5=[1,17],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[2,5,16,17,18,21,22,24,25],$Va=[1,27],$Vb=[1,32],$Vc=[1,31],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[1,42],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,55],$Vv=[1,54],$Vw=[2,5,16,17,18,21,24,25],$Vx=[1,64],$Vy=[1,63],$Vz=[30,32],$VA=[2,59],$VB=[2,60],$VC=[2,5,16,17,18,22,25],$VD=[2,39],$VE=[1,77],$VF=[1,78],$VG=[1,85],$VH=[1,81],$VI=[1,82],$VJ=[1,83],$VK=[1,84],$VL=[1,97],$VM=[1,93],$VN=[1,99],$VO=[1,98],$VP=[1,91],$VQ=[1,94],$VR=[1,95],$VS=[1,96],$VT=[2,5,16,17,18,21,22,24,25,51],$VU=[2,5,16,17,18,21,22,24,25,26,51,53,56,57,60,61,64,65,66,67,68,69,73],$VV=[16,17,18,26,53,60,61,64,65,66,67,68,69,73],$VW=[2,79],$VX=[1,116],$VY=[1,117],$VZ=[16,17,18,53,56,57,64,65,66,67,68,69,73],$V_=[2,84],$V$=[1,119],$V01=[1,120],$V11=[1,121],$V21=[16,17,18,26,53,56,57,60,61,73],$V31=[2,92],$V41=[1,123],$V51=[1,124],$V61=[1,125],$V71=[1,126],$V81=[1,127],$V91=[1,128],$Va1=[26,53,56,57,60,61,64,65,66,67,68,69,73],$Vb1=[2,97],$Vc1=[1,132],$Vd1=[1,131],$Ve1=[1,130],$Vf1=[16,17,18,26,53,56,57,60,61,64,65,66,67,68,69,73],$Vg1=[1,157],$Vh1=[1,158],$Vi1=[16,17,18,21,24,26,53,56,57,60,61,64,65,66,67,68,69,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"LISTA":4,"EOF":5,"PUNTO":6,"LISTA2":7,"BARRAS":8,"LISTAS":9,"LISTA1":10,"PALABRAS_R":11,"IDS":12,"ATRIBUTO":13,"ATRIBUTO1":14,"ASTERISCO":15,"TK_BARRA_VERTICAL":16,"TK_AND":17,"TK_OR":18,"TK_PUNTO":19,"PUNTO1":20,"TK_DBARRA":21,"TK_IDENTIFICADOR":22,"ASTERISCO1":23,"TK_BARRA":24,"TK_ARROBA":25,"TK_POR":26,"L_ATRIBUTO":27,"TK_DPUNTO":28,"PR":29,"TK_DDP":30,"OPCION":31,"TK_PARENTESIS":32,"TK_ANCESTOR":33,"TK_ANCESTOR_OR_SELF":34,"TK_ATTRIBUTE":35,"TK_CHILD":36,"TK_DESCENDANT":37,"TK_DESCENDANT_OR_SELF":38,"TK_FOLLOWING":39,"TK_FOLLOWING_SIBLING":40,"TK_NAMESPACE":41,"TK_PARENT":42,"TK_PRECEDING":43,"TK_PRECEDING_SIBLING":44,"TK_SELF":45,"TK_LAST":46,"TK_POSITION":47,"TK_Node":48,"TK_TEXT":49,"L_ASTERISCO":50,"TK_CORCHETE_IZQUIERDO":51,"EXP":52,"TK_CORCHETE_DERECHO":53,"EXP1":54,"EXP_P":55,"TK_MAS":56,"TK_MENOS":57,"EXP2":58,"EXP1_P":59,"TK_DIVISION":60,"TK_MODULO":61,"EXP3":62,"EXP2_P":63,"TK_MENOR":64,"TK_MAYOR":65,"TK_MENOR_IGUAL":66,"TK_MAYOR_IGUAL":67,"TK_IGUALDAD":68,"TK_DESIGUALDAD":69,"EXP4":70,"EXP3_P":71,"TK_PARENTESIS_IZQUIERDO":72,"TK_PARENTESIS_DERECHO":73,"ATRI":74,"TK_DECIMAL":75,"TK_ENTERO":76,"TK_CADENA":77,"PAL_RE":78,"L_ATRI":79,"ATRI1":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"TK_BARRA_VERTICAL",17:"TK_AND",18:"TK_OR",19:"TK_PUNTO",21:"TK_DBARRA",22:"TK_IDENTIFICADOR",24:"TK_BARRA",25:"TK_ARROBA",26:"TK_POR",28:"TK_DPUNTO",30:"TK_DDP",32:"TK_PARENTESIS",33:"TK_ANCESTOR",34:"TK_ANCESTOR_OR_SELF",35:"TK_ATTRIBUTE",36:"TK_CHILD",37:"TK_DESCENDANT",38:"TK_DESCENDANT_OR_SELF",39:"TK_FOLLOWING",40:"TK_FOLLOWING_SIBLING",41:"TK_NAMESPACE",42:"TK_PARENT",43:"TK_PRECEDING",44:"TK_PRECEDING_SIBLING",45:"TK_SELF",46:"TK_LAST",47:"TK_POSITION",48:"TK_Node",49:"TK_TEXT",51:"TK_CORCHETE_IZQUIERDO",53:"TK_CORCHETE_DERECHO",56:"TK_MAS",57:"TK_MENOS",60:"TK_DIVISION",61:"TK_MODULO",64:"TK_MENOR",65:"TK_MAYOR",66:"TK_MENOR_IGUAL",67:"TK_MAYOR_IGUAL",68:"TK_IGUALDAD",69:"TK_DESIGUALDAD",72:"TK_PARENTESIS_IZQUIERDO",73:"TK_PARENTESIS_DERECHO",75:"TK_DECIMAL",76:"TK_ENTERO",77:"TK_CADENA"},
productions_: [0,[3,2],[4,1],[4,1],[7,3],[7,1],[9,2],[9,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,0],[10,1],[8,1],[8,1],[8,1],[6,2],[6,1],[20,1],[20,1],[12,3],[12,3],[12,2],[12,2],[12,1],[13,4],[13,4],[13,3],[13,4],[13,4],[13,3],[27,2],[27,1],[14,2],[14,2],[14,2],[14,2],[14,0],[11,5],[11,5],[11,4],[11,4],[11,3],[11,3],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[31,2],[31,2],[31,2],[31,2],[31,1],[15,3],[15,3],[15,2],[15,2],[50,2],[50,1],[23,3],[23,1],[52,2],[55,3],[55,3],[55,0],[54,2],[59,3],[59,3],[59,3],[59,0],[58,2],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,0],[62,2],[71,3],[71,3],[71,3],[71,0],[70,3],[70,1],[70,2],[70,1],[70,1],[70,1],[70,1],[70,2],[70,2],[70,1],[78,3],[74,3],[79,2],[79,1],[80,2],[80,2],[80,2],[80,2],[80,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new Node_tree('S',''); this.$.addChild($$[$0-1]); return this.$; 
break;
case 2: case 3:
 this.$ = new Node_tree('LISTA',''); this.$.addChild($$[$0]); 
break;
case 4:
 this.$ = new Node_tree('LISTA2',''); this.$.addChild($$[$0-2]); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 5:
 this.$ = new Node_tree('LISTA2',''); this.$.addChild($$[$0]); 
break;
case 6:
 this.$ = new Node_tree('LISTAS',''); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 7:
 this.$ = new Node_tree('LISTAS',''); this.$.addChild($$[$0]); 
break;
case 8: case 9: case 10: case 11: case 12:
 this.$ = new Node_tree('LISTA1',''); this.$.addChild($$[$0]); 
break;
case 13:
 this.$ = new Node_tree('LISTA1',''); this.$.addChild(new Node_tree('ε','ε')); 
break;
case 14:
 this.$ = new Node_tree('error','error'); 
break;
case 15:
 this.$ = new Node_tree('BARRAS',''); this.$.addChild(new Node_tree($$[$0],'TK_BARRA_VERTICAL')); 
break;
case 16:
 this.$ = new Node_tree('BARRAS',''); this.$.addChild(new Node_tree($$[$0],'TK_AND')); 
break;
case 17:
 this.$ = new Node_tree('BARRAS',''); this.$.addChild(new Node_tree($$[$0],'TK_OR')); 
break;
case 18:
 this.$ = new Node_tree('PUNTO',''); this.$.addChild(new Node_tree($$[$0-1],'TK_PUNTO')); this.$.addChild($$[$0]); 
break;
case 19: case 21:
 this.$ = new Node_tree('error','error');
break;
case 20:
 this.$ = new Node_tree('PUNTO1',''); this.$.addChild($$[$0]); 
break;
case 22:
 this.$ = new Node_tree('IDS',''); this.$.addChild(new Node_tree($$[$0-2],'TK_DBARRA')); this.$.addChild(new Node_tree($$[$0-1],'TK_IDENTIFICADOR')); this.$.addChild($$[$0]); 
break;
case 23:
 this.$ = new Node_tree('IDS',''); this.$.addChild(new Node_tree($$[$0-2],'TK_BARRA'));  this.$.addChild(new Node_tree($$[$0-1],'TK_IDENTIFICADOR')); this.$.addChild($$[$0]); 
break;
case 24:
 this.$ = new Node_tree('IDS',''); this.$.addChild(new Node_tree($$[$0-1],'TK_DBARRA')); this.$.addChild(new Node_tree($$[$0],'TK_IDENTIFICADOR')); 
break;
case 25:
 this.$ = new Node_tree('IDS',''); this.$.addChild(new Node_tree($$[$0-1],'TK_BARRA'));  this.$.addChild(new Node_tree($$[$0],'TK_IDENTIFICADOR')); 
break;
case 26:
 this.$ = new Node_tree('IDS',''); this.$.addChild(new Node_tree($$[$0],'TK_IDENTIFICADOR')); 
break;
case 27:
 this.$ = new Node_tree('ATRIBUTO',''); this.$.addChild(new Node_tree($$[$0-3],'TK_DBARRA')); this.$.addChild(new Node_tree($$[$0-2],'TK_ARROBA')); this.$.addChild(new Node_tree($$[$0-1],'TK_POR')); this.$.addChild($$[$0]); 
break;
case 28:
 this.$ = new Node_tree('ATRIBUTO',''); this.$.addChild(new Node_tree($$[$0-3],'TK_BARRA'));  this.$.addChild(new Node_tree($$[$0-2],'TK_ARROBA')); this.$.addChild(new Node_tree($$[$0-1],'TK_POR')); this.$.addChild($$[$0]); 
break;
case 29:
 this.$ = new Node_tree('ATRIBUTO',''); this.$.addChild(new Node_tree($$[$0-2],'TK_ARROBA')); this.$.addChild(new Node_tree($$[$0-1],'TK_POR')); this.$.addChild($$[$0]); 
break;
case 30:
 this.$ = new Node_tree('ATRIBUTO',''); this.$.addChild(new Node_tree($$[$0-3],'TK_DBARRA')); this.$.addChild(new Node_tree($$[$0-2],'TK_ARROBA')); this.$.addChild(new Node_tree($$[$0-1],'TK_IDENTIFICADOR')); this.$.addChild($$[$0]); 
break;
case 31:
 this.$ = new Node_tree('ATRIBUTO',''); this.$.addChild(new Node_tree($$[$0-3],'TK_BARRA'));  this.$.addChild(new Node_tree($$[$0-2],'TK_ARROBA')); this.$.addChild(new Node_tree($$[$0-1],'TK_IDENTIFICADOR')); this.$.addChild($$[$0]); 
break;
case 32:
 this.$ = new Node_tree('ATRIBUTO',''); this.$.addChild(new Node_tree($$[$0-2],'TK_ARROBA')); this.$.addChild(new Node_tree($$[$0-1],'TK_IDENTIFICADOR')); this.$.addChild($$[$0]); 
break;
case 33:
 this.$ = new Node_tree('L_ATRIBUTO',''); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 34:
 this.$ = new Node_tree('L_ATRIBUTO',''); this.$.addChild($$[$0]); 
break;
case 35:
 this.$ = new Node_tree('ATRIBUTO1',''); this.$.addChild(new Node_tree($$[$0-1],'TK_DBARRA')); this.$.addChild(new Node_tree($$[$0],'TK_DPUTNO')); 
break;
case 36:
 this.$ = new Node_tree('ATRIBUTO1',''); this.$.addChild(new Node_tree($$[$0-1],'TK_DBARRA')); this.$.addChild(new Node_tree($$[$0],'TK_PUNTO')); 
break;
case 37:
 this.$ = new Node_tree('ATRIBUTO1',''); this.$.addChild(new Node_tree($$[$0-1],'TK_DBARRA')); this.$.addChild(new Node_tree($$[$0],'TK_DPUNTO')); 
break;
case 38:
 this.$ = new Node_tree('ATRIBUTO1',''); this.$.addChild(new Node_tree($$[$0-1],'TK_BARRA')); this.$.addChild(new Node_tree($$[$0],'TK_PUNTO')); 
break;
case 39:
 this.$ = new Node_tree('ATRIBUTO1',''); this.$.addChild(new Node_tree('ε','ε')); 
break;
case 40:
 this.$ = new Node_tree('PALABRAS_R',''); this.$.addChild(new Node_tree($$[$0-4],'TK_DBARRA')); this.$.addChild($$[$0-3]); this.$.addChild(new Node_tree($$[$0-2],'TK_DDP')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 41:
 this.$ = new Node_tree('PALABRAS_R',''); this.$.addChild(new Node_tree($$[$0-4],'TK_BARRA'));  this.$.addChild($$[$0-3]); this.$.addChild(new Node_tree($$[$0-2],'TK_DDP')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 42:
 this.$ = new Node_tree('PALABRAS_R',''); this.$.addChild(new Node_tree($$[$0-3],'TK_DBARRA')); this.$.addChild($$[$0-2]); this.$.addChild(new Node_tree($$[$0-1],'TK_DDP')); this.$.addChild($$[$0]); 
break;
case 43:
 this.$ = new Node_tree('PALABRAS_R',''); this.$.addChild(new Node_tree($$[$0-3],'TK_BARRA'));  this.$.addChild($$[$0-2]); this.$.addChild(new Node_tree($$[$0-1],'TK_DDP')); this.$.addChild($$[$0]); 
break;
case 44:
 this.$ = new Node_tree_tree('PALABRAS_R',''); this.$.addChild(new Node_tree_tree($$[$0-2],'TK_BARRA')); this.$.addChild($$[$0-1]); this.$.addChild(new Node_tree_tree($$[$0],'TK_PARENTESIS')); 
break;
case 45:
 this.$ = new Node_tree_tree('PALABRAS_R',''); this.$.addChild(new Node_tree_tree($$[$0-2],'TK_DBARRA')); this.$.addChild($$[$0-1]); this.$.addChild(new Node_tree_tree($$[$0],'TK_PARENTESIS')); 
break;
case 46:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_ANCESTOR')); 
break;
case 47:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_ANCESTOR_OR_SELF')); 
break;
case 48:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_ATTRIBUTE')); 
break;
case 49:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_CHILD')); 
break;
case 50:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_DESCENDANT')); 
break;
case 51:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_DESCENDANT_OR_SELF')); 
break;
case 52:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_FOLLOWING')); 
break;
case 53:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_FOLLOWING_SIBLING')); 
break;
case 54:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_NAMESPACE')); 
break;
case 55:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_PARENT')); 
break;
case 56:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_PRECEDING')); 
break;
case 57:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_PRECEDING_SIBLING')); 
break;
case 58:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_SELF')); 
break;
case 59:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_LAST')); 
break;
case 60:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_POSITION')); 
break;
case 61:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_Node_tree')); 
break;
case 62:
 this.$ = new Node_tree('PR',''); this.$.addChild(new Node_tree($$[$0],'TK_TEXT')); 
break;
case 63:
 this.$ = new Node_tree('OPCION',''); this.$.addChild(new Node_tree($$[$0-1],'TK_LAST')); this.$.addChild(new Node_tree($$[$0],'TK_PARENTESIS')); 
break;
case 64:
 this.$ = new Node_tree('OPCION',''); this.$.addChild(new Node_tree($$[$0-1],'TK_POSITION')); this.$.addChild(new Node_tree($$[$0],'TK_PARENTESIS')); 
break;
case 65:
 this.$ = new Node_tree('OPCION',''); this.$.addChild(new Node_tree($$[$0-1],'TK_Node_tree')); this.$.addChild(new Node_tree($$[$0],'TK_PARENTESIS')); 
break;
case 66:
 this.$ = new Node_tree('OPCION',''); this.$.addChild(new Node_tree($$[$0-1],'TK_TEXT')); this.$.addChild(new Node_tree($$[$0],'TK_PARENTESIS')); 
break;
case 67:
 this.$ = new Node_tree('OPCION',''); this.$.addChild(new Node_tree($$[$0],'TK_IDENTIFICADOR')); 
break;
case 68:
 this.$ = new Node_tree('ASTERISCO',''); this.$.addChild(new Node_tree($$[$0-2],'TK_DBARRA')); this.$.addChild(new Node_tree($$[$0-1],'TK_POR')); this.$.addChild($$[$0]); 
break;
case 69:
 this.$ = new Node_tree('ASTERISCO',''); this.$.addChild(new Node_tree($$[$0-2],'TK_BARRA'));  this.$.addChild(new Node_tree($$[$0-1],'TK_POR')); this.$.addChild($$[$0]); 
break;
case 70:
 this.$ = new Node_tree('ASTERISCO',''); this.$.addChild(new Node_tree($$[$0-1],'TK_DBARRA')); this.$.addChild(new Node_tree($$[$0],'TK_POR')); 
break;
case 71:
 this.$ = new Node_tree('ASTERISCO',''); this.$.addChild(new Node_tree($$[$0-1],'TK_BARRA'));  this.$.addChild(new Node_tree($$[$0],'TK_POR')); 
break;
case 72:
 this.$ = new Node_tree('L_ASTERISCO',''); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 73:
 this.$ = new Node_tree('L_ASTERISCO',''); this.$.addChild($$[$0]); 
break;
case 74:
 this.$ = new Node_tree('ASTERISCO1',''); this.$.addChild(new Node_tree($$[$0-2],'TK_CORCHETE_IZQUIERDO')); this.$.addChild($$[$0-1]); this.$.addChild(new Node_tree($$[$0],'TK_CORCHETE_DERECHO'));  
break;
case 75:
 this.$ = new Node_tree('ASTERISCO1',''); this.$.addChild(new Node_tree($$[$0],'TK_IDENTIFICADOR')); 
break;
case 76:
 this.$ = new Node_tree('EXP',''); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 77:
 this.$ = new Node_tree('EXP_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_MAS')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 78:
 this.$ = new Node_tree('EXP_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_MENOS')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 79:
 this.$ = new Node_tree('EXP_P',''); this.$.addChild(new Node_tree('ε','ε')); 
break;
case 80:
 this.$ = new Node_tree('EXP1',''); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 81:
 this.$ = new Node_tree('EXP1_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_POR')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 82:
 this.$ = new Node_tree('EXP1_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_DIVISION')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 83:
 this.$ = new Node_tree('EXP1_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_MODULO')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 84:
 this.$ = new Node_tree('EXP1_P',''); this.$.addChild(new Node_tree('ε','ε')); 
break;
case 85:
 this.$ = new Node_tree('EXP2',''); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 86:
 this.$ = new Node_tree('EXP2_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_MENOR')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 87:
 this.$ = new Node_tree('EXP2_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_MAYOR')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 88:
 this.$ = new Node_tree('EXP2_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_MENOR_IGUAL')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 89:
 this.$ = new Node_tree('EXP2_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_MAYOR_IGUAL')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 90:
 this.$ = new Node_tree('EXP2_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_IGUALDAD')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 91:
 this.$ = new Node_tree('EXP2_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_DESIGUALDAD')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 92:
 this.$ = new Node_tree('EXP2_P',''); this.$.addChild(new Node_tree('ε','ε')); 
break;
case 93:
 this.$ = new Node_tree('EXP3',''); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 94:
 this.$ = new Node_tree('EXP3_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_OR')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 95:
 this.$ = new Node_tree('EXP3_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_AND')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 96:
 this.$ = new Node_tree('EXP3_P',''); this.$.addChild(new Node_tree($$[$0-2],'TK_BARRA_VERTICAL')); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 97:
 this.$ = new Node_tree('EXP3_P',''); this.$.addChild(new Node_tree('ε','ε')); 
break;
case 98:
 this.$ = new Node_tree('EXP4',''); this.$.addChild(new Node_tree($$[$0-2],'TK_PARENTESIS_IZQUIERDO')); this.$.addChild($$[$0-1]); this.$.addChild(new Node_tree($$[$0],'TK_PARENTESIS_DERECHO')); 
break;
case 99: case 107:
 this.$ = new Node_tree('EXP4',''); this.$.addChild($$[$0]); 
break;
case 100:
 this.$ = new Node_tree('EXP4',''); this.$.addChild(new Node_tree($$[$0-1],'TK_ARROBA')); this.$.addChild($$[$0]); 
break;
case 101:
 this.$ = new Node_tree('EXP4',''); this.$.addChild(new Node_tree($$[$0],'TK_DECIMAL')); 
break;
case 102:
 this.$ = new Node_tree('EXP4',''); this.$.addChild(new Node_tree($$[$0],'TK_ENTERO')); 
break;
case 103:
 this.$ = new Node_tree('EXP4',''); this.$.addChild(new Node_tree($$[$0],'TK_CADENA')); 
break;
case 104:
 this.$ = new Node_tree('EXP4',''); this.$.addChild(new Node_tree($$[$0],'TK_IDENTIFICADOR')); 
break;
case 105:
 this.$ = new Node_tree('EXP4',''); this.$.addChild(new Node_tree($$[$0-1],'TK_POSITION')); this.$.addChild(new Node_tree($$[$0],'TK_PARENTESIS')); 
break;
case 106:
 this.$ = new Node_tree('EXP4',''); this.$.addChild(new Node_tree($$[$0-1],'TK_LAST')); this.$.addChild(new Node_tree($$[$0],'TK_PARENTESIS'));
break;
case 108:
 this.$ = new Node_tree('PAL_RE',''); this.$.addChild($$[$0-2]); this.$.addChild(new Node_tree($$[$0-1],'TK_DDP')); this.$.addChild($$[$0]); 
break;
case 109:
 this.$ = new Node_tree('ATRI',''); this.$.addChild(new Node_tree($$[$0-2],'TK_ARROBA')); this.$.addChild(new Node_tree($$[$0-1],'TK_POR')); this.$.addChild($$[$0]); 
break;
case 110:
 this.$ = new Node_tree('L_ATRI',''); this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 111:
 this.$ = new Node_tree('L_ATRI',''); this.$.addChild($$[$0]); 
break;
case 112: case 114:
 this.$ = new Node_tree('ATRI1',''); this.$.addChild(new Node_tree($$[$0-1],'TK_DBARRA')); this.$.addChild(new Node_tree($$[$0],'TK_DPUTNO')); 
break;
case 113: case 115:
 this.$ = new Node_tree('ATRI1',''); this.$.addChild(new Node_tree($$[$0-1],'TK_BARRA'));  this.$.addChild(new Node_tree($$[$0],'TK_PUTNO')); 
break;
case 116:
 this.$ = new Node_tree('ATRI1',''); this.$.addChild(new Node_tree('ε','ε')); 
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,7:4,9:7,10:8,11:9,12:10,13:11,14:12,15:13,2:[1,6],19:[1,5],21:$V2,22:$V3,24:$V4,25:$V5}),{1:[3]},{5:[1,18]},{5:[2,2]},{5:[2,3],8:19,16:$V6,17:$V7,18:$V8},{2:[1,25],5:$V1,9:24,10:8,11:9,12:10,13:11,14:12,15:13,20:23,21:$V2,22:$V3,24:$V4,25:$V5},o($V9,[2,19]),o($V0,[2,5]),o($V0,[2,7],{10:8,11:9,12:10,13:11,14:12,15:13,9:26,2:$Va,21:$V2,22:$V3,24:$V4,25:$V5}),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),o($V9,[2,12]),{19:$Vb,22:[1,29],25:[1,30],26:[1,33],28:$Vc,29:28,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vu,22:[1,52],25:[1,53],26:[1,56],28:$Vv,29:51,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},o($V9,[2,26]),{22:[1,58],26:[1,57]},{1:[2,1]},o($V0,$V1,{9:7,10:8,11:9,12:10,13:11,14:12,15:13,7:59,2:$Va,21:$V2,22:$V3,24:$V4,25:$V5}),o($V9,[2,15]),o($V9,[2,16]),o($V9,[2,17]),{5:[2,18]},{5:[2,20]},o([2,5,21,22,24,25],[2,21]),o($V0,[2,6]),o($V9,[2,14]),{30:[1,60],32:[1,61]},o($Vw,[2,24],{23:62,22:$Vx,51:$Vy}),{22:[1,66],26:[1,65]},o($V9,[2,35]),o($V9,[2,36]),o($Vw,[2,70],{50:67,23:68,22:$Vx,51:$Vy}),o($Vz,[2,46]),o($Vz,[2,47]),o($Vz,[2,48]),o($Vz,[2,49]),o($Vz,[2,50]),o($Vz,[2,51]),o($Vz,[2,52]),o($Vz,[2,53]),o($Vz,[2,54]),o($Vz,[2,55]),o($Vz,[2,56]),o($Vz,[2,57]),o($Vz,[2,58]),o($Vz,$VA),o($Vz,$VB),o($Vz,[2,61]),o($Vz,[2,62]),{30:[1,69],32:[1,70]},o($Vw,[2,25],{23:71,22:$Vx,51:$Vy}),{22:[1,73],26:[1,72]},o($V9,[2,37]),o($V9,[2,38]),o($Vw,[2,71],{23:68,50:74,22:$Vx,51:$Vy}),o($VC,$VD,{27:75,14:76,21:$VE,24:$VF}),o($VC,$VD,{14:76,27:79,21:$VE,24:$VF}),{5:[2,4],8:19,16:$V6,17:$V7,18:$V8},{22:$VG,31:80,46:$VH,47:$VI,48:$VJ,49:$VK},o($V9,[2,45]),o($V9,[2,22]),{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,52:86,54:87,58:88,62:89,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},o($VT,[2,75]),o($VC,$VD,{14:76,27:102,21:$VE,24:$VF}),o($VC,$VD,{14:76,27:103,21:$VE,24:$VF}),o($V9,[2,68]),o($Vw,[2,73],{23:68,50:104,22:$Vx,51:$Vy}),{22:$VG,31:105,46:$VH,47:$VI,48:$VJ,49:$VK},o($V9,[2,44]),o($V9,[2,23]),o($VC,$VD,{14:76,27:106,21:$VE,24:$VF}),o($VC,$VD,{14:76,27:107,21:$VE,24:$VF}),o($V9,[2,69]),o($V9,[2,29]),o($VC,[2,34],{14:76,27:108,21:$VE,24:$VF}),{19:$Vb,28:$Vc},{19:$Vu,28:$Vv},o($V9,[2,32]),o($Vw,[2,42],{23:109,22:$Vx,51:$Vy}),{32:[1,110]},{32:[1,111]},{32:[1,112]},{32:[1,113]},o($VU,[2,67]),{53:[1,114]},o($VV,$VW,{55:115,56:$VX,57:$VY}),o($VZ,$V_,{59:118,26:$V$,60:$V01,61:$V11}),o($V21,$V31,{63:122,64:$V41,65:$V51,66:$V61,67:$V71,68:$V81,69:$V91}),o($Va1,$Vb1,{71:129,16:$Vc1,17:$Vd1,18:$Ve1}),{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,52:133,54:87,58:88,62:89,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},o($Vf1,[2,99]),{22:$VL,25:$VM,26:[1,135],29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,52:134,54:87,58:88,62:89,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},o($Vf1,[2,101]),o($Vf1,[2,102]),o($Vf1,[2,103]),o($Vf1,[2,104]),{30:$VB,32:[1,136]},{30:$VA,32:[1,137]},o($Vf1,[2,107]),{30:[1,138]},o($V9,[2,27]),o($V9,[2,30]),o($V9,[2,72]),o($Vw,[2,43],{23:139,22:$Vx,51:$Vy}),o($V9,[2,28]),o($V9,[2,31]),o($V9,[2,33]),o($V9,[2,40]),o($VU,[2,63]),o($VU,[2,64]),o($VU,[2,65]),o($VU,[2,66]),o($VT,[2,74]),o($Vf1,[2,76]),{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,54:140,58:88,62:89,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,54:141,58:88,62:89,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},o($Vf1,[2,80]),{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,58:142,62:89,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,58:143,62:89,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,58:144,62:89,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},o($Vf1,[2,85]),{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,62:145,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,62:146,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,62:147,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,62:148,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,62:149,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,62:150,70:90,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},o($Vf1,[2,93]),{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,70:151,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,70:152,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},{22:$VL,25:$VM,29:101,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$VN,47:$VO,48:$Vs,49:$Vt,70:153,72:$VP,74:92,75:$VQ,76:$VR,77:$VS,78:100},{73:[1,154]},o($Vf1,[2,100]),o($Vf1,[2,116],{79:155,80:156,21:$Vg1,24:$Vh1}),o($Vf1,[2,105]),o($Vf1,[2,106]),{22:$VG,31:159,46:$VH,47:$VI,48:$VJ,49:$VK},o($V9,[2,41]),o($VV,$VW,{55:160,56:$VX,57:$VY}),o($VV,$VW,{55:161,56:$VX,57:$VY}),o($VZ,$V_,{59:162,26:$V$,60:$V01,61:$V11}),o($VZ,$V_,{59:163,26:$V$,60:$V01,61:$V11}),o($VZ,$V_,{59:164,26:$V$,60:$V01,61:$V11}),o($V21,$V31,{63:165,64:$V41,65:$V51,66:$V61,67:$V71,68:$V81,69:$V91}),o($V21,$V31,{63:166,64:$V41,65:$V51,66:$V61,67:$V71,68:$V81,69:$V91}),o($V21,$V31,{63:167,64:$V41,65:$V51,66:$V61,67:$V71,68:$V81,69:$V91}),o($V21,$V31,{63:168,64:$V41,65:$V51,66:$V61,67:$V71,68:$V81,69:$V91}),o($V21,$V31,{63:169,64:$V41,65:$V51,66:$V61,67:$V71,68:$V81,69:$V91}),o($V21,$V31,{63:170,64:$V41,65:$V51,66:$V61,67:$V71,68:$V81,69:$V91}),o($Va1,$Vb1,{71:171,16:$Vc1,17:$Vd1,18:$Ve1}),o($Va1,$Vb1,{71:172,16:$Vc1,17:$Vd1,18:$Ve1}),o($Va1,$Vb1,{71:173,16:$Vc1,17:$Vd1,18:$Ve1}),o($Vf1,[2,98]),o($Vf1,[2,109]),o($Vf1,[2,111],{80:156,79:174,21:$Vg1,24:$Vh1}),{19:[1,176],28:[1,175]},{19:[1,178],28:[1,177]},o($Vf1,[2,108]),o($Vf1,[2,77]),o($Vf1,[2,78]),o($Vf1,[2,81]),o($Vf1,[2,82]),o($Vf1,[2,83]),o($Vf1,[2,86]),o($Vf1,[2,87]),o($Vf1,[2,88]),o($Vf1,[2,89]),o($Vf1,[2,90]),o($Vf1,[2,91]),o($Vf1,[2,94]),o($Vf1,[2,95]),o($Vf1,[2,96]),o($Vf1,[2,110]),o($Vi1,[2,112]),o($Vi1,[2,113]),o($Vi1,[2,114]),o($Vi1,[2,115])],
defaultActions: {3:[2,2],18:[2,1],23:[2,18],24:[2,20]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};




/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 67;
break;
case 1:return 66;
break;
case 2:return 64;
break;
case 3:return 65;
break;
case 4:return 68;
break;
case 5:return 69;
break;
case 6:return 56;
break;
case 7:return 57;
break;
case 8:return 26;
break;
case 9:return 16;
break;
case 10:return 60;
break;
case 11:return 17;
break;
case 12:return 18;
break;
case 13:return 61;
break;
case 14:return 32;
break;
case 15:return 72;
break;
case 16:return 73;
break;
case 17:return 51;
break;
case 18:return 53;
break;
case 19:return 30;
break;
case 20:return 21
break;
case 21:return 24
break;
case 22:return 25
break;
case 23:return 28
break;
case 24:return 19
break;
case 25:return 33
break;
case 26:return 34
break;
case 27:return 35
break;
case 28:return 36
break;
case 29:return 37
break;
case 30:return 38
break;
case 31:return 39
break;
case 32:return 40
break;
case 33:return 41
break;
case 34:return 42
break;
case 35:return 43
break;
case 36:return 44
break;
case 37:return 45
break;
case 38:return 46
break;
case 39:return 47
break;
case 40:return 'TK_Node_tree'
break;
case 41:return 49
break;
case 42:/QUITA ESPACIOS EN BLANCO/
break;
case 43: return 75; 
break;
case 44: return 76; 
break;
case 45: return 22; 
break;
case 46: return 77; 
break;
case 47:  return 5;   
break;
}
},
rules: [/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:!=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\|)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:mod\b)/,/^(?:\(\))/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:Node_tree\b)/,/^(?:text\b)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:[A-Za-z]+["_"0-9A-Za-z]*)/,/^(?:[[\']([^\'\n]|(\\'))*[\']|[[\"]([^\"\n]|(\\"))*[\"])/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica2C;
exports.Parser = Gramatica2C.Parser;
exports.parse = function () { return Gramatica2C.parse.apply(Gramatica2C, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}