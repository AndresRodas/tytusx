/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,5],$V2=[1,14],$V3=[1,11],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,12],$V8=[5,14,15,23,25,77,78,79,80],$V9=[1,38],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,23],$Vg=[1,24],$Vh=[1,25],$Vi=[1,26],$Vj=[1,27],$Vk=[1,28],$Vl=[1,29],$Vm=[1,30],$Vn=[8,9,10,14,23,26,27,48,49,50,52,53,54,55,56,57,58,59],$Vo=[2,100],$Vp=[20,22],$Vq=[2,13],$Vr=[2,14],$Vs=[1,47],$Vt=[1,50],$Vu=[1,69],$Vv=[1,62],$Vw=[1,65],$Vx=[1,66],$Vy=[1,67],$Vz=[1,55],$VA=[1,56],$VB=[1,57],$VC=[1,58],$VD=[1,59],$VE=[1,60],$VF=[1,68],$VG=[1,70],$VH=[1,71],$VI=[1,72],$VJ=[1,61],$VK=[1,63],$VL=[1,64],$VM=[10,13,14,20,22,23,26,27,30,31,32,36,37,38,39,40,43,44,48,52,53,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$VN=[10,13,14,20,22,23,26,27,30,31,32,36,37,38,39,40,44,48,52,53,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$VO=[2,66],$VP=[42,43],$VQ=[1,77],$VR=[1,76],$VS=[20,48,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$VT=[2,58],$VU=[1,87],$VV=[9,14,23,26,27,48,49,50,52,53,54,55,56,57,58,59],$VW=[10,13,14,22,23,26,27,30,31,32,36,37,38,39,40,44,48,52,53,57,58,61,62,64,65,66,67,69,70,71,72,73],$VX=[10,13,14,22,23,26,27,30,31,32,36,37,38,39,40,44,52,53,57,58],$VY=[1,110],$VZ=[1,118],$V_=[1,107],$V$=[1,108],$V01=[1,109],$V11=[1,112],$V21=[1,113],$V31=[1,115],$V41=[1,116],$V51=[1,117],$V61=[1,120],$V71=[1,121],$V81=[1,122],$V91=[1,119],$Va1=[10,13,14,20,22,23,26,27,30,31,32,36,37,38,39,40,42,43,44,48,52,53,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$Vb1=[13,14,23,26,27,30,31,32,36,37,38,39,40,52,53,57,58],$Vc1=[2,39],$Vd1=[2,40];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"FUNCION":4,"EOF":5,"VOIDS":6,"TIPO":7,"MAIN":8,"PARIZQ":9,"PARDER":10,"LLAVEIZQ":11,"INSTRUCCIONES":12,"LLAVEDER":13,"IDENTIFICADOR":14,"INCLUDE":15,"LIBRERIA":16,"DECLARACION_MULTIPLE":17,"DECLARACION":18,"TIPODECLARACION":19,"COMA":20,"TERMINO":21,"PTCOMA":22,"TEMPORAL":23,"L_CORCHETES":24,"DOUBLE":25,"STACK":26,"HEAP":27,"INSTRUCCION":28,"ASIGNACION":29,"EXIT":30,"GOTO":31,"IF":32,"EXPRESION":33,"DOSPUNTOS":34,"TIPO_PRINT":35,"UNSET":36,"RETURN_INS":37,"IMPRIMIR":38,"IMPRIMIRF":39,"SNPRINT":40,"TEMPORALES":41,"IGUAL":42,"CORCHETEIZQ":43,"CORCHETEDER":44,"OPLOGICA":45,"OPBIT":46,"OPRELACIONAL":47,"MENOS":48,"NOT_BIT":49,"NOT":50,"OPARITMETICA":51,"RA":52,"PILA":53,"ENTERO":54,"DECIMAL":55,"CADENA":56,"PUNTERO":57,"VALOR_RET":58,"AND_BIT":59,"UNARIO":60,"AND":61,"OR":62,"XOR":63,"MENORQUE":64,"MAYORQUE":65,"MENORIGUAL":66,"MAYORIGUAL":67,"IGUALQUE":68,"NOIGUAL":69,"MAS":70,"MULTIPLICACION":71,"DIVISION":72,"MODULO":73,"SHIFTDER":74,"OR_BIT":75,"XOR_BIT":76,"INT":77,"FLOAT":78,"CHAR":79,"VOID":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"MAIN",9:"PARIZQ",10:"PARDER",11:"LLAVEIZQ",13:"LLAVEDER",14:"IDENTIFICADOR",15:"INCLUDE",16:"LIBRERIA",20:"COMA",22:"PTCOMA",23:"TEMPORAL",25:"DOUBLE",26:"STACK",27:"HEAP",30:"EXIT",31:"GOTO",32:"IF",34:"DOSPUNTOS",36:"UNSET",37:"RETURN_INS",38:"IMPRIMIR",39:"IMPRIMIRF",40:"SNPRINT",42:"IGUAL",43:"CORCHETEIZQ",44:"CORCHETEDER",48:"MENOS",49:"NOT_BIT",50:"NOT",52:"RA",53:"PILA",54:"ENTERO",55:"DECIMAL",56:"CADENA",57:"PUNTERO",58:"VALOR_RET",59:"AND_BIT",61:"AND",62:"OR",63:"XOR",64:"MENORQUE",65:"MAYORQUE",66:"MENORIGUAL",67:"MAYORIGUAL",68:"IGUALQUE",69:"NOIGUAL",70:"MAS",71:"MULTIPLICACION",72:"DIVISION",73:"MODULO",74:"SHIFTDER",75:"OR_BIT",76:"XOR_BIT",77:"INT",78:"FLOAT",79:"CHAR",80:"VOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,7],[6,7],[6,2],[6,1],[6,1],[17,3],[17,3],[17,2],[17,2],[19,1],[19,1],[18,4],[18,4],[18,4],[12,2],[12,1],[28,1],[28,2],[28,2],[28,1],[28,3],[28,2],[28,7],[28,6],[28,3],[28,2],[28,5],[28,4],[28,5],[28,4],[28,2],[28,3],[35,1],[35,1],[35,1],[29,3],[29,4],[29,3],[24,4],[24,3],[33,1],[33,3],[33,3],[33,3],[33,3],[33,2],[33,2],[33,2],[33,3],[33,4],[21,1],[21,1],[21,1],[21,1],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,2],[21,2],[21,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[60,1],[60,1],[60,1],[47,1],[47,1],[47,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[51,1],[51,1],[51,1],[51,1],[51,1],[46,1],[46,1],[46,1],[46,1],[46,1],[7,1],[7,1],[7,1],[7,1],[7,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 18:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 19:
this.$ = [$$[$0]];
break;
case 4: case 5:
this.$= new Funcion.default($$[$0-6]+" "+$$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2]+"\n",$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 6: case 12:
this.$=$$[$0-1]+$$[$0]+"\n"
break;
case 7: case 8: case 13: case 14: case 20: case 36: case 37: case 38: case 44: case 55: case 63: case 66: case 68: case 69: case 70: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101:
this.$=$$[$0]
break;
case 9:
this.$=$$[$0-2]+" "+$$[$0-1]+$$[$0]+" "
break;
case 10:
this.$= new Declaracion.default($$[$0-2],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 11:
this.$=$$[$0-1]+$$[$0]+" "
break;
case 15: case 16: case 17:
this.$= new Declaracion.default($$[$0-3]+" "+$$[$0-2]+"[",$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 21: case 64:
this.$=$$[$0-1]
break;
case 22:
this.$= new Exit.default(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 23:
this.$= new Exit.default(_$[$0].first_line,_$[$0].first_column);
break;
case 24:
this.$= new SaltoIncondicional.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 25:
this.$= new SaltoIncondicional.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 26:
this.$= new SaltoCondicional.default($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 27:
this.$= new SaltoCondicional.default($$[$0-3],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 28:
this.$= new Etiqueta.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 29:
this.$= new Etiqueta.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 30:
this.$= new Print.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 31:
this.$= new Print.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 32:
this.$= new Unset.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 33:
this.$= new Unset.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 34:
this.$= new Sentencia.default(null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 35:
this.$= new Sentencia.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 39:
this.$= new Asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 40:
this.$= new AsignacionEstructura.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 41:
this.$= new Llamada.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 42:
$$[$0-3].push($$[$0-1]); this.$ = $$[$0-3];
break;
case 43:
this.$ = [$$[$0-1]];
break;
case 45:
this.$= new multiplecoma.default($$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 46:
this.$= new logica.default($$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 47:
this.$= new bit.default($$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 48:
this.$= new relacional.default($$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 49: case 50: case 51:
this.$= new unario.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 52:
this.$= new aritmetica.default($$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 53:
this.$= new conversion.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 54: case 67:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.TEMPORAL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 56:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.PILA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 57:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 58: case 65:
this.$= new Estructura.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 59: case 71:
this.$ = new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 60:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.DECIMAL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 61:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 62: case 72:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.PUNTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 73:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.STACK),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 74:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.HEAP),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,14:$V0,15:$V1,17:6,18:7,19:13,23:$V2,25:$V3,77:$V4,78:$V5,79:$V6,80:$V7},{1:[3]},{5:[1,16],6:17,7:4,14:$V0,15:$V1,17:6,18:7,19:13,23:$V2,25:$V3,77:$V4,78:$V5,79:$V6,80:$V7},o($V8,[2,3]),{8:[1,18],9:$V9,14:[1,19],19:20,21:21,23:[1,22],26:$Va,27:$Vb,33:32,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},{16:[1,39]},o($V8,[2,7]),o($V8,[2,8]),o($Vn,[2,97]),o($Vn,[2,98]),o($Vn,[2,99]),o([8,9,14,23,48,49,50,52,53,54,55,56,57,58,59],$Vo,{26:[1,40],27:[1,41]}),o($Vn,[2,101]),{20:[1,42],22:[1,43]},o($Vp,$Vq),o($Vp,$Vr),{1:[2,1]},o($V8,[2,2]),{9:[1,44]},o([20,22,48,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$Vr,{24:46,9:[1,45],43:$Vs}),{20:[1,48]},{20:$Vt,22:[1,49],45:51,46:52,47:53,48:$Vu,51:54,59:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},o([20,22,43,48,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$Vq),o($VM,[2,55]),o($VM,[2,56]),o($VN,[2,57]),o($VN,[2,60]),o($VN,[2,61]),o($VM,[2,62]),o($VM,[2,63]),{23:[1,73]},{24:74,43:$Vs},o($VN,$VO),o($VP,[2,73]),o($VP,[2,74]),{9:$V9,14:$VQ,21:75,23:$VR,26:$Va,27:$Vb,33:32,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},{9:$V9,14:$VQ,21:78,23:$VR,26:$Va,27:$Vb,33:32,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},{9:$V9,14:$VQ,21:79,23:$VR,26:$Va,27:$Vb,33:32,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},{7:80,25:[1,81],77:$V4,78:$V5,79:$V6,80:$V7},o($V8,[2,6]),{24:82,43:$Vs},{24:83,43:$Vs},o($V8,[2,11]),o($V8,[2,12]),{10:[1,84]},{10:[1,85]},o($VS,$VT,{22:[1,86],43:$VU}),{9:$V9,14:$VQ,21:89,23:$VR,26:$Va,27:$Vb,33:88,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},o($V8,[2,9]),o($V8,[2,10]),{9:$V9,14:$VQ,21:90,23:$VR,26:$Va,27:$Vb,33:32,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},{9:$V9,14:$VQ,21:91,23:$VR,26:$Va,27:$Vb,33:32,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},{9:$V9,14:$VQ,21:92,23:$VR,26:$Va,27:$Vb,33:32,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},{9:$V9,14:$VQ,21:93,23:$VR,26:$Va,27:$Vb,33:32,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},{9:$V9,14:$VQ,21:94,23:$VR,26:$Va,27:$Vb,33:32,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},o($VV,[2,81]),o($VV,[2,82]),o($VV,[2,83]),o($VV,[2,84]),o($VV,[2,85]),o($VV,[2,86]),o($VV,[2,92]),o($VV,[2,94]),o($VV,[2,95]),o($VV,[2,96]),o($VV,[2,78]),o($VV,[2,79]),o($VV,[2,80]),o($VV,[2,87]),o($VV,[2,88]),o($VV,[2,89]),o($VV,[2,90]),o($VV,[2,91]),o($VN,[2,64]),o($VN,[2,65],{43:$VU}),o($VW,[2,49],{45:51,46:52,47:53,51:54,20:$Vt,59:$Vv,63:$Vy,68:$VD,74:$VJ,75:$VK,76:$VL}),o($VM,[2,54]),o($VN,[2,59],{24:95,43:$Vs}),o($VW,[2,50],{45:51,46:52,47:53,51:54,20:$Vt,59:$Vv,63:$Vy,68:$VD,74:$VJ,75:$VK,76:$VL}),o($VW,[2,51],{45:51,46:52,47:53,51:54,20:$Vt,59:$Vv,63:$Vy,68:$VD,74:$VJ,75:$VK,76:$VL}),{10:[1,96]},{10:$Vo},{22:[1,97],43:$VU},{22:[1,98],43:$VU},{11:[1,99]},{11:[1,100]},o($V8,[2,15]),{9:$V9,14:$VQ,21:89,23:$VR,26:$Va,27:$Vb,33:101,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},o($VS,$VO,{44:[1,102]}),o($VX,[2,44],{45:51,46:52,47:53,51:54,20:$Vt,48:$Vu,59:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($VX,[2,45],{45:51,46:52,47:53,51:54,20:$Vt,48:$Vu,59:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($VX,[2,46],{45:51,46:52,47:53,51:54,20:$Vt,48:$Vu,59:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($VX,[2,47],{45:51,46:52,47:53,51:54,20:$Vt,48:$Vu,59:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($VX,[2,48],{45:51,46:52,47:53,51:54,20:$Vt,48:$Vu,59:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($VX,[2,52],{45:51,46:52,47:53,51:54,20:$Vt,48:$Vu,59:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($VN,$VT,{43:$VU}),{9:$V9,14:$VQ,21:103,23:$VR,26:$Va,27:$Vb,33:32,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},o($V8,[2,16]),o($V8,[2,17]),{12:104,14:$VY,23:$VZ,26:$Va,27:$Vb,28:105,29:106,30:$V_,31:$V$,32:$V01,35:111,36:$V11,37:$V21,38:$V31,39:$V41,40:$V51,41:114,52:$V61,53:$V71,57:$V81,58:$V91},{12:123,14:$VY,23:$VZ,26:$Va,27:$Vb,28:105,29:106,30:$V_,31:$V$,32:$V01,35:111,36:$V11,37:$V21,38:$V31,39:$V41,40:$V51,41:114,52:$V61,53:$V71,57:$V81,58:$V91},o($VS,$VO,{44:[1,124]}),o($Va1,[2,43]),o($VX,[2,53],{45:51,46:52,47:53,51:54,20:$Vt,48:$Vu,59:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{13:[1,125],14:$VY,23:$VZ,26:$Va,27:$Vb,28:126,29:106,30:$V_,31:$V$,32:$V01,35:111,36:$V11,37:$V21,38:$V31,39:$V41,40:$V51,41:114,52:$V61,53:$V71,57:$V81,58:$V91},o($Vb1,[2,19]),o($Vb1,[2,20],{22:[1,127]}),o($Vb1,[2,23],{22:[1,128]}),{14:[1,129]},{9:[1,130]},o($VP,[2,71],{9:[1,132],34:[1,131]}),{9:[1,133]},{9:[1,134]},{9:$V9,14:$VQ,21:89,22:[1,135],23:$VR,26:$Va,27:$Vb,33:136,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},{24:138,42:[1,137],43:$Vs},{9:[2,36]},{9:[2,37]},{9:[2,38]},o($VP,[2,67]),o($VP,[2,68]),o($VP,[2,69]),o($VP,[2,70]),o($VP,[2,72]),{13:[1,139],14:$VY,23:$VZ,26:$Va,27:$Vb,28:126,29:106,30:$V_,31:$V$,32:$V01,35:111,36:$V11,37:$V21,38:$V31,39:$V41,40:$V51,41:114,52:$V61,53:$V71,57:$V81,58:$V91},o($Va1,[2,42]),o($V8,[2,4]),o($Vb1,[2,18]),o($Vb1,[2,21]),o($Vb1,[2,22]),o($Vb1,[2,25],{22:[1,140]}),{9:$V9,14:$VQ,21:89,23:$VR,26:$Va,27:$Vb,33:141,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},o($Vb1,[2,29],{22:[1,142]}),{10:[1,143]},{9:$V9,14:$VQ,21:89,23:$VR,26:$Va,27:$Vb,33:144,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},{9:$V9,14:$VQ,21:145,23:$VR,26:$Va,27:$Vb,33:32,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},o($Vb1,[2,34]),o($VS,$VO,{22:[1,146]}),{9:$V9,14:$VQ,21:89,23:$VR,26:$Va,27:$Vb,33:147,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},{42:[1,148],43:$VU},o($V8,[2,5]),o($Vb1,[2,24]),o($VS,$VO,{10:[1,149]}),o($Vb1,[2,28]),o([13,14,22,23,26,27,30,31,32,36,37,38,39,40,52,53,57,58],[2,41]),o($VS,$VO,{10:[1,150]}),{10:[1,151],20:$Vt,45:51,46:52,47:53,48:$Vu,51:54,59:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},o($Vb1,[2,35]),o($VS,$VO,{13:$Vc1,14:$Vc1,22:$Vc1,23:$Vc1,26:$Vc1,27:$Vc1,30:$Vc1,31:$Vc1,32:$Vc1,36:$Vc1,37:$Vc1,38:$Vc1,39:$Vc1,40:$Vc1,52:$Vc1,53:$Vc1,57:$Vc1,58:$Vc1}),{9:$V9,14:$VQ,21:89,23:$VR,26:$Va,27:$Vb,33:152,41:31,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm},{31:[1,153]},o($Vb1,[2,31],{22:[1,154]}),o($Vb1,[2,33],{22:[1,155]}),o($VS,$VO,{13:$Vd1,14:$Vd1,22:$Vd1,23:$Vd1,26:$Vd1,27:$Vd1,30:$Vd1,31:$Vd1,32:$Vd1,36:$Vd1,37:$Vd1,38:$Vd1,39:$Vd1,40:$Vd1,52:$Vd1,53:$Vd1,57:$Vd1,58:$Vd1}),{14:[1,156]},o($Vb1,[2,30]),o($Vb1,[2,32]),o($Vb1,[2,27],{22:[1,157]}),o($Vb1,[2,26])],
defaultActions: {16:[2,1],81:[2,100],115:[2,36],116:[2,37],117:[2,38]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};



const CErrores= require("./Errores/NodoErrores")
const inicio = require("../../componentes/contenido-inicio/contenido-inicio.component")
const Tipo= require("./Simbolo/Tipo");
const aritmetica= require("./Expresion/Aritmetica");
const logica= require("./Expresion/Logica");
const bit= require("./Expresion/Bit");
const concatenacion= require("./Expresion/Concatenar");
const relacional= require("./Expresion/Relacional");
const conversion= require("./Expresion/Conversion");
const unario= require("./Expresion/Unario");
const Sentencia= require("./Expresion/Sentencia");
const termino= require("./Expresion/Termino");
const identificador= require("./Expresion/Identificador");
const multiplecoma= require("./Expresion/MultipleComa");
//instrucciones
const Llamada= require("./Instrucciones/Llamada");
const Asignacion= require("./Instrucciones/Asignacion");
const Declaracion= require("./Instrucciones/Declaracion");
const Funcion= require("./Instrucciones/Funcion");
const AsignacionEstructura= require("./Instrucciones/AsignacionEstructura");
const Estructura= require("./Instrucciones/Estructura");
const Etiqueta= require("./Instrucciones/Etiqueta");
const Exit= require("./Instrucciones/Exit");
const Print= require("./Instrucciones/Print");
const SaltoCondicional= require("./Instrucciones/SaltoCondicional");
const SaltoIncondicional= require("./Instrucciones/SaltoIncondicional");
const Unset= require("./Instrucciones/Unset");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
break;
case 2:
break;
case 3:return 54
break;
case 4:return 77
break;
case 5:return 25
break;
case 6:return 78 
break;
case 7:return 79        
break;
case 8:return 31
break;
case 9:return 30
break;
case 10:return 'ABS'
break;
case 11:return 38
break;
case 12:return 39
break;
case 13:return 40
break;
case 14:return 36
break;
case 15:return 32
break;
case 16:return 63
break;
case 17:return 'READ'
break;
case 18:return 'ARRAY'
break;
case 19:return 27
break;
case 20:return "STACK"
break;
case 21:return 80
break;
case 22:return 8
break;
case 23:return "RETURN_INS"
break;
case 24:return 'NUMBER'
break;
case 25:return 23
break;
case 26:return 58
break;
case 27:return 53
break;
case 28:return 52
break;
case 29:return 57
break;
case 30:return 16
break;
case 31:return 15
break;
case 32:return 14;
break;
case 33: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 56; 
break;
case 34: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 'CARACTER'; 
break;
case 35:return 55;
break;
case 36:return 70
break;
case 37:return 48
break;
case 38:return 71
break;
case 39:return 72
break;
case 40:return 73
break;
case 41:return 68
break;
case 42:return 42
break;
case 43:return 66
break;
case 44:return 67
break;
case 45:return 64
break;
case 46:return 65
break;
case 47:return 69
break;
case 48:return 50
break;
case 49:return 63
break;
case 50:return 76
break;
case 51:return 49
break;
case 52:return 9
break;
case 53:return 10
break;
case 54:return 43
break;
case 55:return 44
break;
case 56:return 11
break;
case 57:return 13
break;
case 58:return 20
break;
case 59:return 'VALCHAR';
break;
case 60:return 'VALNUM';
break;
case 61:return 'VALDEC';
break;
case 62:return 59  
break;
case 63:return 75     
break;
case 64:return 61  
break;
case 65:return 62  
break;
case 66:return 22
break;
case 67:return 34
break;
case 68:return 74
break;
case 69:return 'SHIFTIZQ'
break;
case 70:return 5
break;
case 71:inicio.listaErrores.push(new CNodoErrores.default("Lexico Optimizacion","No se esperaba el caracter: "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); console.log("Lexico, No se esperaba el caracter: "+yy_.yytext +" Linea: "+ yy_.yylloc.first_line + "Columna: " + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:([0-9]+(\.[0-9]+)?))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:float\b)/i,/^(?:char\b)/i,/^(?:goto\b)/i,/^(?:exit\b)/i,/^(?:abs\b)/i,/^(?:print\b)/i,/^(?:printf\b)/i,/^(?:snprintf\b)/i,/^(?:unset\b)/i,/^(?:if\b)/i,/^(?:xor\b)/i,/^(?:read\b)/i,/^(?:array\b)/i,/^(?:heap\b)/i,/^(?:stack\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:return\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[$][t]([a-zA-Z_0-9])+)/i,/^(?:[$][v]([0-9]+)?)/i,/^(?:[s][p])/i,/^(?:[$][r][a]([0-9]+)?)/i,/^(?:[h][p])/i,/^(?:[<]([a-zA-Z"."]+)[>])/i,/^(?:#include\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_Ññáéíúó]*)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:xor\b)/i,/^(?:\\\^)/i,/^(?:~)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:%c\b)/i,/^(?:%e\b)/i,/^(?:%d\b)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:;)/i,/^(?::)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}