/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaXPathDesc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,7],$V1=[2,10],$V2=[1,4],$V3=[1,22],$V4=[1,23],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[1,15],$Vd=[1,16],$Ve=[1,17],$Vf=[1,18],$Vg=[1,19],$Vh=[1,20],$Vi=[1,21],$Vj=[5,7,20,22,38,39,40,41,42,43,45,46,47,48,49],$Vk=[1,27],$Vl=[1,41],$Vm=[1,47],$Vn=[1,48],$Vo=[1,36],$Vp=[1,37],$Vq=[1,38],$Vr=[1,39],$Vs=[1,40],$Vt=[1,42],$Vu=[1,43],$Vv=[1,44],$Vw=[1,45],$Vx=[1,46],$Vy=[5,7,8,13,14,15,50,52,53,54,55,56,57,58,59,60,61,62,63],$Vz=[5,7,8,14,15,20,22,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63],$VA=[1,67],$VB=[5,7,8,13,14,15,20,22,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63],$VC=[5,7,8,13,15,20,22,50,52,53,54,55,56,57,58,59,60,61,62,63],$VD=[1,81],$VE=[1,73],$VF=[1,74],$VG=[1,75],$VH=[1,76],$VI=[1,77],$VJ=[1,78],$VK=[1,79],$VL=[1,80],$VM=[1,82],$VN=[1,83],$VO=[1,84],$VP=[1,85],$VQ=[2,39],$VR=[5,7,8,13,14,15,16,19,20,21,22,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63],$VS=[2,44],$VT=[14,38,39,40,41,42,43,44,45,46,47,48,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"OPTION":7,"BARRA":8,"EXPRESION":9,"ATRIBUTO":10,"AXES":11,"ALL":12,"SELECT":13,"MULTIPLICACION":14,"ATRIBUTOS":15,"IDENTIFICADOR":16,"L_CORCHETES":17,"PREDICADOS":18,"CORCHETEIZQ":19,"CORCHETEDER":20,"PARIZQ":21,"PARDER":22,"COMA":23,"TERMINO":24,"OPLOGICAS":25,"OPARITMETICAS":26,"OPRELACIONAL":27,"UNARIO":28,"CADENA":29,"entero":30,"NUMBER":31,"CARACTER_LITERAL":32,"STRING_LITERAL":33,"LAST":34,"POSITION":35,"NODE":36,"TEXT":37,"IGUAL":38,"NOIGUAL":39,"MENORQUE":40,"MENORIGUAL":41,"MAYORQUE":42,"MAYORIGUAL":43,"MENOS":44,"MAS":45,"DIVISION":46,"MODULO":47,"OR":48,"AND":49,"ANCESTOR":50,"DOSPUNTOS":51,"ANCESTORSELF":52,"ATTRIBUTE":53,"CHILD":54,"DESCENDENT":55,"DESCENDENTSELF":56,"FOLLOWING":57,"FOLLOWINGSIBLI":58,"NAMESPACE":59,"PARENT":60,"PRECEDING":61,"PRECEDINGSIBLI":62,"SELF":63,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"OPTION",8:"BARRA",13:"SELECT",14:"MULTIPLICACION",15:"ATRIBUTOS",16:"IDENTIFICADOR",19:"CORCHETEIZQ",20:"CORCHETEDER",21:"PARIZQ",22:"PARDER",23:"COMA",29:"CADENA",30:"entero",31:"NUMBER",32:"CARACTER_LITERAL",33:"STRING_LITERAL",34:"LAST",35:"POSITION",36:"NODE",37:"TEXT",38:"IGUAL",39:"NOIGUAL",40:"MENORQUE",41:"MENORIGUAL",42:"MAYORQUE",43:"MAYORIGUAL",44:"MENOS",45:"MAS",46:"DIVISION",47:"MODULO",48:"OR",49:"AND",50:"ANCESTOR",51:"DOSPUNTOS",52:"ANCESTORSELF",53:"ATTRIBUTE",54:"CHILD",55:"DESCENDENT",56:"DESCENDENTSELF",57:"FOLLOWING",58:"FOLLOWINGSIBLI",59:"NAMESPACE",60:"PARENT",61:"PRECEDING",62:"PRECEDINGSIBLI",63:"SELF"},
productions_: [0,[3,2],[4,2],[4,1],[4,3],[6,3],[6,2],[6,1],[6,1],[6,1],[6,0],[12,2],[12,1],[12,1],[10,2],[10,2],[10,2],[10,3],[18,1],[18,2],[17,4],[17,3],[17,4],[17,3],[9,3],[9,3],[9,3],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,3],[24,3],[24,3],[24,3],[24,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[26,1],[26,1],[26,1],[26,1],[26,1],[27,1],[27,1],[28,1],[11,4],[11,4],[11,4],[11,4],[11,4],[11,4],[11,4],[11,4],[11,4],[11,4],[11,4],[11,4],[11,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
if($$[$0-1]!=false)$$[$0].push($$[$0-1]);this.$=$$[$0];
break;
case 3: case 18:
this.$=($$[$0]!=false) ?[$$[$0]]:[];
break;
case 4:
if($$[$0-2]!=false)$$[$0].push($$[$0-2]);this.$=$$[$0];
break;
case 5:
this.$ = new barrasnodo.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column, $$[$0-1]);
break;
case 6:
this.$ = new barrasnodo.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column, null);
break;
case 7: case 8: case 9: case 28: case 29: case 30: case 31: case 32: case 33: case 44:
this.$=$$[$0]
break;
case 11:
this.$ = new selectroot.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column, $$[$0]);
break;
case 12:
this.$ = new selectroot.default($$[$0],_$[$0].first_line,_$[$0].first_column, null);
break;
case 13:
this.$ = new todo.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 14:
this.$ = new atributosexpresion.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 15: case 16:
this.$ = new atributosimple.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 17:
this.$ = new atributospredicado.default($$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 19:
this.$ = new predicado.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 20:
this.$ = new arreglos.default($$[$0],_$[$0-3].first_line,_$[$0-3].first_column, $$[$0-2]);
break;
case 21:
this.$ = new arreglos.default(null,_$[$0-2].first_line,_$[$0-2].first_column, $$[$0-1]);
break;
case 22:
this.$ = new parentesis.default($$[$0-2],_$[$0-3].first_line,_$[$0-3].first_column, $$[$0]);
break;
case 23:
this.$ = new parentesis.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column, null);
break;
case 24:
this.$=new logica.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 25:
this.$=new aritmetica.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 26:
new relacional.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 27:
this.$=new aritmetica.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,$$[$0],null);
break;
case 34: case 38:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 35:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 36:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 37:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.CARACTER),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 39:
this.$ = new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 40: case 41: case 42: case 43:
this.$ = new especiales.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 45:
this.$=relacional.Relacionales.IGUAL
break;
case 46:
this.$=relacional.Relacionales.NOIGUAL
break;
case 47:
this.$=relacional.Relacionales.MENOR
break;
case 48:
this.$=relacional.Relacionales.MENORIGUAL
break;
case 49:
this.$=relacional.Relacionales.MAYOR
break;
case 50:
this.$=relacional.Relacionales.MAYORIGUAL
break;
case 51:
this.$=aritmetica.Operadores.RESTA
break;
case 52:
this.$=aritmetica.Operadores.SUMA
break;
case 53:
this.$=aritmetica.Operadores.MULTIPLICACION
break;
case 54:
this.$=aritmetica.Operadores.DIVISION
break;
case 55:
this.$=aritmetica.Operadores.MODULADOR
break;
case 56:
this.$=logica.Logicas.OR
break;
case 57:
this.$=logica.Logicas.AND
break;
case 58:
this.$=aritmetica.Operadores.MENOSNUM
break;
case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71:
this.$ = new axes.default($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,10:5,11:6,12:7,8:$V2,13:$V3,14:$V4,15:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),{1:[3]},{5:[1,24]},{4:25,5:[2,3],6:3,7:[1,26],8:$V2,10:5,11:6,12:7,13:$V3,14:$V4,15:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi},o($Vj,$V1,{9:28,24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,8:$Vk,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vy,[2,7]),o($Vy,[2,8]),o($Vy,[2,9]),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:50,8:$V2,13:[1,51],14:[1,52],15:$V5,16:[1,53],19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),{51:[1,54]},{51:[1,55]},{51:[1,56]},{51:[1,57]},{51:[1,58]},{51:[1,59]},{51:[1,60]},{51:[1,61]},{51:[1,62]},{51:[1,63]},{51:[1,64]},{51:[1,65]},{51:[1,66]},o($Vz,[2,12],{13:$VA}),o($VB,[2,13]),{1:[2,1]},{5:[2,2]},o($V0,$V1,{6:3,10:5,11:6,12:7,4:68,8:$V2,13:$V3,14:$V4,15:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:69,8:$Vk,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($VB,[2,6]),o($VC,[2,28],{25:70,26:71,27:72,14:$VD,38:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP}),o($Vj,$V1,{28:30,17:31,12:32,11:33,10:34,18:35,6:49,24:86,9:87,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($VB,[2,29]),o($VB,[2,30]),o($VB,[2,31]),o($VB,[2,32]),o($VB,[2,33]),o($VB,[2,34]),o($VB,[2,35]),o($VB,[2,36]),o($VB,[2,37]),o($VB,[2,38]),o($VB,$VQ,{17:88,19:$Vm,21:$Vn}),{21:[1,89]},{21:[1,90]},{21:[1,91]},{21:[1,92]},o($VR,[2,58]),o([20,38,39,40,41,42,43,45,46,47,48,49],$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:93,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o([22,38,39,40,41,42,43,45,46,47,48,49],$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:94,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($VB,[2,18]),o($VB,[2,14]),o($Vz,[2,15],{13:$VA}),o($VB,[2,16]),o($VB,$VQ,{17:95,19:$Vm,21:$Vn}),{51:[1,96]},{51:[1,97]},{51:[1,98]},{51:[1,99]},{51:[1,100]},{51:[1,101]},{51:[1,102]},{51:[1,103]},{51:[1,104]},{51:[1,105]},{51:[1,106]},{51:[1,107]},{51:[1,108]},o($VB,[2,11]),{5:[2,4]},o($VB,[2,5]),o($Vj,$V1,{28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:87,24:109,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:87,24:110,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:87,24:111,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($VR,[2,45]),o($VR,[2,46]),o($VR,[2,47]),o($VR,[2,48]),o($VR,[2,49]),o($VR,[2,50]),o($VR,[2,51]),o($VR,[2,52]),o($VR,[2,53]),o($VR,[2,54]),o($VR,[2,55]),o($VR,[2,56]),o($VR,[2,57]),o($VC,[2,27],{25:70,26:71,27:72,14:$VD,38:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP}),o($VB,$VS),o($VB,[2,19]),{22:[1,112]},{22:[1,113]},{22:[1,114]},{22:[1,115]},o($VT,$VS,{20:[1,116]}),o($VT,$VS,{22:[1,117]}),o($VB,[2,17]),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:118,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:119,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:120,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:121,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:122,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:123,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:124,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:125,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:126,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:127,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:128,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:129,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($Vj,$V1,{24:29,28:30,17:31,12:32,11:33,10:34,18:35,6:49,9:130,8:$V2,13:$V3,14:$V4,15:$V5,16:$Vl,19:$Vm,21:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,44:$Vx,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi}),o($VC,[2,24],{25:70,26:71,27:72,14:$VD,38:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP}),o($VC,[2,25],{25:70,26:71,27:72,14:$VD,38:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP}),o($VC,[2,26],{25:70,26:71,27:72,14:$VD,38:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP}),o($VB,[2,40]),o($VB,[2,41]),o($VB,[2,42]),o($VB,[2,43]),o($VB,[2,21],{17:131,19:$Vm,21:$Vn}),o($VB,[2,23],{23:[1,132]}),o($VB,[2,59]),o($VB,[2,60]),o($VB,[2,61]),o($VB,[2,62]),o($VB,[2,63]),o($VB,[2,64]),o($VB,[2,65]),o($VB,[2,66]),o($VB,[2,67]),o($VB,[2,68]),o($VB,[2,69]),o($VB,[2,70]),o($VB,[2,71]),o($VB,[2,20]),o($VB,[2,22])],
defaultActions: {24:[2,1],25:[2,2],68:[2,4]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const barrasnodo= require("./Instrucciones/BarrasNodo")
const identificador= require("./Expresiones/Identificador");
const CErrores= require("./Excepciones/Errores")
const CNodoErrores= require("./Excepciones/NodoErrores")
const inicio = require("../../../componentes/contenido-inicio/contenido-inicio.component")
const selectroot= require("./Instrucciones/SelectRoot")
const todo = require("./Instrucciones/todo")
const atributosimple = require("./Instrucciones/AtributosSimples")
const atributosexpresion = require("./Instrucciones/AtributosExpresion")
const atributospredicado = require("./Instrucciones/AtributosPredicado")
const predicado = require("./Instrucciones/Predicados")
const arreglos = require("./Instrucciones/Arreglos")
const parentesis= require("./Expresiones/ParentesisExpresion");
const axes=require("./Funciones/Axes")
const especiales= require("./Funciones/Especiales")
const nativo= require("./Expresiones/Nativo");
const Tipo= require("./Simbolos/Tipo");
const aritmetica= require("./Expresiones/Aritmetica");
const logica= require("./Expresiones/Logica");
const relacional= require("./Expresiones/Relacional");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 52
break;
case 4:return 56
break;
case 5:return 58
break;
case 6:return 62
break;
case 7:return 30
break;
case 8:return 33
break;
case 9:return 32
break;
case 10:return 50
break;
case 11:return 53        
break;
case 12:return 54
break;
case 13:return 55
break;
case 14:return 57
break;
case 15:return 59
break;
case 16:return 60
break;
case 17:return 61
break;
case 18:return 63
break;
case 19:return 34
break;
case 20:return 35
break;
case 21:return 36
break;
case 22:return 37
break;
case 23:return 48
break;
case 24:return 49
break;
case 25:return 47
break;
case 26:return 46
break;
case 27:return 15
break;
case 28:return 16;
break;
case 29:return 29;
break;
case 30:return 'DECIMAL';
break;
case 31:return 31
break;
case 32:return 8
break;
case 33:return 41
break;
case 34:return 43
break;
case 35:return 40
break;
case 36:return 42
break;
case 37:return 'INTERROGACION'
break;
case 38:return 38
break;
case 39:return 21
break;
case 40:return 22
break;
case 41:return 19
break;
case 42:return 20
break;
case 43:return 23
break;
case 44:return 7         
break;
case 45:return 45
break;
case 46:return 44
break;
case 47:return 14 /* SELECTALL TAMBIEN*/
break;
case 48:return 38
break;
case 49:return 39
break;
case 50:return 51
break;
case 51:return 13
break;
case 52:return 5
break;
case 53:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:ancestor-or-self\b)/i,/^(?:descendant-or-self\b)/i,/^(?:following-sibling\b)/i,/^(?:preceding-sibling\b)/i,/^(?:([0-9]+(\.[0-9]+)?))/i,/^(?:(("(\\"|[^"]|\n)*")))/i,/^(?:(('[^']*')))/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:node\b)/i,/^(?:text\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:div\b)/i,/^(?:@)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_!#$%&(),.\*\^Ññáéíúó]*)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:\/)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:=)/i,/^(?:!=)/i,/^(?::)/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaXPathDesc;
exports.Parser = GramaticaXPathDesc.Parser;
exports.parse = function () { return GramaticaXPathDesc.parse.apply(GramaticaXPathDesc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}