/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaXPath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,23],$V2=[1,24],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,17],$Vc=[1,18],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[1,22],$Vh=[5,6],$Vi=[5,6,9,17,18,19,46,48,49,50,51,52,53,54,55,56,57,58,59],$Vj=[1,28],$Vk=[1,39],$Vl=[1,46],$Vm=[1,47],$Vn=[1,30],$Vo=[1,31],$Vp=[1,32],$Vq=[1,34],$Vr=[1,35],$Vs=[1,41],$Vt=[1,42],$Vu=[1,43],$Vv=[1,44],$Vw=[1,45],$Vx=[5,6,9,18,19,21,23,30,31,32,33,34,35,36,37,38,39,40,41,46,48,49,50,51,52,53,54,55,56,57,58,59],$Vy=[1,66],$Vz=[5,6,9,17,18,19,21,23,30,31,32,33,34,35,36,37,38,39,40,41,46,48,49,50,51,52,53,54,55,56,57,58,59],$VA=[5,6,9,17,19,21,23,46,48,49,50,51,52,53,54,55,56,57,58,59],$VB=[1,71],$VC=[1,69],$VD=[1,70],$VE=[1,72],$VF=[1,73],$VG=[1,74],$VH=[1,75],$VI=[1,76],$VJ=[1,77],$VK=[1,78],$VL=[1,79],$VM=[1,80],$VN=[1,81],$VO=[1,82],$VP=[2,33],$VQ=[5,6,9,17,19,21,23,30,31,33,34,35,36,37,38,39,40,46,48,49,50,51,52,53,54,55,56,57,58,59],$VR=[5,6,9,17,19,21,23,33,34,39,40,46,48,49,50,51,52,53,54,55,56,57,58,59],$VS=[5,6,9,17,19,21,23,33,34,35,36,37,38,39,40,46,48,49,50,51,52,53,54,55,56,57,58,59],$VT=[5,6,9,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,41,46,48,49,50,51,52,53,54,55,56,57,58,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"NODO":4,"EOF":5,"OPTION":6,"INSTRUCCIONES":7,"INSTRUCCION":8,"BARRA":9,"EXPRESION":10,"ATRIBUTO":11,"AXES":12,"ALL":13,"PREDICADOS":14,"IDENTIFICADOR":15,"L_CORCHETES":16,"SELECT":17,"MULTIPLICACION":18,"ATRIBUTOS":19,"CORCHETEIZQ":20,"CORCHETEDER":21,"PARIZQ":22,"PARDER":23,"COMA":24,"CADENA":25,"entero":26,"NUMBER":27,"CARACTER_LITERAL":28,"STRING_LITERAL":29,"MENOS":30,"MAS":31,"DIVISION":32,"IGUAL":33,"NOIGUAL":34,"MENORQUE":35,"MENORIGUAL":36,"MAYORQUE":37,"MAYORIGUAL":38,"OR":39,"AND":40,"MODULO":41,"LAST":42,"POSITION":43,"NODE":44,"TEXT":45,"ANCESTOR":46,"DOSPUNTOS":47,"ANCESTORSELF":48,"ATTRIBUTE":49,"CHILD":50,"DESCENDENT":51,"DESCENDENTSELF":52,"FOLLOWING":53,"FOLLOWINGSIBLI":54,"NAMESPACE":55,"PARENT":56,"PRECEDING":57,"PRECEDINGSIBLI":58,"SELF":59,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"OPTION",9:"BARRA",15:"IDENTIFICADOR",17:"SELECT",18:"MULTIPLICACION",19:"ATRIBUTOS",20:"CORCHETEIZQ",21:"CORCHETEDER",22:"PARIZQ",23:"PARDER",24:"COMA",25:"CADENA",26:"entero",27:"NUMBER",28:"CARACTER_LITERAL",29:"STRING_LITERAL",30:"MENOS",31:"MAS",32:"DIVISION",33:"IGUAL",34:"NOIGUAL",35:"MENORQUE",36:"MENORIGUAL",37:"MAYORQUE",38:"MAYORIGUAL",39:"OR",40:"AND",41:"MODULO",42:"LAST",43:"POSITION",44:"NODE",45:"TEXT",46:"ANCESTOR",47:"DOSPUNTOS",48:"ANCESTORSELF",49:"ATTRIBUTE",50:"CHILD",51:"DESCENDENT",52:"DESCENDENTSELF",53:"FOLLOWING",54:"FOLLOWINGSIBLI",55:"NAMESPACE",56:"PARENT",57:"PRECEDING",58:"PRECEDINGSIBLI",59:"SELF"},
productions_: [0,[3,2],[4,3],[4,1],[7,2],[7,1],[8,3],[8,2],[8,1],[8,1],[8,1],[14,1],[14,2],[13,2],[13,1],[13,1],[11,2],[11,2],[11,2],[11,3],[16,4],[16,3],[16,4],[16,3],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,3],[10,3],[10,3],[10,3],[12,4],[12,4],[12,4],[12,4],[12,4],[12,4],[12,4],[12,4],[12,4],[12,4],[12,4],[12,4],[12,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
if($$[$0]!=false)$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 3: case 5: case 11:
this.$=($$[$0]!=false) ?[$$[$0]]:[];
break;
case 4:
if($$[$0]!=false)$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 6:
this.$ = new barrasnodo.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column, $$[$0-1]);
break;
case 7:
this.$ = new barrasnodo.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column, null);
break;
case 8: case 9: case 10: case 27: case 30: case 31: case 32: case 34:
this.$=$$[$0]
break;
case 12:
this.$ = new predicado.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 13:
this.$ = new selectroot.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column, $$[$0]);
break;
case 14:
this.$ = new selectroot.default($$[$0],_$[$0].first_line,_$[$0].first_column, null);
break;
case 15:
this.$ = new todo.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 16:
this.$ = new atributosexpresion.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 17: case 18:
this.$ = new atributosimple.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 19:
this.$ = new atributospredicado.default($$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 20:
this.$ = new arreglos.default($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column, $$[$0-1]);
break;
case 21:
this.$ = new arreglos.default(null,_$[$0-2].first_line,_$[$0-2].first_column, $$[$0-1]);
break;
case 22:
this.$ = new parentesis.default($$[$0-2],_$[$0-3].first_line,_$[$0-3].first_column, $$[$0]);
break;
case 23:
this.$ = new parentesis.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column, null);
break;
case 24: case 29:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 25:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 26:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 28:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.CARACTER),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 33:
this.$ = new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 35:
this.$=new aritmetica.default(aritmetica.Operadores.RESTA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 36:
this.$=new aritmetica.default(aritmetica.Operadores.SUMA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 37:
this.$=new aritmetica.default(aritmetica.Operadores.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 38:
this.$=new aritmetica.default(aritmetica.Operadores.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 39:
this.$=new relacional.default(relacional.Relacionales.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 40:
this.$=new relacional.default(relacional.Relacionales.NOIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 41:
this.$=new relacional.default(relacional.Relacionales.MENOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 42:
this.$=new relacional.default(relacional.Relacionales.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 43:
this.$=new relacional.default(relacional.Relacionales.MAYOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 44:
this.$=new relacional.default(relacional.Relacionales.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 45:
this.$=new logica.default(logica.Logicas.OR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 46:
this.$=new logica.default(logica.Logicas.AND,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 47:
this.$=new aritmetica.default(aritmetica.Operadores.MODULADOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 48:
this.$=new aritmetica.default(aritmetica.Operadores.MENOSNUM,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0],null);
break;
case 49: case 50: case 51: case 52:
this.$ = new especiales.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65:
this.$ = new axes.default($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
}
},
table: [{3:1,4:2,7:3,8:4,9:$V0,11:6,12:7,13:8,17:$V1,18:$V2,19:$V3,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{1:[3]},{5:[1,25],6:[1,26]},o($Vh,[2,3],{11:6,12:7,13:8,8:27,9:$V0,17:$V1,18:$V2,19:$V3,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg}),o($Vi,[2,5]),{8:48,9:$Vj,10:29,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),{8:48,9:$V0,10:49,11:38,12:37,13:36,14:40,15:[1,52],16:33,17:[1,50],18:[1,51],19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{47:[1,53]},{47:[1,54]},{47:[1,55]},{47:[1,56]},{47:[1,57]},{47:[1,58]},{47:[1,59]},{47:[1,60]},{47:[1,61]},{47:[1,62]},{47:[1,63]},{47:[1,64]},{47:[1,65]},o($Vx,[2,14],{17:$Vy}),o($Vz,[2,15]),{1:[2,1]},{7:67,8:4,9:$V0,11:6,12:7,13:8,17:$V1,18:$V2,19:$V3,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},o($Vi,[2,4]),{8:48,9:$Vj,10:68,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},o($VA,[2,7],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($Vz,[2,24]),o($Vz,[2,25]),o($Vz,[2,26]),o($Vz,[2,27],{20:$VO}),o($Vz,[2,28]),o($Vz,[2,29]),o($Vz,[2,30]),o($Vz,[2,31]),o($Vz,[2,32]),o($Vz,$VP,{16:83,20:$Vl,22:$Vm}),o($Vz,[2,34]),{8:48,9:$V0,10:84,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{22:[1,85]},{22:[1,86]},{22:[1,87]},{22:[1,88]},{8:48,9:$V0,10:89,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:90,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},o($Vz,[2,11]),o($VA,[2,16],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($Vx,[2,17],{17:$Vy}),o($Vz,[2,18]),o($Vz,$VP,{16:91,20:$Vl,22:$Vm}),{47:[1,92]},{47:[1,93]},{47:[1,94]},{47:[1,95]},{47:[1,96]},{47:[1,97]},{47:[1,98]},{47:[1,99]},{47:[1,100]},{47:[1,101]},{47:[1,102]},{47:[1,103]},{47:[1,104]},o($Vz,[2,13]),o($Vh,[2,2],{11:6,12:7,13:8,8:27,9:$V0,17:$V1,18:$V2,19:$V3,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg}),o($VA,[2,6],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),{8:48,9:$V0,10:105,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:106,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:107,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:108,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:109,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:110,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:111,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:112,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:113,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:114,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:115,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:116,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:117,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:118,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},o($Vz,[2,12],{20:$VO}),o($Vz,[2,48]),{23:[1,119]},{23:[1,120]},{23:[1,121]},{23:[1,122]},{18:$VB,21:[1,123],30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN},{18:$VB,23:[1,124],30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN},o($Vz,[2,19],{20:$VO}),{8:48,9:$V0,10:125,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:126,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:127,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:128,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:129,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:130,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:131,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:132,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:133,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:134,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:135,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:136,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{8:48,9:$V0,10:137,11:38,12:37,13:36,14:40,15:$Vk,16:33,17:$V1,18:$V2,19:$V3,20:$Vl,22:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},o($VQ,[2,35],{18:$VB,32:$VE,41:$VN}),o($VQ,[2,36],{18:$VB,32:$VE,41:$VN}),o($Vz,[2,37]),o($Vz,[2,38]),o($VR,[2,39],{18:$VB,30:$VC,31:$VD,32:$VE,35:$VH,36:$VI,37:$VJ,38:$VK,41:$VN}),o($VR,[2,40],{18:$VB,30:$VC,31:$VD,32:$VE,35:$VH,36:$VI,37:$VJ,38:$VK,41:$VN}),o($VS,[2,41],{18:$VB,30:$VC,31:$VD,32:$VE,41:$VN}),o($VS,[2,42],{18:$VB,30:$VC,31:$VD,32:$VE,41:$VN}),o($VS,[2,43],{18:$VB,30:$VC,31:$VD,32:$VE,41:$VN}),o($VS,[2,44],{18:$VB,30:$VC,31:$VD,32:$VE,41:$VN}),o([5,6,9,17,19,21,23,39,46,48,49,50,51,52,53,54,55,56,57,58,59],[2,45],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,40:$VM,41:$VN}),o([5,6,9,17,19,21,23,39,40,46,48,49,50,51,52,53,54,55,56,57,58,59],[2,46],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,41:$VN}),o($Vz,[2,47]),{18:$VB,21:[1,138],30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN},o($Vz,[2,49]),o($Vz,[2,50]),o($Vz,[2,51]),o($Vz,[2,52]),o($VT,[2,21]),o($VT,[2,23],{24:[1,139]}),o($VA,[2,53],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($VA,[2,54],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($VA,[2,55],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($VA,[2,56],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($VA,[2,57],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($VA,[2,58],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($VA,[2,59],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($VA,[2,60],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($VA,[2,61],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($VA,[2,62],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($VA,[2,63],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($VA,[2,64],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($VA,[2,65],{18:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:$VM,41:$VN}),o($VT,[2,20]),o($VT,[2,22])],
defaultActions: {25:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const barrasnodo= require("./Analizador/Instrucciones/BarrasNodo")
const identificador= require("./Analizador/Expresiones/Identificador");
const CErrores= require("./Analizador/Excepciones/Errores")
const CNodoErrores= require("./Analizador/Excepciones/NodoErrores")
const inicio = require("../../componentes/contenido-inicio/contenido-inicio.component")
const selectroot= require("./Analizador/Instrucciones/SelectRoot")
const todo = require("./Analizador/Instrucciones/todo")
const atributosimple = require("./Analizador/Instrucciones/AtributosSimples")
const atributosexpresion = require("./Analizador/Instrucciones/AtributosExpresion")
const atributospredicado = require("./Analizador/Instrucciones/AtributosPredicado")
const predicado = require("./Analizador/Instrucciones/Predicados")
const arreglos = require("./Analizador/Instrucciones/Arreglos")
const parentesis= require("./Analizador/Expresiones/ParentesisExpresion");
const axes=require("./Analizador/Funciones/Axes")
const especiales= require("./Analizador/Funciones/Especiales")
const nativo= require("./Analizador/Expresiones/Nativo");
const Tipo= require("./Analizador/Simbolos/Tipo");
const aritmetica= require("./Analizador/Expresiones/Aritmetica");
const logica= require("./Analizador/Expresiones/Logica");
const relacional= require("./Analizador/Expresiones/Relacional");
const instrucciones= require("./Analizador/Abstracto/Instrucciones")

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 48
break;
case 4:return 52
break;
case 5:return 54
break;
case 6:return 58
break;
case 7:return 26
break;
case 8:return 29
break;
case 9:return 28
break;
case 10:return 46
break;
case 11:return 49        
break;
case 12:return 50
break;
case 13:return 51
break;
case 14:return 53
break;
case 15:return 55
break;
case 16:return 56
break;
case 17:return 57
break;
case 18:return 59
break;
case 19:return 42
break;
case 20:return 43
break;
case 21:return 44
break;
case 22:return 45
break;
case 23:return 39
break;
case 24:return 40
break;
case 25:return 41
break;
case 26:return 32
break;
case 27:return 19
break;
case 28:return 15;
break;
case 29:return 25;
break;
case 30:return 'DECIMAL';
break;
case 31:return 27
break;
case 32:return 9
break;
case 33:return 36
break;
case 34:return 38
break;
case 35:return 35
break;
case 36:return 37
break;
case 37:return 'INTERROGACION'
break;
case 38:return 33
break;
case 39:return 22
break;
case 40:return 23
break;
case 41:return 20
break;
case 42:return 21
break;
case 43:return 24
break;
case 44:return 6         
break;
case 45:return 31
break;
case 46:return 30
break;
case 47:return 18 /* SELECTALL TAMBIEN*/
break;
case 48:return 33
break;
case 49:return 34
break;
case 50:return 47
break;
case 51:return 17
break;
case 52:return 5
break;
case 53:inicio.listaErrores.push(new CNodoErrores.default("Lexico","No se esperaba el caracter: "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); console.log("Lexico, No se esperaba el caracter: "+yy_.yytext +" Linea: "+ yy_.yylloc.first_line + "Columna: " + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:ancestor-or-self\b)/i,/^(?:descendant-or-self\b)/i,/^(?:following-sibling\b)/i,/^(?:preceding-sibling\b)/i,/^(?:([0-9]+(\.[0-9]+)?))/i,/^(?:(("(\\"|[^"]|\n)*")))/i,/^(?:(('[^']*')))/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:node\b)/i,/^(?:text\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:div\b)/i,/^(?:@)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_!#$%&(),.\*\^Ññáéíúó]*)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:\/)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:=)/i,/^(?:!=)/i,/^(?::)/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaXPath;
exports.Parser = GramaticaXPath.Parser;
exports.parse = function () { return GramaticaXPath.parse.apply(GramaticaXPath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}