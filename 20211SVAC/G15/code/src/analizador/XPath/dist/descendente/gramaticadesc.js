/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticadesc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,37],$V1=[1,13],$V2=[1,14],$V3=[1,38],$V4=[1,40],$V5=[1,41],$V6=[1,42],$V7=[1,43],$V8=[1,44],$V9=[1,45],$Va=[1,46],$Vb=[1,47],$Vc=[1,53],$Vd=[1,59],$Ve=[1,60],$Vf=[1,61],$Vg=[1,62],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[1,36],$Vm=[1,37],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,48],$Vr=[1,49],$Vs=[1,31],$Vt=[5,86],$Vu=[1,66],$Vv=[5,11,86],$Vw=[5,11,14,86],$Vx=[5,11,14,17,18,19,20,21,22,86],$Vy=[1,78],$Vz=[1,79],$VA=[5,11,14,17,18,19,20,21,22,27,28,86],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[5,11,14,17,18,19,20,21,22,27,28,32,33,34,86],$VF=[1,87],$VG=[5,11,14,17,18,19,20,21,22,27,28,32,33,34,38,86],$VH=[1,93],$VI=[1,92],$VJ=[5,11,14,17,18,19,20,21,22,27,28,32,33,34,38,40,42,86],$VK=[1,95],$VL=[5,11,14,17,18,19,20,21,22,27,28,32,33,34,38,40,42,85,86],$VM=[5,11,14,27,28,32,33,34,40,42,54,55,57,58,59,60,61,62,63,64,70,73,74,75,78,79,80,81,82,83,86,92,93,94,95,96,97],$VN=[64,70,73,74,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XPATH":3,"EXPR":4,"EOF":5,"EXPRESIONSIMPLE":6,"OREXPRESION":7,"ANDEXPRESION":8,"OREXPRESIONL1":9,"OREXPRESIONL2":10,"or_":11,"COMPARACIONEXPRESION":12,"ANDEXPRESIONL1":13,"ANDEXPRESIONL2":14,"STRINGCONCATENA":15,"COMPARACIONGENERAL":16,"igual":17,"diferente":18,"menorq":19,"menorigual":20,"mayorq":21,"mayorigual":22,"SUMAEXPRESION":23,"MULTIPLICACIONEXPRESION":24,"SUMAEXPRESIONL1":25,"SUMAEXPRESIONL2":26,"mas":27,"menos":28,"UNIONEXPRESION":29,"MULTIPLICACIONEXPRESIONL1":30,"MULTIPLICACIONEXPRESIONL2":31,"mul":32,"div_":33,"mod_":34,"INTERSECCINEXPRESION":35,"UNIONEXPRESIONL1":36,"UNIONEXPRESIONL2":37,"simpleor":38,"PATHEXPRESION":39,"ddiagonal":40,"RUTARELATIVA":41,"sdiagonal":42,"PASOEXPRESION":43,"RUTARELATIVAL1":44,"RUTARELATIVAL2":45,"POSTEXPRESION":46,"AXISEXPRESION":47,"REVERSOPASO":48,"PREDICADO":49,"DELANTEPASO":50,"ABREVIATURADESPUESPASO":51,"DELANTEAXIS":52,"NODOPRUEBA":53,"arroba":54,"child":55,"ddospuntos":56,"descendant":57,"attribute":58,"self":59,"descendant_or_self":60,"following":61,"following_sibling":62,"namespace":63,"NOMBRETEST":64,"PRIMERTEST":65,"METODONODO":66,"METODOTEXTO":67,"METODOLAST":68,"METODOPOSITION":69,"node":70,"lparen":71,"rparen":72,"text":73,"last":74,"position":75,"REVERSOAXIS":76,"ABREVIATURAREVERSEPASO":77,"parent":78,"ancestor_or_self":79,"ancestor":80,"preceding_sibling":81,"preceding":82,"dpunto":83,"EXPRESIONPRIMARIA":84,"lcorchete":85,"rcorchete":86,"LITERAL":87,"ITEMEXPRESION":88,"EXPRESIONSTRING":89,"EXPRESIONNUMERICA":90,"EXPRESIONARROBA":91,"identifier":92,"DecimalLiteral":93,"IntegerLiteral":94,"StringLiteral":95,"CharLiteral":96,"spunto":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"or_",14:"ANDEXPRESIONL2",17:"igual",18:"diferente",19:"menorq",20:"menorigual",21:"mayorq",22:"mayorigual",27:"mas",28:"menos",32:"mul",33:"div_",34:"mod_",38:"simpleor",40:"ddiagonal",42:"sdiagonal",54:"arroba",55:"child",56:"ddospuntos",57:"descendant",58:"attribute",59:"self",60:"descendant_or_self",61:"following",62:"following_sibling",63:"namespace",64:"NOMBRETEST",70:"node",71:"lparen",72:"rparen",73:"text",74:"last",75:"position",78:"parent",79:"ancestor_or_self",80:"ancestor",81:"preceding_sibling",82:"preceding",83:"dpunto",85:"lcorchete",86:"rcorchete",92:"identifier",93:"DecimalLiteral",94:"IntegerLiteral",95:"StringLiteral",96:"CharLiteral",97:"spunto"},
productions_: [0,[3,2],[4,1],[6,1],[7,2],[7,1],[9,2],[9,1],[10,2],[8,2],[8,1],[13,2],[13,1],[12,3],[12,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[15,1],[23,2],[23,1],[25,2],[25,1],[26,2],[26,2],[24,2],[24,1],[30,2],[30,1],[31,2],[31,2],[31,2],[29,2],[29,1],[29,0],[36,2],[36,1],[37,2],[35,1],[39,2],[39,2],[39,1],[39,1],[39,1],[41,2],[41,1],[44,2],[44,1],[45,2],[45,2],[43,1],[43,1],[47,2],[47,2],[47,1],[47,1],[50,1],[50,2],[51,2],[51,1],[52,2],[52,2],[52,2],[52,2],[52,2],[52,2],[52,2],[52,2],[53,1],[53,1],[65,1],[65,1],[65,1],[65,1],[66,3],[67,3],[68,3],[69,3],[48,2],[48,1],[76,2],[76,2],[76,2],[76,2],[76,2],[77,1],[46,2],[46,1],[49,3],[84,1],[84,1],[87,1],[87,1],[87,1],[91,2],[91,2],[90,1],[90,1],[89,1],[89,1],[89,1],[88,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                        this.$= new Nodo("INICIO","Xpath");
		        this.$.addHijos($$[$0-1]);
                     return { ErrorLexico:arreglolexico,msj:"Analisis XPath Ascendenete Finalizado.\n.",diagramaAST:this.$};
       
        
break;
case 2:
       
                                this.$ = new Nodo("EXPRESIONSIMPLE","PATHEXPRESION");
                                this.$.addHijos($$[$0]);
                                
break;
case 3:
       
                                                this.$ = new Nodo("EXPRESIONSIMPLE","PATHEXPRESION");
                                                this.$.addHijos($$[$0]);
                                                
break;
case 4:
       
                                                this.$ = new Nodo("OREXPRESION","PATHEXPRESION");
                                                this.$.addHijos($$[$0-1]);
                                                this.$.addHijos($$[$0]);
                                                
break;
case 5:
       
                                                this.$ = new Nodo("OREXPRESION","PATHEXPRESION");
                                                this.$.addHijos($$[$0]);
                                                
break;
case 6:
       
                                                this.$ = new Nodo("OREXPRESIONL1","PATHEXPRESION");
                                                this.$.addHijos($$[$0-1]);
                                                this.$.addHijos($$[$0]);
                                                
break;
case 7:
       
                                                this.$ = new Nodo("OREXPRESIONL1","PATHEXPRESION");
                                                this.$.addHijos($$[$0]);
                                        
break;
case 8:
       this.$ = new Nodo("COMPARACIONEXPRESION","PATHEXPRESION");
                                                this.$.addHijos(new Nodo($$[$0-1],"or"));
                                                this.$.addHijos($$[$0]);
                                        
break;
case 9:
   
                                                        this.$ = new Nodo("ANDEXPRESION","PATHEXPRESION");
                                                        this.$.addHijos($$[$0-1]);
                                                        this.$.addHijos($$[$0]);
                                                
break;
case 10:
   
                                                        this.$ = new Nodo("ANDEXPRESION","PATHEXPRESION");
                                                        this.$.addHijos($$[$0]);
                                                
break;
case 11:
   
                                                        this.$ = new Nodo("ANDEXPRESIONL2","PATHEXPRESION");
                                                        this.$.addHijos($$[$0-1]);
                                                        this.$.addHijos($$[$0]);
                                                
break;
case 12:
       this.$ = new Nodo("COMPARACIONEXPRESION","PATHEXPRESION");
                                                        this.$.addHijos($$[$0]);
                                                
break;
case 13:
   
                                                                                this.$ = new Nodo("COMPARACIONEXPRESION","PATHEXPRESION");
                                                                                this.$.addHijos($$[$0-2]);
                                                                                this.$.addHijos($$[$0-1]);
                                                                                this.$.addHijos($$[$0]);
                                                                                
break;
case 14:
   
                                                                                this.$ = new Nodo("COMPARACIONEXPRESION","PATHEXPRESION");
                                                                                this.$.addHijos($$[$0]);
                                                                                
break;
case 15:
   
                                                        this.$ = new Nodo("COMPARACIONGENERAL","PATHEXPRESION");
                                                        this.$.addHijos(new Nodo($$[$0],"igual"));
                                                
break;
case 16:
   
                                                        this.$ = new Nodo("COMPARACIONGENERAL","PATHEXPRESION");
                                                        this.$.addHijos(new Nodo($$[$0],"diferente"));
                                                
break;
case 17:
   
                                                        this.$ = new Nodo("COMPARACIONGENERAL","PATHEXPRESION");
                                                        this.$.addHijos(new Nodo($$[$0],"menorq"));
                                                
break;
case 18:
   
                                                        this.$ = new Nodo("COMPARACIONGENERAL","PATHEXPRESION");
                                                        this.$.addHijos(new Nodo($$[$0],"menorigual"));
                                                
break;
case 19:
   
                                                        this.$ = new Nodo("COMPARACIONGENERAL","PATHEXPRESION");
                                                        this.$.addHijos(new Nodo($$[$0],"mayorq"));
                                                
break;
case 20:
   
                                                        this.$ = new Nodo("COMPARACIONGENERAL","PATHEXPRESION");
                                                        this.$.addHijos(new Nodo($$[$0],"mayorigual"));
                                                
break;
case 21:
   
                                                                                this.$ = new Nodo("STRINGCONCATENA","PATHEXPRESION");
                                                                                this.$.addHijos($$[$0]);
                                                                                
break;
case 22:
   
                                                                                this.$ = new Nodo("SUMAEXPRESION","PATHEXPRESION");
                                                                                this.$.addHijos($$[$0-1]);
                                                                                this.$.addHijos($$[$0]);
                                                                                
break;
case 23:
   
                                                                                this.$ = new Nodo("SUMAEXPRESION","PATHEXPRESION");
                                                                                this.$.addHijos($$[$0]);
                                                                                
break;
case 24:
   
                                                                                this.$ = new Nodo("SUMAEXPRESIONL1","PATHEXPRESION");
                                                                                this.$.addHijos($$[$0-1]);
                                                                                this.$.addHijos($$[$0]);
                                                                                
break;
case 25:
   
                                                                                this.$ = new Nodo("SUMAEXPRESIONL1","PATHEXPRESION");
                                                                                this.$.addHijos($$[$0]);
                                                                                
break;
case 26:
   
                                                                                this.$ = new Nodo("SUMAEXPRESIONL2","PATHEXPRESION");
                                                                                this.$.addHijos(new Nodo($$[$0-1],"mas"));
                                                                                this.$.addHijos($$[$0]);
                                                                                
break;
case 27:
   
                                                                                this.$ = new Nodo("SUMAEXPRESIONL2","PATHEXPRESION");
                                                                                this.$.addHijos(new Nodo($$[$0-1],"menos"));
                                                                                this.$.addHijos($$[$0]);
                                                                                
break;
case 28:
   
                                                                                this.$ = new Nodo("MULTIPLICACIONEXPRESION","PATHEXPRESION");
                                                                                this.$.addHijos($$[$0-1]);
                                                                                this.$.addHijos($$[$0]);
                                                                                
break;
case 29:
   
                                                                                this.$ = new Nodo("MULTIPLICACIONEXPRESION","PATHEXPRESION");
                                                                                this.$.addHijos($$[$0]);
                                                                                
break;
case 30:
   
                                                                                this.$ = new Nodo("MULTIPLICACIONEXPRESIONL1","PATHEXPRESION");
                                                                                this.$.addHijos($$[$0-1]);
                                                                                this.$.addHijos($$[$0]);
                                                                                
break;
case 31:
   
                                                        this.$ = new Nodo("MULTIPLICACIONEXPRESIONL1","PATHEXPRESION");
                                                        this.$.addHijos($$[$0]);
                                                        
break;
case 32:
   
                                                        this.$ = new Nodo("MULTIPLICACIONEXPRESIONL2","PATHEXPRESION");
                                                        this.$.addHijos(new Nodo($$[$0-1],"mul"));
                                                        this.$.addHijos($$[$0]);
                                                        
break;
case 33:
   
                                                        this.$ = new Nodo("MULTIPLICACIONEXPRESIONL2","PATHEXPRESION");
                                                        this.$.addHijos(new Nodo($$[$0-1],"div"));
                                                        this.$.addHijos($$[$0]);
                                                        
break;
case 34:
   
                                                        this.$ = new Nodo("MULTIPLICACIONEXPRESIONL2","PATHEXPRESION");
                                                        this.$.addHijos(new Nodo($$[$0-1],"mod"));
                                                        this.$.addHijos($$[$0]);
                                                        
break;
case 35:
   
                                                        this.$ = new Nodo("UNIONEXPRESION","PATHEXPRESION");
                                                        this.$.addHijos($$[$0-1]);
                                                        this.$.addHijos($$[$0]);
                                                        
break;
case 36:
   
                                                        this.$ = new Nodo("UNIONEXPRESION","PATHEXPRESION");
                                                        this.$.addHijos($$[$0]);
                                                        
break;
case 38:
   
                                                        this.$ = new Nodo("UNIONEXPRESIONL1","PATHEXPRESION");
                                                        this.$.addHijos($$[$0-1]);
                                                        this.$.addHijos($$[$0]);
                                                        
break;
case 39:
   
                                                        this.$ = new Nodo("UNIONEXPRESIONL1","PATHEXPRESION");
                                                        this.$.addHijos($$[$0]);
                                                        
break;
case 40:
   
                                                this.$ = new Nodo("UNIONEXPRESIONL2","PATHEXPRESION");
                                                this.$.addHijos($$[$0-1]);
                                                this.$.addHijos($$[$0]);	
                                                
break;
case 41:
   
                                                this.$ = new Nodo("INTERSECCINEXPRESION","PATHEXPRESION");
                                                this.$.addHijos($$[$0]);	
                                                
break;
case 42:
   
                                                this.$ = new Nodo("PATHEXPRESION","NOMBREPRIMERTESTTEST");
			                        this.$.addHijos(new Nodo($$[$0-1],"ddiagonal"));
                                                this.$.addHijos($$[$0]);	
                                                
break;
case 43:
   
                                                this.$ = new Nodo("PATHEXPRESION","NOMBREPRIMERTESTTEST");
			                        this.$.addHijos(new Nodo($$[$0-1],"sdiagonal"));
                                                this.$.addHijos($$[$0]);	
                                                
break;
case 44:
   
                                                this.$ = new Nodo("PATHEXPRESION","NOMBREPRIMERTESTTEST");
			                        this.$.addHijos(new Nodo($$[$0],"ddiagonal"));	
                                                
break;
case 45:
   
                                                this.$ = new Nodo("PATHEXPRESION","NOMBREPRIMERTESTTEST");
			                        this.$.addHijos(new Nodo($$[$0],"sdiagonal"));	
                                                
break;
case 46:
   
                                                this.$ = new Nodo("PATHEXPRESION","POSTEXPRESION");
			                        this.$.addHijos($$[$0]);
                                                
break;
case 47:
   
                                                this.$ = new Nodo("RUTARELATIVAL1","POSTEXPRESION");
			                        this.$.addHijos($$[$0-1]);
                                                this.$.addHijos($$[$0]);
                                                
break;
case 48:
   
                                                this.$ = new Nodo("RUTARELATIVAL1","POSTEXPRESION");
			                        this.$.addHijos($$[$0]);
                                                
break;
case 49:
   
                                                this.$ = new Nodo("RUTARELATIVAL1","POSTEXPRESION");
			                        this.$.addHijos($$[$0-1]);
                                                this.$.addHijos($$[$0]);	
                                                
break;
case 50:
   
                                                this.$ = new Nodo("RUTARELATIVAL1","POSTEXPRESION");
			                        this.$.addHijos($$[$0]);	
                                                
break;
case 51: case 52:
   
                                                this.$ = new Nodo("RUTARELATIVAL2","POSTEXPRESION");
			                        this.$.addHijos($$[$0-1]);
                                                this.$.addHijos($$[$0]);	
                                                
break;
case 53:
   
                                                this.$ = new Nodo("PASOEXPRESION","POSTEXPRESION");
			                        this.$.addHijos($$[$0]);	
                                        
break;
case 54:
   
                                                this.$ = new Nodo("PASOEXPRESION","AXISEXPRESION");
			                        this.$.addHijos($$[$0]);	
                                        
break;
case 55:
   
                                                this.$ = new Nodo("AXISEXPRESION","REVERSOPASO");
			                        this.$.addHijos($$[$0-1]);
                                                this.$.addHijos($$[$0]);	
                                        
break;
case 56:
   
                                                this.$ = new Nodo("AXISEXPRESION","DELANTEPASO");
			                        this.$.addHijos($$[$0-1]);
                                                this.$.addHijos($$[$0]);	
                                        
break;
case 57:
   
                                                this.$ = new Nodo("AXISEXPRESION","REVERSOPASO");
			                        this.$.addHijos($$[$0]);	
                                        
break;
case 58:
   
                                                this.$ = new Nodo("AXISEXPRESION","DELANTEPASO");
			                        this.$.addHijos($$[$0]);	
                                        
break;
case 59:
   
                                                this.$ = new Nodo("DELANTEPASO","ABREVIATURADESPUESPASO");
			                        this.$.addHijos($$[$0]);	
                                                
break;
case 60:
   
                                                this.$ = new Nodo("DELANTEPASO","TERM");
			                        this.$.addHijos($$[$0-1]);
                                                this.$.addHijos($$[$0]);	
                                                
break;
case 61:
   
                                                this.$ = new Nodo("ABREVIATURADESPUESPASO","NODOPRUEBA-arroba");
			                        this.$.addHijos($$[$0-1]);	
                                                
break;
case 62:
   
                                                this.$ = new Nodo("ABREVIATURADESPUESPASO","NODOPRUEBA");
			                        this.$.addHijos($$[$0]);	
                                        
break;
case 63:
   
                                                this.$ = new Nodo("DELANTEAXIS","NOMBREPRIMERTESTTEST");
			                        this.$.addHijos(new Nodo($$[$0-1],"child"));	
                                        
break;
case 64:
   
                                                this.$ = new Nodo("DELANTEAXIS","NOMBREPRIMERTESTTEST");
			                        this.$.addHijos(new Nodo($$[$0-1],"descendant"));	
                                        
break;
case 65:
   
                                                this.$ = new Nodo("DELANTEAXIS","NOMBREPRIMERTESTTEST");
			                        this.$.addHijos(new Nodo($$[$0-1],"attribute"));	
                                        
break;
case 66:
   
                                                this.$ = new Nodo("DELANTEAXIS","NOMBREPRIMERTESTTEST");
			                        this.$.addHijos(new Nodo($$[$0-1],"self"));	
                                        
break;
case 67:
   
                                                this.$ = new Nodo("DELANTEAXIS","NOMBREPRIMERTESTTEST");
			                        this.$.addHijos(new Nodo($$[$0-1],"descendant_or_self"));	
                                        
break;
case 68:
   
                                                this.$ = new Nodo("DELANTEAXIS","NOMBREPRIMERTESTTEST");
			                        this.$.addHijos(new Nodo($$[$0-1],"following"));	
                                        
break;
case 69:
   
                                                this.$ = new Nodo("DELANTEAXIS","NOMBREPRIMERTESTTEST");
			                        this.$.addHijos(new Nodo($$[$0-1],"following_sibling"));	
                                        
break;
case 70:
   
                                                this.$ = new Nodo("DELANTEAXIS","NOMBREPRIMERTESTTEST");
			                        this.$.addHijos(new Nodo($$[$0-1],"namespace"));	
                                        
break;
case 71:
   
                                                this.$ = new Nodo("NODOPRUEBA","NOMBRETEST");
			                        this.$.addHijos($$[$0]);	
                                        
break;
case 72:
   
                                                this.$ = new Nodo("NODOPRUEBA","NOMBREPRIMERTESTTEST");
			                        this.$.addHijos($$[$0]);	
                                        
break;
case 73:
   
                                                this.$ = new Nodo("PRIMERTEST","METODONODO");
			                        this.$.addHijos($$[$0]);	
                                        
break;
case 74:
   
                                                this.$ = new Nodo("PRIMERTEST","METODOTEXTO");
			                        this.$.addHijos($$[$0]);	
                                        
break;
case 75:
   
                                                this.$ = new Nodo("PRIMERTEST","METODOLAST");
			                        this.$.addHijos($$[$0]);	
                                        
break;
case 76:
   
                                                this.$ = new Nodo("PRIMERTEST","METODOPOSITION");
			                        this.$.addHijos($$[$0]);	
                                        
break;
case 77:
   
                                                this.$ = new Nodo("METODONODO","TERM");
			                        this.$.addHijos(new Nodo($$[$0-2],"node")); 	
                                        
break;
case 78:
   
                                                this.$ = new Nodo("METODOLAST","TERM");
			                        this.$.addHijos(new Nodo($$[$0-2],"position")); 	
                                        
break;
case 79:
   
                                                this.$ = new Nodo("METODOLAST","TERM");
			                        this.$.addHijos(new Nodo($$[$0-2],"last")); 	
                                        
break;
case 80:
   
                                                this.$ = new Nodo("METODOPOSITION","TERM");
			                        this.$.addHijos(new Nodo($$[$0-2],"position")); 	
                                        
break;
case 81:
 
                                                this.$ = new Nodo("REVERSOPASO","REVERSOAXIS");
					        this.$.addHijos($$[$0-1]);
                                                this.$.addHijos($$[$0]);
					
break;
case 82:
 
                                                this.$ = new Nodo("REVERSOPASO","ABREVIATURAREVERSEPASO");
					        this.$.addHijos($$[$0]);
					
break;
case 83:
   
                                                this.$ = new Nodo("REVERSOAXIS","TERM");
			                        this.$.addHijos(new Nodo($$[$0-1],"parent")); 	
                                        
break;
case 84:
   
                                                this.$ = new Nodo("REVERSOAXIS","TERM");
			                        this.$.addHijos(new Nodo($$[$0-1],"ancestor_or_self")); 	
                                        
break;
case 85:
   
                                                this.$ = new Nodo("REVERSOAXIS","TERM");
			                        this.$.addHijos(new Nodo($$[$0-1],"ancestor")); 	
                                        
break;
case 86:
   
                                                this.$ = new Nodo("REVERSOAXIS","TERM");
			                        this.$.addHijos(new Nodo($$[$0-1],"preceding_sibling")); 	
                                        
break;
case 87:
   
                                                this.$ = new Nodo("REVERSOAXIS","TERM");
			                        this.$.addHijos(new Nodo($$[$0-1],"preceding")); 	
                                        
break;
case 88:
   
                                this.$ = new Nodo("ABREVIATURAREVERSEPASO","TERM");
			        this.$.addHijos(new Nodo($$[$0],"dpunto")); 	
                                
break;
case 89:
 
                                                        this.$ = new Nodo("POSTEXPRESION","EXPRESIONPRIMARIA2");
					                this.$.addHijos($$[$0-1]);
                                                        this.$.addHijos($$[$0]);
					        
break;
case 90:
 
                                                        this.$ = new Nodo("POSTEXPRESION","EXPRESIONPRIMARIA");
					                this.$.addHijos($$[$0]);
					        
break;
case 91:
 
                                                this.$ = new Nodo("PREDICADO","LITERAL");
					        this.$.addHijos($$[$0-2]);
                                                this.$.addHijos($$[$0-1]);
                                                this.$.addHijos($$[$0]);
					
break;
case 92: case 93:
 
                                                this.$ = new Nodo("EXPRESIONPRIMARIA","LITERAL");
					        this.$.addHijos($$[$0]);
					
break;
case 94:
 this.$ = new Nodo("LITERAL","EXPRESIONSTRING");
					        this.$.addHijos($$[$0]);
					
break;
case 95:
 this.$ = new Nodo("LITERAL","EXPRESIONNUMERICA");
					        this.$.addHijos($$[$0]);
					
break;
case 96:
 this.$ = new Nodo("LITERAL","EXPRESIONARROBA");
					        this.$.addHijos($$[$0]);
					
break;
case 97:
   
                                        this.$ = new Nodo("EXPRESIONARROBA","TERM");
			                this.$.addHijos(new Nodo($$[$0],"identificador")); 	
                                        
break;
case 98:
   
                                        this.$ = new Nodo("EXPRESIONARROBA","TERM");
			                this.$.addHijos(new Nodo($$[$0],"mul")); 	
                                        
break;
case 99:
   
                                this.$ = new Nodo("EXP","TERM");
			        this.$.addHijos(new Nodo($$[$0],"decimal")); 	
                                
break;
case 100:
   
                                this.$ = new Nodo("EXP","TERM");
			        this.$.addHijos(new Nodo($$[$0],"entero")); 	
                                
break;
case 101:
   this.$ = new Nodo("EXP","TERM");
			        this.$.addHijos(new Nodo($$[$0],"identificador")); 	
                                
break;
case 102:
   
                                this.$ = new Nodo("EXP","TERM");
			        this.$.addHijos(new Nodo($$[$0],"char")); 	
                                
break;
case 103:
   
                                this.$ = new Nodo("EXP","TERM");
			        this.$.addHijos(new Nodo($$[$0],"identificador")); 	
                                
break;
case 104:
   
                                this.$ = new Nodo("ITEMEXPRESION","TERM");
			        this.$.addHijos(new Nodo($$[$0],"spunto")); 	
                                
break;
}
},
table: [o([5,11,14,17,18,19,20,21,22,27,28,32,33,34],$V0,{3:1,4:2,6:3,7:4,8:5,12:6,15:7,23:8,24:9,29:10,35:11,39:12,41:15,43:16,46:17,47:18,84:19,48:20,50:21,87:22,88:23,76:24,77:25,51:26,52:27,89:28,90:29,91:30,53:39,65:54,66:55,67:56,68:57,69:58,40:$V1,42:$V2,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,70:$Vd,73:$Ve,74:$Vf,75:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs}),{1:[3]},{5:[1,63]},o($Vt,[2,2]),o($Vt,[2,3]),o($Vt,[2,5],{9:64,10:65,11:$Vu}),o($Vv,[2,10],{13:67,14:[1,68]}),o($Vw,[2,14],{16:69,17:[1,70],18:[1,71],19:[1,72],20:[1,73],21:[1,74],22:[1,75]}),o($Vx,[2,21]),o($Vx,[2,23],{25:76,26:77,27:$Vy,28:$Vz}),o($VA,[2,29],{30:80,31:81,32:$VB,33:$VC,34:$VD}),o($VE,[2,36],{36:85,37:86,38:$VF}),o($VG,[2,41]),o($VG,[2,44],{43:16,46:17,47:18,84:19,48:20,50:21,87:22,88:23,76:24,77:25,51:26,52:27,89:28,90:29,91:30,53:39,65:54,66:55,67:56,68:57,69:58,41:88,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,70:$Vd,73:$Ve,74:$Vf,75:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs}),o($VG,[2,45],{43:16,46:17,47:18,84:19,48:20,50:21,87:22,88:23,76:24,77:25,51:26,52:27,89:28,90:29,91:30,53:39,65:54,66:55,67:56,68:57,69:58,41:89,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,70:$Vd,73:$Ve,74:$Vf,75:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs}),o($VG,[2,46]),o($VG,[2,48],{44:90,45:91,40:$VH,42:$VI}),o($VJ,[2,53]),o($VJ,[2,54]),o($VJ,[2,90],{49:94,85:$VK}),o($VJ,[2,57],{49:96,85:$VK}),o($VJ,[2,58],{49:97,85:$VK}),o($VL,[2,92]),o($VL,[2,93]),{53:98,64:$Vc,65:54,66:55,67:56,68:57,69:58,70:$Vd,73:$Ve,74:$Vf,75:$Vg},o($VL,[2,82]),o($VL,[2,59]),{53:99,64:$Vc,65:54,66:55,67:56,68:57,69:58,70:$Vd,73:$Ve,74:$Vf,75:$Vg},o($VL,[2,94]),o($VL,[2,95]),o($VL,[2,96]),o($VL,[2,104]),{56:[1,100]},{56:[1,101]},{56:[1,102]},{56:[1,103]},{56:[1,104]},o($VL,[2,88]),{32:[1,107],53:105,64:$Vc,65:54,66:55,67:56,68:57,69:58,70:$Vd,73:$Ve,74:$Vf,75:$Vg,92:[1,106]},o($VL,[2,62]),{56:[1,108]},{56:[1,109]},{56:[1,110]},{56:[1,111]},{56:[1,112]},{56:[1,113]},{56:[1,114]},{56:[1,115]},o($VL,[2,101]),o($VL,[2,102]),o($VL,[2,103]),o($VL,[2,99]),o($VL,[2,100]),o($VL,[2,71]),o($VL,[2,72]),o($VL,[2,73]),o($VL,[2,74]),o($VL,[2,75]),o($VL,[2,76]),{71:[1,116]},{71:[1,117]},{71:[1,118]},{71:[1,119]},{1:[2,1]},o($Vt,[2,4]),o($Vt,[2,7],{10:65,9:120,11:$Vu}),o($VE,$V0,{12:6,15:7,23:8,24:9,29:10,35:11,39:12,41:15,43:16,46:17,47:18,84:19,48:20,50:21,87:22,88:23,76:24,77:25,51:26,52:27,89:28,90:29,91:30,53:39,65:54,66:55,67:56,68:57,69:58,8:121,40:$V1,42:$V2,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,70:$Vd,73:$Ve,74:$Vf,75:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs}),o($Vv,[2,9],{14:[1,122]}),o($Vw,[2,12]),o([5,11,14,27,28,32,33,34,86],$V0,{23:8,24:9,29:10,35:11,39:12,41:15,43:16,46:17,47:18,84:19,48:20,50:21,87:22,88:23,76:24,77:25,51:26,52:27,89:28,90:29,91:30,53:39,65:54,66:55,67:56,68:57,69:58,15:123,40:$V1,42:$V2,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,70:$Vd,73:$Ve,74:$Vf,75:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs}),o($VM,[2,15]),o($VM,[2,16]),o($VM,[2,17]),o($VM,[2,18]),o($VM,[2,19]),o($VM,[2,20]),o($Vx,[2,22],{26:124,27:$Vy,28:$Vz}),o($VA,[2,25]),o($VE,$V0,{29:10,35:11,39:12,41:15,43:16,46:17,47:18,84:19,48:20,50:21,87:22,88:23,76:24,77:25,51:26,52:27,89:28,90:29,91:30,53:39,65:54,66:55,67:56,68:57,69:58,24:125,40:$V1,42:$V2,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,70:$Vd,73:$Ve,74:$Vf,75:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs}),o($VE,$V0,{29:10,35:11,39:12,41:15,43:16,46:17,47:18,84:19,48:20,50:21,87:22,88:23,76:24,77:25,51:26,52:27,89:28,90:29,91:30,53:39,65:54,66:55,67:56,68:57,69:58,24:126,40:$V1,42:$V2,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,70:$Vd,73:$Ve,74:$Vf,75:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs}),o($VA,[2,28],{31:127,32:$VB,33:$VC,34:$VD}),o($VE,[2,31]),o($VE,$V0,{35:11,39:12,41:15,43:16,46:17,47:18,84:19,48:20,50:21,87:22,88:23,76:24,77:25,51:26,52:27,89:28,90:29,91:30,53:39,65:54,66:55,67:56,68:57,69:58,29:128,40:$V1,42:$V2,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,70:$Vd,73:$Ve,74:$Vf,75:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs}),o($VE,$V0,{35:11,39:12,41:15,43:16,46:17,47:18,84:19,48:20,50:21,87:22,88:23,76:24,77:25,51:26,52:27,89:28,90:29,91:30,53:39,65:54,66:55,67:56,68:57,69:58,29:129,40:$V1,42:$V2,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,70:$Vd,73:$Ve,74:$Vf,75:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs}),o($VE,$V0,{35:11,39:12,41:15,43:16,46:17,47:18,84:19,48:20,50:21,87:22,88:23,76:24,77:25,51:26,52:27,89:28,90:29,91:30,53:39,65:54,66:55,67:56,68:57,69:58,29:130,40:$V1,42:$V2,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,70:$Vd,73:$Ve,74:$Vf,75:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs}),o($VE,[2,35],{37:131,38:$VF}),o($VG,[2,39]),{35:132,39:12,40:$V1,41:15,42:$V2,43:16,46:17,47:18,48:20,50:21,51:26,52:27,53:39,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:54,66:55,67:56,68:57,69:58,70:$Vd,73:$Ve,74:$Vf,75:$Vg,76:24,77:25,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:19,87:22,88:23,89:28,90:29,91:30,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},o($VG,[2,42]),o($VG,[2,43]),o($VG,[2,47],{45:133,40:$VH,42:$VI}),o($VJ,[2,50]),{43:134,46:17,47:18,48:20,50:21,51:26,52:27,53:39,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:54,66:55,67:56,68:57,69:58,70:$Vd,73:$Ve,74:$Vf,75:$Vg,76:24,77:25,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:19,87:22,88:23,89:28,90:29,91:30,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{43:135,46:17,47:18,48:20,50:21,51:26,52:27,53:39,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:54,66:55,67:56,68:57,69:58,70:$Vd,73:$Ve,74:$Vf,75:$Vg,76:24,77:25,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:19,87:22,88:23,89:28,90:29,91:30,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},o($VJ,[2,89]),o([11,14,17,18,19,20,21,22,27,28,32,33,34,86],$V0,{6:3,7:4,8:5,12:6,15:7,23:8,24:9,29:10,35:11,39:12,41:15,43:16,46:17,47:18,84:19,48:20,50:21,87:22,88:23,76:24,77:25,51:26,52:27,89:28,90:29,91:30,53:39,65:54,66:55,67:56,68:57,69:58,4:136,40:$V1,42:$V2,54:$V3,55:$V4,57:$V5,58:$V6,59:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,70:$Vd,73:$Ve,74:$Vf,75:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs}),o($VJ,[2,55]),o($VJ,[2,56]),o($VL,[2,81]),o($VL,[2,60]),o($VN,[2,83]),o($VN,[2,84]),o($VN,[2,85]),o($VN,[2,86]),o($VN,[2,87]),o($VL,[2,61]),o($VL,[2,97]),o($VL,[2,98]),o($VN,[2,63]),o($VN,[2,64]),o($VN,[2,65]),o($VN,[2,66]),o($VN,[2,67]),o($VN,[2,68]),o($VN,[2,69]),o($VN,[2,70]),{72:[1,137]},{72:[1,138]},{72:[1,139]},{72:[1,140]},o($Vt,[2,6]),o($Vv,[2,8]),o($Vw,[2,11]),o($Vw,[2,13]),o($VA,[2,24]),o($VA,[2,26]),o($VA,[2,27]),o($VE,[2,30]),o($VE,[2,32]),o($VE,[2,33]),o($VE,[2,34]),o($VG,[2,38]),o($VG,[2,40]),o($VJ,[2,49]),o($VJ,[2,51]),o($VJ,[2,52]),{86:[1,141]},o($VL,[2,77]),o($VL,[2,78]),o($VL,[2,79]),o($VL,[2,80]),o($VJ,[2,91])],
defaultActions: {63:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const Nodo= require('./Nodo');
    var arreglolexico = "Codigo:";

 
       
        
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 80;
break;
case 1:return 79;
break;
case 2:return 58;
break;
case 3:return 55;
break;
case 4:return 57;
break;
case 5:return 60;
break;
case 6:return 61;
break;
case 7:return 62;
break;
case 8:return 'namespace_node';
break;
case 9:return 78;
break;
case 10:return 82;
break;
case 11:return 81;
break;
case 12:return 59;
break;
case 13:return 'null';
break;
case 14:return 'true';
break;
case 15:return 'false';
break;
case 16:return 70;
break;
case 17:return 73;
break;
case 18:return 74;
break;
case 19:return 75;
break;
case 20:return 33;
break;
case 21:return 11;
break;
case 22:return 'and_';
break;
case 23:return 34;
break;
case 24:return 38;
break;
case 25:return 27;
break;
case 26:return 28;
break;
case 27:return 32;
break;
case 28:return 17;
break;
case 29:return 18;
break;
case 30:return 19;
break;
case 31:return 20;
break;
case 32:return 21;
break;
case 33:return 22;
break;
case 34:return 71;
break;
case 35:return 72;
break;
case 36:return 85;
break;
case 37:return 86;
break;
case 38:return 40; //Probar Esto
break;
case 39:return 42;
break;
case 40:return 83;
break;
case 41:return 97;
break;
case 42:return 54;
break;
case 43:return 56;
break;
case 44:/*skip comment */
break;
case 45:/* skip whitespace */
break;
case 46:return 93;
break;
case 47:return 94;
break;
case 48:return 92;
break;
case 49:return 95;
break;
case 50:return 96;
break;
case 51:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 52:return 5;
break;
}
},
rules: [/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:namespace-node\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:div\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\/\/)/,/^(?:\/)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:@)/,/^(?:::)/,/^(?:(\(:((\\([\'\"\\bfnrtv]))|([^\:)\\]+)):\)))/,/^(?:\s+)/,/^(?:((([0-9]+)\.[0-9]*)|(\.([0-9]+))))/,/^(?:([0-9]+))/,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑá-ü]*)/,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]+))*'))/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticadesc;
exports.Parser = gramaticadesc.Parser;
exports.parse = function () { return gramaticadesc.parse.apply(gramaticadesc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}