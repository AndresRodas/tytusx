/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaXML = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,7],$V2=[2,6,7],$V3=[1,12],$V4=[14,20],$V5=[1,18],$V6=[1,17],$V7=[2,14,17,20],$V8=[1,29],$V9=[1,30],$Va=[1,31],$Vb=[2,7],$Vc=[7,17,25,26];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"RECONOCIMIENTOUTF":4,"RAICES":5,"EOF":6,"lt":7,"interrogante":8,"xml":9,"version":10,"asig":11,"StringLiteral":12,"encoding":13,"gt":14,"RAIZ":15,"OBJETO":16,"identifier":17,"LATRIBUTOS":18,"OBJETOS":19,"div":20,"LISTA_ID_OBJETO":21,"ATRIBUTOS":22,"ATRIBUTO":23,"VALOR":24,"IntegerLiteral":25,"DoubleLiteral":26,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"lt",8:"interrogante",9:"xml",10:"version",11:"asig",12:"StringLiteral",13:"encoding",14:"gt",17:"identifier",20:"div",25:"IntegerLiteral",26:"DoubleLiteral"},
productions_: [0,[3,3],[4,11],[5,2],[5,1],[15,1],[16,9],[16,9],[16,5],[16,1],[18,1],[18,0],[22,2],[22,1],[23,3],[23,1],[21,2],[21,1],[24,1],[24,1],[24,1],[19,2],[19,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  
        $$[$0-1].forEach((element) => {$$[$0-2].push(element)}); 
        this.$ = $$[$0-2]; 
        reglasGramaticalesXML.push(new ReglaGramatical("START->RECONOCIMIENTOUTF RAICES EOF","RECONOCIMIENTOUTF.add(RAICES.val); START.val-> RECONOCIMIENTOUTF.val"));
        return this.$; 
break;
case 2:

        var temp = []; 
        var objeto = new Objeto('xmlEncoding', '', _$[$0-8].first_line, _$[$0-8].first_column, [new Atributo($$[$0-7],$$[$0-5],_$[$0-5].first_line,_$[$0-5].first_line),new Atributo($$[$0-4],$$[$0-2],_$[$0-5].first_line,_$[$0-5].first_column)], []); 
        temp.push(objeto);
        this.$ = temp;
        reglasGramaticalesXML.push(new ReglaGramatical("RECONOCIMIENTOUTF->lt interrogante xml version asig StringLiteral encoding asig StringLiteral interrogante gt","RECONOCIMIENTOUTF.val-> new Objeto('xmlEncoding', [new Atributo(StringLiteral1.val), new Atributo(StringLiteral2.val)]);"));
        
break;
case 3:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; reglasGramaticalesXML.push(new ReglaGramatical("RAICES->RAICES RAIZ","RAICES'.add(RAIZ.val); RAICES.val=RAICES'.val;"));
break;
case 4:
 this.$ = [$$[$0]]; reglasGramaticalesXML.push(new ReglaGramatical("RAICES->RAIZ","RAICES.val->RAIZ.val;"));
break;
case 5:
 this.$ = $$[$0]; reglasGramaticalesXML.push(new ReglaGramatical("RAIZ->OBJETO","RAIZ.val->OBJETO.val;"));
break;
case 6:
 this.$ = new Objeto($$[$0-7],'',_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6],$$[$0-4]); 
      reglasGramaticalesXML.push(new ReglaGramatical("OBJETO->lt identifier LATRIBUTOS gt OBJETOS lt div identifier gt","OBJETO.val-> new Objeto(identifier.val,LISTA_ID_OBJETO.val,LATRIBUTOS.val);"));
break;
case 7:
 this.$ = new Objeto($$[$0-7],$$[$0-4],_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6],[]); 
        reglasGramaticalesXML.push(new ReglaGramatical("OBJETO->lt identifier LATRIBUTOS gt LISTA_ID_OBJETO   lt div identifier gt","OBJETO.val-> new Objeto(identifier.val,LISTA_ID_OBJETO.val,LATRIBUTOS.val);"));
break;
case 8:
 this.$ = new Objeto($$[$0-3],'',_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2],[]); 
        reglasGramaticalesXML.push(new ReglaGramatical("OBJETO->lt identifier LATRIBUTOS div gt","OBJETO.val-> new Objeto(identifier.val,LATRIBUTOS.val);"));
break;
case 9: case 15:
 this.$ = []; console.log('error sintactico ' + yytext); erroresXML.push(new ErrorCapturado(TipoError.ERROR_SINTACTICO, yytext, 'Se esperaba token diferente',this._$.first_line, this._$.first_column));
break;
case 10:
 this.$ = $$[$0]; reglasGramaticalesXML.push(new ReglaGramatical("LATRIBUTOS->ATRIBUTOS","LATRIBUTOS.val->ATRIBUTOS.val;"));
break;
case 11:
 this.$ = []; reglasGramaticalesXML.push(new ReglaGramatical("LATRIBUTOS-> empty","LATRIBUTOS.val-> null;"));
break;
case 12:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; reglasGramaticalesXML.push(new ReglaGramatical("ATRIBUTOS->ATRIBUTOS ATRIBUTO","ATRIBUTOS'.add(ATRIBUTO.val); ATRIBUTOS.val->ATRIBUTOS'.val;"));
break;
case 13:
 this.$ = [$$[$0]]; reglasGramaticalesXML.push(new ReglaGramatical("ATRIBUTOS->ATRIBUTO","ATRIBUTOS.val->ATRIBUTO.val;"));
break;
case 14:
 this.$ = new Atributo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); reglasGramaticalesXML.push(new ReglaGramatical("ATRIBUTO->identifier asig StringLiteral","ATRIBUTO.val->new Atributo(identifier.val, StringLiteral.val)"));
break;
case 16:
 $$[$0-1]=$$[$0-1] + ' ' +$$[$0] ; this.$ = $$[$0-1]; reglasGramaticalesXML.push(new ReglaGramatical("LISTA_ID_OBJETO->LISTA_ID_OBJETO VALOR","LISTA_ID_OBJETO'.val = LISTA_ID_OBJETO'.val+' '+VALOR.val; LISTA_ID_OBJETO.val->LISTA_ID_OBJETO'.val;"));
break;
case 17:
 this.$ = $$[$0]; reglasGramaticalesXML.push(new ReglaGramatical("LISTA_ID_OBJETO->VALOR","LISTA_ID_OBJETO.val->VALOR.val;"));
break;
case 18:
this.$=$$[$0]; reglasGramaticalesXML.push(new ReglaGramatical("VALOR->identifier","VALOR.val->identifier.val;"));
break;
case 19:
this.$ = $$[$0]; reglasGramaticalesXML.push(new ReglaGramatical("VALOR -> IntegerLiteral","VALOR.val->IntegerLiteral.val;"));
break;
case 20:
this.$ = $$[$0]; reglasGramaticalesXML.push(new ReglaGramatical("VALOR -> DoubleLiteral","VALOR.val->DoubleLiteral.val;"));
break;
case 21:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; reglasGramaticalesXML.push(new ReglaGramatical("OBJETOS->OBJETOS OBJETO","OBJETOS'.add(OBJETO); OBJETOS.val->OBJETOS'.val;"));
break;
case 22:
 this.$ = [$$[$0]]; reglasGramaticalesXML.push(new ReglaGramatical("OBJETOS->OBJETO","OBJETOS.val->OBJETO.val;"));
break;
}
},
table: [{3:1,4:2,7:[1,3]},{1:[3]},{2:$V0,5:4,7:$V1,15:5,16:6},{8:[1,9]},{2:$V0,6:[1,10],7:$V1,15:11,16:6},o($V2,[2,4]),o($V2,[2,5]),{17:$V3},o($V2,[2,9]),{9:[1,13]},{1:[2,1]},o($V2,[2,3]),o($V4,[2,11],{18:14,22:15,23:16,2:$V5,17:$V6}),{10:[1,19]},{14:[1,20],20:[1,21]},o($V4,[2,10],{23:22,2:$V5,17:$V6}),o($V7,[2,13]),{11:[1,23]},o($V7,[2,15]),{11:[1,24]},{2:$V0,7:$V1,16:27,17:$V8,19:25,21:26,24:28,25:$V9,26:$Va},{14:[1,32]},o($V7,[2,12]),{12:[1,33]},{12:[1,34]},{2:$V0,7:[1,35],16:36},{7:[1,37],17:$V8,24:38,25:$V9,26:$Va},o($Vb,[2,22]),o($Vc,[2,17]),o($Vc,[2,18]),o($Vc,[2,19]),o($Vc,[2,20]),o($V2,[2,8]),o($V7,[2,14]),{13:[1,39]},{17:$V3,20:[1,40]},o($Vb,[2,21]),{20:[1,41]},o($Vc,[2,16]),{11:[1,42]},{17:[1,43]},{17:[1,44]},{12:[1,45]},{14:[1,46]},{14:[1,47]},{8:[1,48]},o($V2,[2,6]),o($V2,$Vb),{14:[1,49]},o($Vb,[2,2])],
defaultActions: {10:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('comment');
break;
case 1:this.popState();
break;
case 2:/* skip comment content*/
break;
case 3:/* skip whitespace */
break;
case 4:return 9;
break;
case 5:return 10;
break;
case 6:return 13;
break;
case 7:return 7;
break;
case 8:return 14;
break;
case 9:return 11;
break;
case 10:return 20;
break;
case 11:return 8;
break;
case 12:return 26;
break;
case 13:return 25;
break;
case 14:return 17;
break;
case 15:return 12
break;
case 16:return 'CharLiteral'
break;
case 17:
                                        erroresXML.push(new ErrorCapturado(TipoError.ERROR_LEXICO, yy_.yytext, 'Error lexico detectado',yy_.yylloc.first_line, yy_.yylloc.first_column));
                                    
break;
case 18:return 6
break;
}
},
rules: [/^(?:<!--)/,/^(?:-->)/,/^(?:.)/,/^(?:\s+)/,/^(?:xml\b)/,/^(?:version\b)/,/^(?:encoding\b)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\/)/,/^(?:\?)/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:((([a-zA-Z0-9_]|(['+'|'*'|'?'|'^'|'$'|'('|')'|'['|'\]'|'{'|'}'|'|'|'.'|'&'|'#'|'\''|'!'|':'|';'|'/'|'¿'|'¡'|','])|([[\u003F-\u0040]|[\u00A1-\u00AC]|[\u007B-\u007E]|[\u00AE-\uD7F0]|[\u0028-\u002F]|[\u005B-\u0060]|[\u003A-\u003B]|[\u0023-\u0025]|[\u0021])))([a-zA-Z0-9_]|(['+'|'*'|'?'|'^'|'$'|'('|')'|'['|'\]'|'{'|'}'|'|'|'.'|'&'|'#'|'\''|'!'|':'|';'|'/'|'¿'|'¡'|','])|([[\u003F-\u0040]|[\u00A1-\u00AC]|[\u007B-\u007E]|[\u00AE-\uD7F0]|[\u0028-\u002F]|[\u005B-\u0060]|[\u003A-\u003B]|[\u0023-\u0025]|[\u0021]))*))/,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+)|(['+'|'*'|'?'|'^'|'$'|'('|')'|'['|'\]'|'{'|'}'|'|'|'.'|'&'|'#'|'\''|'!'|':'|';'|'/'|'¿'|'¡'|',']))*"))/,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/,/^(?:.)/,/^(?:$)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"inclusive":true},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaXML;
exports.Parser = gramaticaXML.Parser;
exports.parse = function () { return gramaticaXML.parse.apply(gramaticaXML, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}