/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XpathAnalyzerDescendant = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,6],$V7=[1,7],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,21],$Vf=[1,22],$Vg=[1,23],$Vh=[1,24],$Vi=[1,25],$Vj=[1,26],$Vk=[1,27],$Vl=[5,13,16,28,33,34,35,36,37,38,39,40,41,42,43,44],$Vm=[2,4],$Vn=[1,30],$Vo=[5,8,13,16,28,33,34,35,36,37,38,39,40,41,42,43,44],$Vp=[2,8],$Vq=[2,5,8,13,16,23,25,28,33,34,35,36,37,38,39,40,41,42,43,44],$Vr=[1,51],$Vs=[1,80],$Vt=[1,86],$Vu=[1,92],$Vv=[1,93],$Vw=[1,89],$Vx=[1,90],$Vy=[1,91],$Vz=[1,125],$VA=[1,134],$VB=[1,135],$VC=[1,128],$VD=[1,129],$VE=[1,130],$VF=[1,131],$VG=[1,132],$VH=[1,133],$VI=[1,123],$VJ=[1,124],$VK=[1,126],$VL=[1,127],$VM=[13,16,28,33,34,35,36,37,38,39,40,41,42,43,44],$VN=[2,5,8,13,16,23,25,26,28,33,34,35,36,37,38,39,40,41,42,43,44],$VO=[16,28,33,34,35,36,37,38,39,40,41,42],$VP=[16,28,33,34,35,36,37,38,39,40];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"LISTA-XPATH":4,"EOF":5,"XPATH-EXPRESION":6,"LISTA-XPATH_P":7,"node_set":8,"EXPRESION":9,"XPATH_EXPRESION_P":10,"FIRST_EXPRESION":11,"identifier":12,"times":13,"node":14,"lparen":15,"rparen":16,"current_expresion":17,"atribute_expresion":18,"LISTA_PREDICATES":19,"AXES_NAME":20,"axe_connector":21,"text":22,"root_expresion":23,"parent_expresion":24,"any_expresion":25,"lcorchetes":26,"PREDICATE":27,"rcorchetes":28,"EXPRESION_NUMERICA":29,"EXPRESION_RELACIONAL":30,"EXPRESION_LOGICA":31,"PRIMITIVA":32,"or":33,"and":34,"lt":35,"lte":36,"gt":37,"gte":38,"equal":39,"nequal":40,"plus":41,"minus":42,"div":43,"mod":44,"ancestor-or-self":45,"ancestor":46,"attribute":47,"child":48,"descendant-or-self":49,"descendant":50,"following-sibling":51,"following":52,"namespace":53,"preceding-sibling":54,"preceding":55,"parent":56,"self":57,"FUNCION_NATIVA":58,"last":59,"position":60,"DoubleLiteral":61,"IntegerLiteral":62,"StringLiteral":63,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"node_set",12:"identifier",13:"times",14:"node",15:"lparen",16:"rparen",17:"current_expresion",18:"atribute_expresion",21:"axe_connector",22:"text",23:"root_expresion",24:"parent_expresion",25:"any_expresion",26:"lcorchetes",28:"rcorchetes",33:"or",34:"and",35:"lt",36:"lte",37:"gt",38:"gte",39:"equal",40:"nequal",41:"plus",42:"minus",43:"div",44:"mod",45:"ancestor-or-self",46:"ancestor",47:"attribute",48:"child",49:"descendant-or-self",50:"descendant",51:"following-sibling",52:"following",53:"namespace",54:"preceding-sibling",55:"preceding",56:"parent",57:"self",59:"last",60:"position",61:"DoubleLiteral",62:"IntegerLiteral",63:"StringLiteral"},
productions_: [0,[3,2],[4,2],[7,3],[7,0],[6,2],[6,2],[10,2],[10,0],[11,1],[11,1],[11,3],[11,1],[11,2],[11,2],[11,4],[11,3],[11,3],[11,5],[11,2],[11,4],[11,2],[11,3],[11,3],[11,5],[11,5],[11,4],[11,4],[11,6],[11,6],[9,2],[9,3],[9,3],[9,5],[9,2],[9,2],[9,2],[9,4],[9,4],[9,4],[9,6],[9,6],[9,4],[9,2],[9,3],[9,3],[9,5],[9,2],[9,2],[9,2],[9,4],[9,4],[9,4],[9,6],[9,6],[9,4],[9,3],[9,4],[9,4],[9,6],[9,3],[9,3],[9,3],[9,5],[9,5],[9,5],[9,7],[9,7],[9,5],[9,3],[9,4],[9,4],[9,6],[9,3],[9,3],[9,3],[9,5],[9,5],[9,5],[9,7],[9,7],[9,5],[9,1],[19,4],[19,3],[27,1],[27,1],[27,1],[27,1],[27,3],[31,3],[31,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[29,3],[29,3],[29,3],[29,3],[29,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[58,3],[58,3],[32,1],[32,1],[32,1],[32,1],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 ReporteGramatical.agregarProduccionXpath("S -> LISTA-XPATH EOF","S.NodoRaiz = new ListaXpath(LISTA_XPATH.LISTA);");
                          this.$ = new ListaXpathExpresion($$[$0-1], _$[$0-1].first_line,_$[$0-1].first_column); return this.$; 
break;
case 2:
 ReporteGramatical.agregarProduccionXpath("LISTA-XPATH  -> XPATH-EXPRESION LISTA-XPATH ","LISTA-XPATH.LISTA = [XPATH-EXPRESION];</br>LISTA-XPATH.CONCAT(LISTA-XPATH_P.LISTA);");
                                             this.$ = $$[$0];  this.$.unshift($$[$0-1]);
                                           
break;
case 3:
 ReporteGramatical.agregarProduccionXpath("LISTA-XPATH_P  -> node_set XPATH-EXPRESION LISTA-XPATH_P ","LISTA-XPATH_P.LISTA = [XPATH-EXPRESION];</br>LISTA-XPATH_P.CONCAT(LISTA-XPATH_P.LISTA);");
                                                         this.$ = $$[$0-1]; this.$.unshift($$[$0-2]); 
break;
case 4:
 ReporteGramatical.agregarProduccionXpath("LISTA-XPATH_P -> epsilon","LISTA-XPATH_P.LISTA = [];");
                 this.$ = [];
break;
case 5:
 ReporteGramatical.agregarProduccionXpath("XPATH -> EXPRESION XPATH_P","XPATH.LISTA.ADD(EXPRESION); XPATH_P.LISTA = XPATH.LISTA;");
                                                 this.$ = $$[$0];
                                                 if($$[$0-1] instanceof NodoError)
                                                   this.$.unshift($$[$0-1]); 
break;
case 6:
 ReporteGramatical.agregarProduccionXpath("XPATH -> EXPRESION XPATH_P","XPATH.LISTA.ADD(EXPRESION); XPATH_P.LISTA = XPATH.LISTA;");
                                                      this.$ = $$[$0];
                                                      if($$[$0-1] instanceof NodoError)
                                                        this.$.unshift($$[$0-1]); 
break;
case 7:
 ReporteGramatical.agregarProduccionXpath("XPATH_P -> EXPRESION XPATH_P","XPATH_P.LISTA.ADD( XPATH );</br>XPATH_P1.LISTA = XPATH_P.LISTA;");
                                                   this.$ = $$[$0];
                                                   if($$[$0-1] instanceof NodoError)
                                                        this.$.unshift($$[$0-1]); 
break;
case 8:
  ReporteGramatical.agregarProduccionXpath("XPATH_P -> epsilon","XPATH_P.LISTA = [];");
                                           this.$ = []; 
break;
case 9:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> id","EXPRESION = NodoXpath(id);");
                                this.$ = new RootIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 10:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> *","EXPRESION = NodoXpath('*');");
                            this.$ = new RootTimes([],_$[$0].first_line,_$[$0].first_column); 
break;
case 11:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> node()","EXPRESION = NodoXpath('node');");
                                         this.$ = new RootNode([],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 12:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> .","EXPRESION = NodoXpath('.');");
                                                    this.$ = new RootCurrent([],_$[$0].first_line,_$[$0].first_column); 
break;
case 13:
  ReporteGramatical.agregarProduccionXpath("EXPREISON -> @ id","EXPREISON = new Atributo(id);");
                                                   this.$ = new RootAtributeIdentifier($$[$0],[],_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 14:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> @ *","EXPRESION = new Atributo(times);");
                                               this.$ = new RootAtributeTimes([],_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 15:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> _$[$0-2]()","EXPRESION = new Atributo(nodo);");
                                                           this.$ = new RootAtributeTimes([],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 16:
  ReporteGramatical.agregarProduccionXpath("EXPREISON -> @ id","EXPREISON = new Atributo(id);");
                                                                      this.$ = new RootAtributeIdentifier($$[$0-1],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 17:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> @ *","EXPRESION = new Atributo(times);");
                                                                  this.$ = new RootAtributeTimes($$[$0],_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 18:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> _$[$0-3]()","EXPRESION = new Atributo(nodo);");
                                                                              this.$ = new RootAtributeTimes($$[$0],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 19:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> id LISTA_PREDICADOS","EXPRESION = NodoXpath(id, LISTA_PREDICADOS);");
                                                  this.$ = new RootIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 20:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> node LISTA_PREDICADOS","EXPRESION = NodoXpath('node', LISTA_PREDICADOS);");
                                                          this.$ = new RootNode($$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 21:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> * LISTA_PREDICADOS","EXPRESION = NodoXpath('*', LISTA_PREDICADOS);");
                                             this.$ = new RootTimes($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 22:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: id","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-2]]+"', "+$$[$0]+" );");
                                                              this.$ = AxeFabric.createAxeExpresion($$[$0-2],AxeOperation.identifier, $$[$0],[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                            
break;
case 23:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: *","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-2]]+"', * );");
                                                         this.$ = AxeFabric.createAxeExpresion($$[$0-2],AxeOperation.times, "",[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                       
break;
case 24:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: node()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-4]]+"', node() );");
                                                                 this.$ = AxeFabric.createAxeExpresion($$[$0-4],AxeOperation.node, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                               
break;
case 25:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: text()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-4]]+"', text() );");
                                                                 this.$ = AxeFabric.createAxeExpresion($$[$0-4],AxeOperation.text, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                               
break;
case 26:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: id LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-3]]+"', "+$$[$0-1]+", LISTA_PREDICADOS );");
                                                                          this.$ = AxeFabric.createAxeExpresion($$[$0-3],AxeOperation.identifier, $$[$0-1],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                        
break;
case 27:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: * LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-3]]+"', * , LISTA_PREDICADOS);");
                                                                     this.$ = AxeFabric.createAxeExpresion($$[$0-3],AxeOperation.times, "",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                   
break;
case 28:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: node() LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-5]]+"', node(), LISTA_PREDICADOS );");
                                                                                  this.$ = AxeFabric.createAxeExpresion($$[$0-5],AxeOperation.node, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                
break;
case 29:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: text() LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-5]]+"', text(), LISTA_PREDICADOS );");
                                                                                  this.$ = AxeFabric.createAxeExpresion($$[$0-5],AxeOperation.text, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                
break;
case 30:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /id","EXPRESION = NodoXpath('/',id);");
                                        this.$ = new RootIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 31:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /@id","EXPRESION = NodoXpath('/@',id);");
                                                            this.$ = new RootAtributeIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 32:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> @ *","EXPRESION = new Atributo(times);");
                                                         this.$ = new RootAtributeTimes([],_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 33:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> _$[$0-2]()","EXPRESION = new Atributo(nodo);");
                                                                     this.$ = new RootAtributeTimes([],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 34:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /.","EXPRESION = NodoXpath('/.');");
                                                this.$ = new RootCurrent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 35:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /..","EXPRESION = NodoXpath('/..');");
                                                this.$ = new RootParent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 36:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /*","EXPRESION = NodoXpath('/*');");
                                    this.$ = new RootTimes([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 37:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /node()","EXPRESION = NodoXpath('/node');");
                                                this.$ = new RootNode([],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 38:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: id","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-2]]+"', "+$$[$0]+" );");
                                                                this.$ = AxeFabric.createAxeExpresion($$[$0-2],AxeOperation.identifier, $$[$0],[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                              
break;
case 39:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: *","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-2]]+"', * );");
                                                           this.$ = AxeFabric.createAxeExpresion($$[$0-2],AxeOperation.times, "",[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                         
break;
case 40:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: node()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-4]]+"', node() );");
                                                                        this.$ = AxeFabric.createAxeExpresion($$[$0-4],AxeOperation.node, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 41:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: text()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-4]]+"', text() );");
                                                                        this.$ = AxeFabric.createAxeExpresion($$[$0-4],AxeOperation.text, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 42:
 ReporteGramatical.agregarProduccionXpath("Expresion -> /text()","Expresion = new TextExpresion();");
                                 this.$ = new RootText([], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 43:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //id","EXPRESION = NodoXpath('//',id);");
                                        this.$ = new AnyIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 44:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@id","EXPRESION = NodoXpath('//@',id);");
                                                            this.$ = new AnyAtributeIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 45:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@ *","EXPRESION = new Atributo(/times);");
                                                       this.$ = new AnyAtributeTimes([],_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 46:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //_$[$0-2]()","EXPRESION = new Atributo(//nodo);");
                                                                   this.$ = new AnyAtributeTimes([],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 47:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //.","EXPRESION = NodoXpath('//.');");
                                                this.$ = new AnyCurrent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 48:
    ReporteGramatical.agregarProduccionXpath("EXPRESION -> //..","EXPRESION = NodoXpath('//..');");
                                                this.$ = new AnyParent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 49:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //*","EXPRESION = NodoXpath('//*');");
                                    this.$ = new AnyTimes([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 50:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //node()","EXPRESION = NodoXpath('//node');");
                                                this.$ = new AnyNode([],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 51:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: id","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-2]]+"', "+$$[$0]+" );");
                                                                this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-2],AxeOperation.identifier, $$[$0],[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                              
break;
case 52:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: *","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-2]]+"', * );");
                                                           this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-2],AxeOperation.times, "",[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                         
break;
case 53:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: node()","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-4]]+"', node() );");
                                                                        this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-4],AxeOperation.node, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 54:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: text()","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-4]]+"', text() );");
                                                                        this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-4],AxeOperation.text, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 55:
 ReporteGramatical.agregarProduccionXpath("Expresion -> //text()","Expresion = new AnyTextExpresion();");
                                               this.$ = new AnyText([], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 56:
    ReporteGramatical.agregarProduccionXpath("EXPRESION -> /id LISTA_PREDICADOS","EXPRESION = NodoXpath('/',id, LISTA_PREDICADOS);");
                                                            this.$ = new RootIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 57:
  ReporteGramatical.agregarProduccionXpath("EXPREISON -> /@ id","EXPREISON = new Atributo(/id);");
                                                                          this.$ = new RootAtributeIdentifier($$[$0-1],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 58:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> @ *","EXPRESION = new Atributo(times);");
                                                                      this.$ = new RootAtributeTimes($$[$0],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 59:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> /_$[$0-3]()","EXPRESION = new Atributo(/nodo);");
                                                                                   this.$ = new RootAtributeTimes($$[$0],_$[$0-5].first_line, _$[$0-5].first_column ); 
break;
case 60:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> '/.' LISTA_PREDICADOS","EXPRESION = NodoXpath('/.',LISTA_PREDICADOS);");
                                                                this.$ = new RootCurrent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 61:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> '/..' LISTA_PREDICADOS","EXPRESION = NodoXpath('/..',LISTA_PREDICADOS);");
                                                                this.$ = new RootParent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 62:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /* LISTA_PREDICADOS","EXPRESION = NodoXpath('/*',LISTA_PREDICADOS);");
                                                    this.$ = new RootTimes($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 63:
    ReporteGramatical.agregarProduccionXpath("EXPRESION -> '/node()' LISTA_PREDICADOS","EXPRESION = NodoXpath('/node',LISTA_PREDICADOS);");
                                                                    this.$ = new RootNode($$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 64:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: id LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-3]]+"', "+$$[$0-1]+", LISTA_PREDICADOS );");
                                                                                 this.$ = AxeFabric.createAxeExpresion($$[$0-3],AxeOperation.identifier, $$[$0-1],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                               
break;
case 65:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: * LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-3]]+"', * , LISTA_PREDICADOS);");
                                                                            this.$ = AxeFabric.createAxeExpresion($$[$0-3],AxeOperation.times, "",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                          
break;
case 66:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: node()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-5]]+"', node(), LISTA_PREDICADOS );");
                                                                                         this.$ = AxeFabric.createAxeExpresion($$[$0-5],AxeOperation.node, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                       
break;
case 67:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: text()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-5]]+"', text(), LISTA_PREDICADOS );");
                                                                                         this.$ = AxeFabric.createAxeExpresion($$[$0-5],AxeOperation.text, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                        
break;
case 68:
 ReporteGramatical.agregarProduccionXpath("Expresion -> /text()","Expresion = new TextExpresion();");
                                                                 this.$ = new RootText($$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 69:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //id LISTA_PREDICADOS","EXPRESION = NodoXpath('//',id, LISTA_PREDICADOS);");
                                                        this.$ = new AnyIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 70:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@id LISTA_PREDICADOS","EXPRESION = NodoXpath('//@',id,LISTA_PREDICADOS);");
                                                                            this.$ = new AnyAtributeIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 71:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@ * LISTA_PREDICADOS","EXPRESION = new Atributo(//times,LISTA_PREDICADOS);");
                                                                         this.$ = new AnyAtributeTimes($$[$0],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 72:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //_$[$0-3]() LISTA_PREDICADOS","EXPRESION = new Atributo(//nodo,LISTA_PREDICADOS);");
                                                                                     this.$ = new AnyAtributeTimes($$[$0],_$[$0-5].first_line, _$[$0-5].first_column ); 
break;
case 73:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> '//.' LISTA_PREDICADOS","EXPRESION = NodoXpath('//.',LISTA_PREDICADOS);");
                                                                this.$ = new AnyCurrent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 74:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> '//..' LISTA_PREDICADOS","EXPRESION = NodoXpath('//..',LISTA_PREDICADOS);");
                                                                this.$ = new AnyParent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 75:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //* LISTA_PREDICADOS","EXPRESION = NodoXpath('//*',LISTA_PREDICADOS);");
                                                    this.$ = new AnyTimes($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 76:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //node() LISTA_PREDICADOS","EXPRESION = NodoXpath('//node',LISTA_PREDICADOS);");
                                                                this.$ = new AnyNode($$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 77:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: id LISTA_PREDICADOS","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-3]]+"', "+$$[$0-1]+", LISTA_PREDICADOS );");
                                                                                this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-3],AxeOperation.identifier, $$[$0-1],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                              
break;
case 78:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: * LISTA_PREDICADOS","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-3]]+"', * , LISTA_PREDICADOS);");
                                                                           this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-3],AxeOperation.times, "",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                         
break;
case 79:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: node()","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-5]]+"', node(), LISTA_PREDICADOS );");
                                                                                        this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-5],AxeOperation.node, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                      
break;
case 80:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: text()","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-5]]+"', text(), LISTA_PREDICADOS );");
                                                                                        this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-5],AxeOperation.text, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                       
break;
case 81:
 ReporteGramatical.agregarProduccionXpath("Expresion -> //text()","Expresion = new AnyTextExpresion();");
                                                               this.$ = new AnyText($$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 82:

              ReporteGramatical.agregarProduccionXpath("EXPRESION -> error","ListaErrores.agregar(error)");
              ListaErrores.AgregarErrorXPATH(new TokenError(TipoError.Sintactico,"No se esperaba: "+yytext+".",_$[$0].first_line,_$[$0].first_column));
              this.$ = new NodoError(_$[$0].first_line,_$[$0].first_column);
          
break;
case 83:
 ReporteGramatical.agregarProduccionXpath("LISTA_PREDICADOS -> LISTA_PREDICADOS [ PREDICADO ]","LISTA_PREDICADOS1.LISTA.ADD(PREDICADO); </br>LISTA_PREDICADOS.LISTA = LISTA_PREDICADOS1.LISTA;");
                                                                     $$[$0-3].push($$[$0-1]); this.$ = $$[$0-3]; 
break;
case 84:
 ReporteGramatical.agregarProduccionXpath("LISTA_PREDICADOS -> [ PREDICADO ]","LISTA_PREDICADOS.LISTA = []; </br>LISTA_PREDICADOS.LISTA.ADD(PREDICADO);");
                                                    this.$ = [$$[$0-1]];
                                                  
break;
case 85:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> EXPRESION_NUMERICA","PREDICADO = EXPRESION_NUMERICA;");
                                 this.$ = $$[$0]; 
break;
case 86:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> EXPRESION_RELACIONAL","PREDICADO = EXPRESION_RELACIONAL;");
                                   this.$ = $$[$0]; 
break;
case 87:
  ReporteGramatical.agregarProduccionXpath("PREDICADO -> EXPRESION_LOGICA","PREDICADO = EXPRESION_LOGICA;");
                                this.$ = $$[$0]; 
break;
case 88:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> PRIMITIVA","PREDICADO = PRIMITIVA;");
                        this.$ = $$[$0]; 
break;
case 89:
   ReporteGramatical.agregarProduccionXpath("PREDICADO -> ( PREDICADO )","PREDICADO = PREDICADO1;");
                                        this.$ = $$[$0-1]; 
break;
case 90:
  ReporteGramatical.agregarProduccionXpath("PREDICADO -> PREDICADO or PREDICADO","PREDICADO = new OrLogica(PREDICADO1,PREDICADO2);");
                                            this.$ = new OrLogica($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 91:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> PREDICADO or PREDICADO","PREDICADO = new AndLogica(PREDICADO1,PREDICADO2);");
                                            this.$ = new AndLogica($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 92:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO < PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'<');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.lessThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 93:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO <= PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'<=');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.lessOrEqualThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 94:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO > PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'>');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.greaterThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 95:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO >= PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'>=');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.greaterOrEqualThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 96:
   ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO = PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'=');");
                                                    this.$ = new Comparison($$[$0-2],$$[$0],RelationalOperators.equal,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 97:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO != PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'!=');");
                                                    this.$ = new Comparison($$[$0-2],$$[$0],RelationalOperators.notEqual,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 98:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO + PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'+');");
                                                this.$ = new Suma($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 99:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO - PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'-');");
                                                this.$ = new Resta($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 100:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO * PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'*');");
                                                this.$ = new Multiplicacion($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 101:
   ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO div PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'/');");
                                                this.$ = new Division($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 102:
   ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO mod PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'%');");
                                                this.$ = new Modulo($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 103:
 this.$ = AxeType.ancestoOrSelfType; 
break;
case 104:
 this.$ = AxeType.ancestorType; 
break;
case 105:
 this.$ = AxeType.attributeType; 
break;
case 106:
 this.$ = AxeType.childType; 
break;
case 107:
 this.$ = AxeType.descendantOrSelfType; 
break;
case 108:
 this.$ = AxeType.descendantType; 
break;
case 109:
 this.$ = AxeType.followingSiblingType; 
break;
case 110:
 this.$ = AxeType.followingType; 
break;
case 111:
 this.$ = AxeType.namespaceType; 
break;
case 112:
 this.$ = AxeType.precedingSiblingType; 
break;
case 113:
 this.$ = AxeType.precedingType; 
break;
case 114:
 this.$ = AxeType.parentType; 
break;
case 115:
 this.$ = AxeType.selfType; 
break;
case 116:
 ReporteGramatical.agregarProduccionXpath("FUNCION_NATIVA -> last()","FUNCION_NATIVA = new FuncionNativa('last');");
                                     this.$ = new NativeFunctionExpresion(NativeFunction.last, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 117:
    ReporteGramatical.agregarProduccionXpath("FUNCION_NATIVA -> position()","FUNCION_NATIVA = new FuncionNativa('position');");
                                            this.$ = new NativeFunctionExpresion(NativeFunction.position, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 118:
 ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> LISTA-XPATH","PRIMITIVA = new ListaXpath( LISTA-XPATH );");
                         this.$ = new ListaXpathExpresion($$[$0], _$[$0].first_line,_$[$0].first_column); 
break;
case 119:
 ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> FUNCION_NATIVA-XPATH","PRIMITIVA = FUNCION_NATIVA;");
                            this.$ = $$[$0]; 
break;
case 120:
  ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> decimal","PRIMITIVA = new PRIMITIVA(Tipo.Decimal,decimal);");
                            this.$ = new Primitive(Number($$[$0]), new Tipo(TipoDato.numero),_$[$0].first_line, _$[$0].first_column ); 
break;
case 121:
 ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> entero","PRIMITIVA = new PRIMITIVA(Tipo.entero,entero);");
                            this.$ = new Primitive(Number($$[$0]), new Tipo(TipoDato.numero),_$[$0].first_line, _$[$0].first_column ); 
break;
case 122:
  ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> cadena","PRIMITIVA = new PRIMITIVA(Tipo.cadena,cadena);");
                            this.$ = new Primitive($$[$0].substr(1,$$[$0].length-2), new Tipo(TipoDato.cadena),_$[$0].first_line, _$[$0].first_column ); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,17:$V4,18:$V5,20:14,23:$V6,25:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{1:[3]},{5:[1,28]},o($Vl,$Vm,{7:29,8:$Vn}),o($Vo,$Vp,{10:31,9:32,2:$V0,23:$V6,25:$V7}),o($Vo,$Vp,{9:32,10:33,2:$V0,23:$V6,25:$V7}),{12:[1,34],13:[1,38],14:[1,39],17:[1,36],18:[1,35],20:40,22:[1,41],24:[1,37],45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{12:[1,42],13:[1,46],14:[1,47],17:[1,44],18:[1,43],20:48,22:[1,49],24:[1,45],45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},o($Vq,[2,82]),o($Vq,[2,9],{19:50,26:$Vr}),o($Vq,[2,10],{19:52,26:$Vr}),{15:[1,53]},o($Vq,[2,12]),{12:[1,54],13:[1,55],14:[1,56]},{21:[1,57]},{21:[2,103]},{21:[2,104]},{21:[2,105]},{21:[2,106]},{21:[2,107]},{21:[2,108]},{21:[2,109]},{21:[2,110]},{21:[2,111]},{21:[2,112]},{21:[2,113]},{21:[2,114]},{21:[2,115]},{1:[2,1]},o($Vl,[2,2]),{2:$V0,6:58,9:4,11:5,12:$V1,13:$V2,14:$V3,17:$V4,18:$V5,20:14,23:$V6,25:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},o($Vo,[2,5]),o($Vo,$Vp,{9:32,10:59,2:$V0,23:$V6,25:$V7}),o($Vo,[2,6]),o($Vq,[2,30],{19:60,26:$Vr}),{12:[1,61],13:[1,62],14:[1,63]},o($Vq,[2,34],{19:64,26:$Vr}),o($Vq,[2,35],{19:65,26:$Vr}),o($Vq,[2,36],{19:66,26:$Vr}),{15:[1,67]},{21:[1,68]},{15:[1,69]},o($Vq,[2,43],{19:70,26:$Vr}),{12:[1,71],13:[1,72],14:[1,73]},o($Vq,[2,47],{19:74,26:$Vr}),o($Vq,[2,48],{19:75,26:$Vr}),o($Vq,[2,49],{19:76,26:$Vr}),{15:[1,77]},{21:[1,78]},{15:[1,79]},o($Vq,[2,19],{26:$Vs}),{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:81,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},o($Vq,[2,21],{26:$Vs}),{16:[1,94]},o($Vq,[2,13],{19:95,26:$Vr}),o($Vq,[2,14],{19:96,26:$Vr}),{15:[1,97]},{12:[1,98],13:[1,99],14:[1,100],22:[1,101]},o($Vl,$Vm,{7:102,8:$Vn}),o($Vo,[2,7]),o($Vq,[2,56],{26:$Vs}),o($Vq,[2,31],{19:103,26:$Vr}),o($Vq,[2,32],{19:104,26:$Vr}),{15:[1,105]},o($Vq,[2,60],{26:$Vs}),o($Vq,[2,61],{26:$Vs}),o($Vq,[2,62],{26:$Vs}),{16:[1,106]},{12:[1,107],13:[1,108],14:[1,109],22:[1,110]},{16:[1,111]},o($Vq,[2,69],{26:$Vs}),o($Vq,[2,44],{19:112,26:$Vr}),o($Vq,[2,45],{19:113,26:$Vr}),{15:[1,114]},o($Vq,[2,73],{26:$Vs}),o($Vq,[2,74],{26:$Vs}),o($Vq,[2,75],{26:$Vs}),{16:[1,115]},{12:[1,116],13:[1,117],14:[1,118],22:[1,119]},{16:[1,120]},{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:121,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{13:$Vz,28:[1,122],33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL},o($VM,[2,85]),o($VM,[2,86]),o($VM,[2,87]),o($VM,[2,88]),{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:136,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},o($VM,[2,118]),o($VM,[2,119]),o($VM,[2,120]),o($VM,[2,121]),o($VM,[2,122]),{15:[1,137]},{15:[1,138]},o($Vq,[2,11],{19:139,26:$Vr}),o($Vq,[2,16],{26:$Vs}),o($Vq,[2,17],{26:$Vs}),{16:[1,140]},o($Vq,[2,22],{19:141,26:$Vr}),o($Vq,[2,23],{19:142,26:$Vr}),{15:[1,143]},{15:[1,144]},o($Vl,[2,3]),o($Vq,[2,57],{26:$Vs}),o($Vq,[2,58],{26:$Vs}),{16:[1,145]},o($Vq,[2,37],{19:146,26:$Vr}),o($Vq,[2,38],{19:147,26:$Vr}),o($Vq,[2,39],{19:148,26:$Vr}),{15:[1,149]},{15:[1,150]},o($Vq,[2,42],{19:151,26:$Vr}),o($Vq,[2,70],{26:$Vs}),o($Vq,[2,71],{26:$Vs}),{16:[1,152]},o($Vq,[2,50],{19:153,26:$Vr}),o($Vq,[2,51],{19:154,26:$Vr}),o($Vq,[2,52],{19:155,26:$Vr}),{15:[1,156]},{15:[1,157]},o($Vq,[2,55],{19:158,26:$Vr}),{13:$Vz,28:[1,159],33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL},o($VN,[2,84]),{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:160,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:161,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:162,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:163,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:164,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:165,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:166,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:167,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:168,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:169,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:170,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:171,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{2:$V0,4:87,6:3,9:4,11:5,12:$V1,13:$V2,14:$V3,15:$Vt,17:$V4,18:$V5,20:14,23:$V6,25:$V7,27:172,29:82,30:83,31:84,32:85,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:88,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{13:$Vz,16:[1,173],33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL},{16:[1,174]},{16:[1,175]},o($Vq,[2,20],{26:$Vs}),o($Vq,[2,15],{19:176,26:$Vr}),o($Vq,[2,26],{26:$Vs}),o($Vq,[2,27],{26:$Vs}),{16:[1,177]},{16:[1,178]},o($Vq,[2,33],{19:179,26:$Vr}),o($Vq,[2,63],{26:$Vs}),o($Vq,[2,64],{26:$Vs}),o($Vq,[2,65],{26:$Vs}),{16:[1,180]},{16:[1,181]},o($Vq,[2,68],{26:$Vs}),o($Vq,[2,46],{19:182,26:$Vr}),o($Vq,[2,76],{26:$Vs}),o($Vq,[2,77],{26:$Vs}),o($Vq,[2,78],{26:$Vs}),{16:[1,183]},{16:[1,184]},o($Vq,[2,81],{26:$Vs}),o($VN,[2,83]),o($VO,[2,98],{13:$Vz,43:$VK,44:$VL}),o($VO,[2,99],{13:$Vz,43:$VK,44:$VL}),o($VM,[2,100]),o($VM,[2,101]),o($VM,[2,102]),o($VP,[2,92],{13:$Vz,41:$VI,42:$VJ,43:$VK,44:$VL}),o($VP,[2,93],{13:$Vz,41:$VI,42:$VJ,43:$VK,44:$VL}),o($VP,[2,94],{13:$Vz,41:$VI,42:$VJ,43:$VK,44:$VL}),o($VP,[2,95],{13:$Vz,41:$VI,42:$VJ,43:$VK,44:$VL}),o($VP,[2,96],{13:$Vz,41:$VI,42:$VJ,43:$VK,44:$VL}),o($VP,[2,97],{13:$Vz,41:$VI,42:$VJ,43:$VK,44:$VL}),o([16,28,33],[2,90],{13:$Vz,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL}),o([16,28,33,34],[2,91],{13:$Vz,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL}),o($VM,[2,89]),o($VM,[2,116]),o($VM,[2,117]),o($Vq,[2,18],{26:$Vs}),o($Vq,[2,24],{19:185,26:$Vr}),o($Vq,[2,25],{19:186,26:$Vr}),o($Vq,[2,59],{26:$Vs}),o($Vq,[2,40],{19:187,26:$Vr}),o($Vq,[2,41],{19:188,26:$Vr}),o($Vq,[2,72],{26:$Vs}),o($Vq,[2,53],{19:189,26:$Vr}),o($Vq,[2,54],{19:190,26:$Vr}),o($Vq,[2,28],{26:$Vs}),o($Vq,[2,29],{26:$Vs}),o($Vq,[2,66],{26:$Vs}),o($Vq,[2,67],{26:$Vs}),o($Vq,[2,79],{26:$Vs}),o($Vq,[2,80],{26:$Vs})],
defaultActions: {15:[2,103],16:[2,104],17:[2,105],18:[2,106],19:[2,107],20:[2,108],21:[2,109],22:[2,110],23:[2,111],24:[2,112],25:[2,113],26:[2,114],27:[2,115],28:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const {Print} = require("../Instrucciones/Primitivas/Print");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 14;
break;
case 2:return 59;
break;
case 3:return 60;
break;
case 4:return 22;
break;
case 5:return 45;
break;
case 6:return 46;
break;
case 7:return 47;
break;
case 8:return 48;
break;
case 9:return 49;
break;
case 10:return 50;
break;
case 11:return 51;
break;
case 12:return 52;
break;
case 13:return 53;
break;
case 14:return 54;
break;
case 15:return 56;
break;
case 16:return 55;
break;
case 17:return 57;
break;
case 18:return 21;
break;
case 19:return 25;
break;
case 20:return 23;
break;
case 21:return 24;
break;
case 22:return 17;
break;
case 23:return 18;
break;
case 24:return 41;
break;
case 25:return 42;
break;
case 26:return 13;
break;
case 27:return 43;
break;
case 28:return 44;
break;
case 29:return 36;
break;
case 30:return 38;
break;
case 31:return 35;
break;
case 32:return 37;
break;
case 33:return 40;
break;
case 34:return 39;
break;
case 35:return 34;
break;
case 36:return 33;
break;
case 37:return 15;
break;
case 38:return 16;
break;
case 39:return 26;
break;
case 40:return 28;
break;
case 41:return 8;
break;
case 42:return 61;
break;
case 43:return 62;
break;
case 44:return 12;
break;
case 45:return 63;
break;
case 46:return 63;
break;
case 47:return 63;
break;
case 48:return 63;
break;
case 49:return 63;
break;
case 50:
                                        ListaErrores.AgregarErrorXPATH(new TokenError(TipoError.Lexico,"No se reconocio el token "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));
                                    
break;
case 51:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:node\b)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:text\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:preceding-sibling\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:::)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:@)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z][a-zA-Z0-9_ñÑ]*)/i,/^(?:“[^\"\n]*”)/i,/^(?:"[^\"\n]*")/i,/^(?:'[^''\n]*')/i,/^(?:‘[^''\n]*’)/i,/^(?:`[^''\n]*`)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XpathAnalyzerDescendant;
exports.Parser = XpathAnalyzerDescendant.Parser;
exports.parse = function () { return XpathAnalyzerDescendant.parse.apply(XpathAnalyzerDescendant, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}