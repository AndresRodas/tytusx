/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XpathAsc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[1,31],$V4=[1,32],$V5=[1,33],$V6=[1,34],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,16],$Vc=[1,17],$Vd=[1,18],$Ve=[1,19],$Vf=[1,20],$Vg=[1,21],$Vh=[1,22],$Vi=[1,23],$Vj=[1,24],$Vk=[1,25],$Vl=[1,26],$Vm=[1,27],$Vn=[1,28],$Vo=[1,29],$Vp=[1,30],$Vq=[2,4],$Vr=[1,38],$Vs=[2,5,8,13,15,16,18,19,20,21,23,24,25,26,27,28,29,34,35,36,37,38,39,40,41,42,43,44],$Vt=[21,23,24,25,26,27,28,29,34,35,36,37,38,39,40,41,42,43,44],$Vu=[2,5,8,13,15,16,18,19,20,21,23,24,25,26,27,28,29,32,34,35,36,37,38,39,40,41,42,43,44,46,49,51,53,54,55,56,58,59,60,61,62,64],$Vv=[2,32],$Vw=[1,44],$Vx=[2,22],$Vy=[1,85],$Vz=[1,74],$VA=[1,75],$VB=[1,86],$VC=[1,76],$VD=[1,77],$VE=[1,87],$VF=[1,78],$VG=[1,79],$VH=[1,80],$VI=[1,81],$VJ=[1,82],$VK=[1,84],$VL=[32,49,51],$VM=[1,101],$VN=[1,100],$VO=[1,99],$VP=[1,102],$VQ=[1,103],$VR=[23,32,46,49,51,53,54,55,56,58,59,60,61,62,64],$VS=[1,117],$VT=[1,118],$VU=[32,46,49,51,53,54,55,56,58,59,60,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_XPATH":4,"EOF":5,"SETS":6,"OTRO_SET":7,"tk_barra":8,"SET":9,"SELECTORES":10,"EXPRESION":11,"AXES":12,"tk_dobleslash":13,"OTRO_SELECTOR":14,"tk_slash":15,"tk_dpds":16,"AGREGAR_SELECTOR":17,"tk_pds":18,"tk_dps":19,"tk_ps":20,"tk_identificador":21,"PREDICADO":22,"tk_asterisco":23,"tk_punto":24,"tk_doblepunto":25,"tk_arrobaasterisco":26,"tk_arroba":27,"tk_texto":28,"tk_node":29,"tk_corchetea":30,"EXPRESION_FILTRO":31,"tk_corchetec":32,"EXPRESION_LOGICA":33,"tk_ancestorself":34,"tk_ancestor":35,"tk_child":36,"tk_descendantself":37,"tk_descendant":38,"tk_followingsibling":39,"tk_following":40,"tk_self":41,"tk_parent":42,"tk_precedingsibling":43,"tk_preceding":44,"ATRIBUTO":45,"tk_igual":46,"CADENA":47,"tk_attribute":48,"tk_and":49,"EXPRESION_RELACIONAL":50,"tk_or":51,"EXPRESION_NUMERICA":52,"tk_mayor":53,"tk_menor":54,"tk_mayorigual":55,"tk_menorigual":56,"EXPRESION_CADENA":57,"tk_noigual":58,"tk_menos":59,"tk_mas":60,"tk_mod":61,"tk_division":62,"tk_parentesisa":63,"tk_parentesisc":64,"tk_entero":65,"tk_decimal":66,"tk_last":67,"tk_position":68,"tk_cadena1":69,"tk_cadena2":70,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tk_barra",13:"tk_dobleslash",15:"tk_slash",16:"tk_dpds",18:"tk_pds",19:"tk_dps",20:"tk_ps",21:"tk_identificador",23:"tk_asterisco",24:"tk_punto",25:"tk_doblepunto",26:"tk_arrobaasterisco",27:"tk_arroba",28:"tk_texto",29:"tk_node",30:"tk_corchetea",32:"tk_corchetec",34:"tk_ancestorself",35:"tk_ancestor",36:"tk_child",37:"tk_descendantself",38:"tk_descendant",39:"tk_followingsibling",40:"tk_following",41:"tk_self",42:"tk_parent",43:"tk_precedingsibling",44:"tk_preceding",46:"tk_igual",48:"tk_attribute",49:"tk_and",51:"tk_or",53:"tk_mayor",54:"tk_menor",55:"tk_mayorigual",56:"tk_menorigual",58:"tk_noigual",59:"tk_menos",60:"tk_mas",61:"tk_mod",62:"tk_division",63:"tk_parentesisa",64:"tk_parentesisc",65:"tk_entero",66:"tk_decimal",67:"tk_last",68:"tk_position",69:"tk_cadena1",70:"tk_cadena2"},
productions_: [0,[3,2],[4,2],[7,3],[7,0],[6,2],[6,1],[9,2],[9,1],[9,1],[9,2],[9,1],[10,2],[10,1],[10,1],[10,2],[10,1],[14,2],[14,2],[14,2],[14,2],[17,1],[17,0],[11,2],[11,2],[11,2],[11,2],[11,2],[11,3],[11,2],[11,2],[22,3],[22,0],[31,1],[12,2],[12,2],[12,2],[12,2],[12,2],[12,2],[12,2],[12,2],[12,2],[12,2],[12,2],[45,4],[45,4],[33,3],[33,3],[33,1],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[57,1],[57,1],[52,2],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[47,1],[47,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  /*SELECT ES EL ARREGLO DE NODOS*/
                         /*Creamos una nueva instruccion y le mandamos los nodos que debe ir a buscar*/
                        if ($$[$0-1]!=null){                    
                          console.log("TODO CORRECTO :D XPATH ASC VERSION");
                          this.$ = $$[$0-1];
                          return this.$;
                        }else {
                          console.log("TODO CORRECTO :D XPATH ASC VERSION");
                          this.$ = [];
                          return this.$;
                        }
                         
break;
case 2:
 if($$[$0-1]!=null){
                              instruccion = new XPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
                              arr = [instruccion];
                              if($$[$0]!=null){
                              arr = arr.concat($$[$0]);
                              }                                   
                              this.$ = arr;
                              }else {
                                arr = null;
                                if($$[$0]!=null){
                                arr = $$[$0];                                   
                                } 
                                this.$ = arr;}
break;
case 3:
 if ($$[$0-1]!=null){
                                    instruccion = new XPath(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]);
                                    arr = [instruccion];
                                    if($$[$0]!=null){
                                    arr = arr.concat($$[$0]);
                                    }                                   
                                    this.$ = arr;                                   
                                  }else {
                                    arr = null;
                                    if($$[$0]!=null){
                                    arr = $$[$0];                                   
                                    } 
                                    this.$ = arr;
                                  }
break;
case 4:
  this.$ = null; 
break;
case 5:
 if($$[$0-1]!=null && $$[$0]!=null){
                  $$[$0-1].push($$[$0]);
                  this.$ = $$[$0-1]; 
                  } else {
                    this.$ = null;
                  } 
break;
case 6:
 if($$[$0]!=null){
              this.$ = [$$[$0]];
            } else {
              this.$ = null;
            }
             
break;
case 7:
         
                        nodoXPath = new NodoXpath("", TipoNodo.SELECTOR_EXPRESION, null, $$[$0-1][0], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);                
                        nodoaux = new NodoArbol("NODO","");
                        nodoaux.agregarHijo(new NodoArbol($$[$0-1][1],""));
                        nodoaux.agregarHijo($$[$0][1]);
                        nodoxPATHASC.agregarHijo(nodoaux);
                        this.$ = nodoXPath;
                             
break;
case 8:
     nodoXPath = new NodoXpath("", TipoNodo.EXPRESION, null, [], $$[$0][0], _$[$0].first_line, _$[$0].first_column); 
                        nodoaux = new NodoArbol("NODO","");
                        nodoaux.agregarHijo($$[$0][1]);
                        nodoxPATHASC.agregarHijo(nodoaux);
                        this.$ = nodoXPath;
                  
break;
case 9:
       nodoXPath = new NodoXpath("", TipoNodo.AXES, $$[$0][0], [], null, _$[$0].first_line, _$[$0].first_column); 
                        nodoaux = new NodoArbol("NODO","");
                        nodoaux.agregarHijo($$[$0][1]);
                        nodoxPATHASC.agregarHijo(nodoaux);
                        this.$ = nodoXPath;
                
break;
case 10:
 nodoXPath = new NodoXpath("", TipoNodo.SELECTOR_AXES, $$[$0][0], $$[$0-1][0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
                        nodoaux = new NodoArbol("NODO","");
                        nodoaux.agregarHijo(new NodoArbol($$[$0-1][1],""));
                        nodoaux.agregarHijo($$[$0][1]);
                        nodoxPATHASC.agregarHijo(nodoaux);
                        this.$ = nodoXPath;
                          
break;
case 11:
 
            ListaErr.agregarError(new Error(NumeroE, yylineno,this._$.first_column + 1, "Sintactico", "Se esperaba un objeto y se encontro "+ yytext,"XPATH")); NumeroE++;
            this.$ = null; 
break;
case 12:
 arr = [TipoSelector.DOBLE_SLASH]; 
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1] ;
                                          this.$ = [arr,$$[$0-1]];
                                        
break;
case 13:
 this.$ = [[TipoSelector.DOBLE_SLASH],$$[$0]]; 
break;
case 14:
 this.$ = [[TipoSelector.SLASH],$$[$0]];  
break;
case 15:
  arr = [TipoSelector.SLASH] 
                                      arr = arr.concat($$[$0][0]);
                                      $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                      this.$ = [arr,$$[$0-1]]; 
break;
case 16:
 this.$ = [$$[$0][0],$$[$0][1]];   
break;
case 17:
 arr = [TipoSelector.DOSPUNTOS_DOSSLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];  
break;
case 18:
 arr = [TipoSelector.PUNTO_DOSSLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];  
break;
case 19:
 arr = [TipoSelector.DOSPUNTOS_SLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];  
break;
case 20:
 arr = [TipoSelector.PUNTO_SLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];  
break;
case 21:
 this.$ = [$$[$0][0],$$[$0][1]]; 
break;
case 22:
 this.$ = [[TipoSelector.FIN],""]; 
break;
case 23:

                                        expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.IDENTIFICADOR, $$[$0][0]);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        nodoaux.agregarHijo($$[$0][1]);
                                        this.$ = [expresionAux,nodoaux];
                                        
break;
case 24:
     
                                        expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.ASTERISCO, $$[$0][0]);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        nodoaux.agregarHijo($$[$0][1]);
                                        this.$ = [expresionAux,nodoaux];
                                        
break;
case 25:
     
                                        expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.PUNTO, null);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        this.$ = [expresionAux,nodoaux];
                                        
break;
case 26:
     
                                        expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.DOBLEPUNTO, null);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        this.$ = [expresionAux,nodoaux];
                                        
break;
case 27:
     
                                        expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.ARROBA, null);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        this.$ = [expresionAux,nodoaux];
                                        
break;
case 28:
     
                                        expresionAux = new ExpresionXPath(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], TipoExpresionXPath.ARROBA_ID, null);
                                        nodoaux = new NodoArbol($$[$0-2],"");
                                        this.$ = [expresionAux,nodoaux];
                                        
break;
case 29:

                                        expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.TEXT, $$[$0][0]);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        nodoaux.agregarHijo($$[$0][1]);
                                        this.$ = [expresionAux,nodoaux];
                                        
break;
case 30:
          expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.NODE, $$[$0][0]);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        nodoaux.agregarHijo($$[$0][1]);
                                        this.$ = [expresionAux,nodoaux];
                                        
break;
case 31:
 
                                        nodoaux = new NodoArbol("Predicado","");
                                        nodoaux.agregarHijo(new NodoArbol("[",""));
                                        nodoaux.agregarHijo($$[$0-1][1]);
                                        nodoaux.agregarHijo(new NodoArbol("]",""));
                                        this.$ = [$$[$0-1][0],nodoaux];
break;
case 32:
 
                                        nodoaux = new NodoArbol("Predicado","");
                                        nodoaux.agregarHijo(new NodoArbol("[",""));
                                        nodoaux.agregarHijo(new NodoArbol("]",""));
                                        this.$ = [null,nodoaux];
break;
case 33:
  this.$ = $$[$0];  
break;
case 34:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.ANCESTOR_OR_SELF, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 35:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.ANCESTOR, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 36:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.CHILD, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 37:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.DESCENDANT_OR_SELF, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 38:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.DESCENDANT, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 39:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.FOLLOWING_SIBLING, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 40:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.FOLLOWING, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 41:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.SELF, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 42:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.PARENT, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 43:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.PRECEDING_SIBLING, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 44:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.PRECEDING, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 45:
 idAux = new Primitivo($$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
                                                        operacionAux = new Operacion(TipoOperadores.ATRIBUTOS, idAux, $$[$0][0], Operador.IGUAL, _$[$0-3].first_line, _$[$0-3].first_column);
                                                        nodoaux = new NodoArbol("=","");
                                                        nodoaux.agregarHijo(new NodoArbol("@"+$$[$0-2],""));
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [operacionAux,nodoaux]; 
break;
case 46:
 idAux = new Primitivo($$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
                                                        operacionAux = new Operacion(TipoOperadores.ATRIBUTOS, idAux, $$[$0][0], Operador.IGUAL, _$[$0-3].first_line, _$[$0-3].first_column);
                                                        nodoaux = new NodoArbol("=","");
                                                        nodoaux.agregarHijo(new NodoArbol("attribute::"+$$[$0-2],""));
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [operacionAux,nodoaux]; 
break;
case 47:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("and","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 48:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("or","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 49: case 56: case 57: case 62: case 63: case 74:
 this.$ = $$[$0]; 
break;
case 50:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol(">","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 51:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("<","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 52:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MAYOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                              nodoaux = new NodoArbol(">=","");
                                                                              nodoaux.agregarHijo($$[$0-2][1]);
                                                                              nodoaux.agregarHijo($$[$0][1]);
                                                                              this.$ = [operacionAux,nodoaux]; 
break;
case 53:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MENOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                              nodoaux = new NodoArbol("<=","");
                                                                              nodoaux.agregarHijo($$[$0-2][1]);
                                                                              nodoaux.agregarHijo($$[$0][1]);
                                                                              this.$ = [operacionAux,nodoaux]; 
break;
case 54:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                       nodoaux = new NodoArbol("=","");
                                                                       nodoaux.agregarHijo($$[$0-2][1]);
                                                                       nodoaux.agregarHijo($$[$0][1]);
                                                                       this.$ = [operacionAux,nodoaux]; 
break;
case 55:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("=","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 58:
  expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.ASTERISCO);
                                        nodoaux = new NodoArbol("*","");
                                        this.$ = [expresionAux,nodoaux]; 
break;
case 59:
    expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.ARROBA);
                                                nodoaux = new NodoArbol("@*","");
                                                this.$ = [expresionAux,nodoaux]; 
break;
case 60:
      expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.TEXT);
                                        nodoaux = new NodoArbol($$[$0],"");
                                        this.$ = [expresionAux,nodoaux]; 
break;
case 61:
       expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.NODE);
                                        nodoaux = new NodoArbol($$[$0],"");
                                        this.$ = [expresionAux,nodoaux]; 
break;
case 64:
   negativo = new Primitivo(-1, _$[$0-1].first_line, _$[$0-1].first_column);
                                                                  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0][0], negativo, Operador.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column);
                                                                  nodoaux = new NodoArbol("*","");
                                                                  nodoaux.agregarHijo(new NodoArbol("-1",""));
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 65:
   operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
                                                        nodoaux = new NodoArbol("+","");
                                                        nodoaux.agregarHijo($$[$0-2][1]);
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [operacionAux,nodoaux]; 
break;
case 66:
   operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
                                                        nodoaux = new NodoArbol("-","");
                                                        nodoaux.agregarHijo($$[$0-2][1]);
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [operacionAux,nodoaux]; 
break;
case 67:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
                                                          nodoaux = new NodoArbol("*","");
                                                          nodoaux.agregarHijo($$[$0-2][1]);
                                                          nodoaux.agregarHijo($$[$0][1]);
                                                          this.$ = [operacionAux,nodoaux]; 
break;
case 68:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
                                                      nodoaux = new NodoArbol("%","");                                                    
                                                      nodoaux.agregarHijo($$[$0-2][1]);
                                                      nodoaux.agregarHijo($$[$0][1]);
                                                      this.$ = [operacionAux,nodoaux]; 
break;
case 69:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
                                                        nodoaux = new NodoArbol("÷","");
                                                        nodoaux.agregarHijo($$[$0-2][1]);
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [operacionAux,nodoaux]; 
break;
case 70:
 this.$ = $$[$0-1];  
break;
case 71:
 primitivoAux = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
                          nodoaux = new NodoArbol($$[$0],"");
                          this.$ = [primitivoAux,nodoaux];   
break;
case 72:
 primitivoAux = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
                            nodoaux = new NodoArbol($$[$0],"");
                            this.$ = [primitivoAux,nodoaux];   
break;
case 73:
 expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.LAST);
              nodoaux = new NodoArbol($$[$0],"");
              this.$ = [expresionAux,nodoaux];   
break;
case 75:
   expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.POSITION);
                      nodoaux = new NodoArbol($$[$0],"");
                      this.$ = [expresionAux,nodoaux]; 
break;
case 76:
 primitivoAux = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
                        nodoaux = new NodoArbol($$[$0],"");
                        this.$ = [primitivoAux,nodoaux];
break;
case 77: case 78:
 primitivoAux = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
                              primitivoAux.setCadena(true);
                              nodoaux = new NodoArbol($$[$0],"");
                              this.$ = [primitivoAux,nodoaux];   
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,9:4,10:5,11:6,12:7,13:$V1,14:11,15:$V2,16:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp},{1:[3]},{5:[1,35]},{2:$V0,5:$Vq,7:36,8:$Vr,9:37,10:5,11:6,12:7,13:$V1,14:11,15:$V2,16:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp},o($Vs,[2,6]),{11:39,12:40,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp},o($Vs,[2,8]),o($Vs,[2,9]),o($Vs,[2,11]),o($Vt,[2,13],{14:41,16:$V3,18:$V4,19:$V5,20:$V6}),o($Vt,[2,14],{14:42,16:$V3,18:$V4,19:$V5,20:$V6}),o($Vt,[2,16]),o($Vu,$Vv,{22:43,30:$Vw}),o($Vu,$Vv,{22:45,30:$Vw}),o($Vu,$Vv,{22:46,30:$Vw}),o($Vu,$Vv,{22:47,30:$Vw}),o($Vu,$Vv,{22:48,30:$Vw}),{21:[1,49]},o($Vu,$Vv,{22:50,30:$Vw}),o($Vu,$Vv,{22:51,30:$Vw}),{11:52,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{11:53,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{11:54,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{11:55,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{11:56,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{11:57,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{11:58,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{11:59,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{11:60,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{11:61,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{11:62,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},o($Vt,$Vx,{17:63,14:64,16:$V3,18:$V4,19:$V5,20:$V6}),o($Vt,$Vx,{14:64,17:65,16:$V3,18:$V4,19:$V5,20:$V6}),o($Vt,$Vx,{14:64,17:66,16:$V3,18:$V4,19:$V5,20:$V6}),o($Vt,$Vx,{14:64,17:67,16:$V3,18:$V4,19:$V5,20:$V6}),{1:[2,1]},{5:[2,2]},o($Vs,[2,5]),{2:$V0,6:68,9:4,10:5,11:6,12:7,13:$V1,14:11,15:$V2,16:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp},o($Vs,[2,7]),o($Vs,[2,10]),o($Vt,[2,12]),o($Vt,[2,15]),o($Vu,[2,23]),{12:83,21:$Vy,23:$Vz,26:$VA,27:$VB,28:$VC,29:$VD,31:69,33:70,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:73,48:$VE,50:71,52:72,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},o($Vu,[2,24]),o($Vu,[2,25]),o($Vu,[2,26]),o($Vu,[2,27]),o($Vu,$Vv,{22:88,30:$Vw}),o($Vu,[2,29]),o($Vu,[2,30]),o($Vu,[2,34]),o($Vu,[2,35]),o($Vu,[2,36]),o($Vu,[2,37]),o($Vu,[2,38]),o($Vu,[2,39]),o($Vu,[2,40]),o($Vu,[2,41]),o($Vu,[2,42]),o($Vu,[2,43]),o($Vu,[2,44]),o($Vt,[2,17]),o($Vt,[2,21]),o($Vt,[2,18]),o($Vt,[2,19]),o($Vt,[2,20]),{2:$V0,5:$Vq,7:89,8:$Vr,9:37,10:5,11:6,12:7,13:$V1,14:11,15:$V2,16:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp},{32:[1,90]},{32:[2,33],49:[1,91],51:[1,92]},o($VL,[2,49]),o($VL,[2,56],{23:$VM,46:[1,97],53:[1,93],54:[1,94],55:[1,95],56:[1,96],58:[1,98],59:$VN,60:$VO,61:$VP,62:$VQ}),o($VL,[2,57]),o($VL,[2,58]),o($VL,[2,59]),o($VL,[2,60]),o($VL,[2,61]),{12:83,21:$Vy,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,52:104,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},{12:83,21:$Vy,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,52:105,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},o($VR,[2,71]),o($VR,[2,72]),o($VR,[2,73]),o($VR,[2,74]),o($VR,[2,75]),o($VR,[2,76]),{21:[1,106]},{21:[1,107]},o($Vu,[2,28]),{5:[2,3]},o($Vu,[2,31]),{12:83,21:$Vy,23:$Vz,26:$VA,27:$VB,28:$VC,29:$VD,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:73,48:$VE,50:108,52:72,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},{12:83,21:$Vy,23:$Vz,26:$VA,27:$VB,28:$VC,29:$VD,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:73,48:$VE,50:109,52:72,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},{12:83,21:$Vy,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,52:110,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},{12:83,21:$Vy,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,52:111,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},{12:83,21:$Vy,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,52:112,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},{12:83,21:$Vy,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,52:113,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},{12:83,21:$Vy,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,47:115,52:116,57:114,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VS,70:$VT},{12:83,21:$Vy,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,47:115,52:116,57:119,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VS,70:$VT},{12:83,21:$Vy,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,52:120,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},{12:83,21:$Vy,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,52:121,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},{12:83,21:$Vy,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,52:122,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},{12:83,21:$Vy,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,52:123,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},{12:83,21:$Vy,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,52:124,59:$VF,63:$VG,65:$VH,66:$VI,67:$VJ,68:$VK},o($VR,[2,64]),{23:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,64:[1,125]},{46:[1,126]},{46:[1,127]},o($VL,[2,47]),o($VL,[2,48]),o($VL,[2,50],{23:$VM,59:$VN,60:$VO,61:$VP,62:$VQ}),o($VL,[2,51],{23:$VM,59:$VN,60:$VO,61:$VP,62:$VQ}),o($VL,[2,52],{23:$VM,59:$VN,60:$VO,61:$VP,62:$VQ}),o($VL,[2,53],{23:$VM,59:$VN,60:$VO,61:$VP,62:$VQ}),o($VL,[2,54]),o($VL,[2,62]),o($VL,[2,63],{23:$VM,59:$VN,60:$VO,61:$VP,62:$VQ}),o($VL,[2,77]),o($VL,[2,78]),o($VL,[2,55]),o($VU,[2,65],{23:$VM,61:$VP,62:$VQ}),o($VU,[2,66],{23:$VM,61:$VP,62:$VQ}),o($VR,[2,67]),o($VR,[2,68]),o($VR,[2,69]),o($VR,[2,70]),{47:128,69:$VS,70:$VT},{47:129,69:$VS,70:$VT},o($VL,[2,45]),o($VL,[2,46])],
defaultActions: {35:[2,1],36:[2,2],89:[2,3]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 29;  
break;
case 1: return 67;  
break;
case 2: return 68;  
break;
case 3: return 28;  
break;
case 4: return 34;  
break;
case 5: return 35;  
break;
case 6: return 48;  
break;
case 7: return 36;  
break;
case 8: return 37;  
break;
case 9: return 38;  
break;
case 10: return 39;  
break;
case 11: return 40;  
break;
case 12: return 42;  
break;
case 13: return 43;  
break;
case 14: return 44;  
break;
case 15: return 41;  
break;
case 16: return 62;  
break;
case 17: return 51;  
break;
case 18: return 49;  
break;
case 19: return 61;  
break;
case 20: return 26;  
break;
case 21: return 27;  
break;
case 22: return 8;  
break;
case 23: return 60;  
break;
case 24: return 59;  
break;
case 25: return 23;  
break;
case 26: return 58; 
break;
case 27: return 56; 
break;
case 28: return 55; 
break;
case 29: return 46; 
break;
case 30: return 53; 
break;
case 31: return 54; 
break;
case 32: return 'tk_interrogacion'; 
break;
case 33: return 16; 
break;
case 34: return 18; 
break;
case 35: return 19; 
break;
case 36: return 20; 
break;
case 37: return 13; 
break;
case 38: return 15; 
break;
case 39: return 25; 
break;
case 40: return 24; 
break;
case 41: return 66;  
break;
case 42: return 65;  
break;
case 43: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 69; 
break;
case 44: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 70; 
break;
case 45: return 21; 
break;
case 46: return 30; 
break;
case 47: return 32; 
break;
case 48: return 63; 
break;
case 49: return 64; 
break;
case 50:/* skip whitespace */
break;
case 51: /*Los Ignoramos*/   
break;
case 52: return 5;       
break;
case 53:
        ListaErr.agregarError(new Error(NumeroE, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "Lexico", "El caracter " + yy_.yytext + " no pertenece al lenguaje.","XPATH")); NumeroE++;
 
break;
}
},
rules: [/^(?:node\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:text\(\))/i,/^(?:ancestor-or-self::)/i,/^(?:ancestor::)/i,/^(?:attribute::)/i,/^(?:child::)/i,/^(?:descendant-or-self::)/i,/^(?:descendant::)/i,/^(?:following-sibling::)/i,/^(?:following::)/i,/^(?:parent::)/i,/^(?:preceding-sibling::)/i,/^(?:preceding::)/i,/^(?:self::)/i,/^(?:div\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:@\*)/i,/^(?:@)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\?)/i,/^(?:\.\.\/\/)/i,/^(?:\.\/\/)/i,/^(?:\.\.\/)/i,/^(?:\.\/)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:([0-9]+["."][0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:([a-zA-ZáéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ])[a-zA-Z0-9áéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ_]*)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XpathAsc;
exports.Parser = XpathAsc.Parser;
exports.parse = function () { return XpathAsc.parse.apply(XpathAsc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}