/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gram_xquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[32,36,38,40],$V1=[2,9],$V2=[1,10],$V3=[1,8],$V4=[1,9],$V5=[5,15,18,32,36,38,40,54],$V6=[5,15,18,32,36,38,40,54,62],$V7=[36,38,40],$V8=[2,12],$V9=[1,18],$Va=[1,19],$Vb=[38,40],$Vc=[1,44],$Vd=[1,39],$Ve=[1,37],$Vf=[1,40],$Vg=[1,47],$Vh=[1,48],$Vi=[1,49],$Vj=[1,50],$Vk=[1,51],$Vl=[1,38],$Vm=[1,41],$Vn=[1,31],$Vo=[1,32],$Vp=[1,33],$Vq=[1,42],$Vr=[1,43],$Vs=[1,61],$Vt=[2,27],$Vu=[5,15,17,18,21,23,24,25,32,36,38,40,43,44,47,48,49,50,51,52,54,62,89,92,93,94,97,117,118],$Vv=[1,64],$Vw=[1,62],$Vx=[1,63],$Vy=[1,65],$Vz=[1,66],$VA=[5,15,17,18,21,23,24,25,32,36,38,40,43,44,47,48,49,50,51,52,54,62,89,91,92,93,94,97,98,100,101,102,117,118],$VB=[1,78],$VC=[1,70],$VD=[1,71],$VE=[1,72],$VF=[1,73],$VG=[1,74],$VH=[1,75],$VI=[1,76],$VJ=[1,77],$VK=[1,79],$VL=[1,80],$VM=[5,15,17,18,21,23,24,25,32,34,36,38,40,43,44,47,48,49,50,51,52,54,62,89,91,92,93,94,97,98,100,101,102,103,105,106,107,108,109,110,111,112,113,117,118],$VN=[1,81],$VO=[1,82],$VP=[5,15,17,18,21,23,24,25,32,34,36,38,40,43,44,47,48,49,50,51,52,54,62,89,91,92,93,94,97,98,100,101,102,103,105,106,107,108,109,110,111,112,113,114,116,117,118],$VQ=[2,110],$VR=[1,96],$VS=[2,41],$VT=[17,21,28,31,32,36,38,40],$VU=[2,18],$VV=[1,99],$VW=[1,102],$VX=[1,131],$VY=[1,130],$VZ=[5,15,17,18,21,23,24,25,28,31,32,34,36,38,40,43,44,47,48,49,50,51,52,54,62,89,91,92,93,94,97,98,100,101,102,103,105,106,107,108,109,110,111,112,113,114,116,117,118],$V_=[17,21,32,36,38,40],$V$=[1,147],$V01=[1,148],$V11=[1,163],$V21=[1,164],$V31=[2,45],$V41=[18,89,90,91,92,93,94],$V51=[2,72],$V61=[1,167],$V71=[1,168],$V81=[1,169],$V91=[1,170],$Va1=[1,171],$Vb1=[1,172],$Vc1=[1,173],$Vd1=[1,174],$Ve1=[1,175],$Vf1=[1,176],$Vg1=[1,177],$Vh1=[1,178],$Vi1=[1,179],$Vj1=[1,190],$Vk1=[1,191],$Vl1=[1,192],$Vm1=[1,193],$Vn1=[1,194],$Vo1=[1,195],$Vp1=[1,196],$Vq1=[2,82],$Vr1=[1,218],$Vs1=[1,230],$Vt1=[1,228],$Vu1=[1,229],$Vv1=[1,245],$Vw1=[1,247],$Vx1=[1,246],$Vy1=[1,248],$Vz1=[1,249],$VA1=[1,250],$VB1=[1,251],$VC1=[1,252],$VD1=[1,253],$VE1=[1,254];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"BEGIN":3,"INSTRUCCIONES":4,"EOF":5,"XQUERY":6,"FLWOR":7,"CALL":8,"FUNCTION":9,"FOR":10,"LET":11,"WHERE":12,"ORDER":13,"RETURN":14,"for":15,"DEFINITION":16,"dollasign":17,"identificador":18,"in":19,"SOURCE":20,"coma":21,"doc":22,"p_abre":23,"StringLiteral":24,"p_cierra":25,"PATH":26,"RANK":27,"axis":28,"AXISNAME":29,"NODO":30,"d_axis":31,"let":32,"dpuntos":33,"igual":34,"EXPRESION":35,"where":36,"CONTENIDO":37,"order":38,"CONT_ORDER":39,"return":40,"CONDITION":41,"rif":42,"rthen":43,"relse":44,"VARIABLES":45,"CALL_PRIM":46,"substring":47,"up_case":48,"low_case":49,"string":50,"number":51,"numero":52,"to":53,"dec":54,"fun":55,"VAR_FUNC":56,"as":57,"PREFIX":58,"TYPE":59,"quest":60,"l_abre":61,"l_cierra":62,"pyc":63,"xs":64,"fn":65,"date":66,"integer":67,"int":68,"long":69,"short":70,"boolean":71,"double":72,"float":73,"ancestor":74,"cpuntos":75,"ancestororself":76,"attribute":77,"child":78,"descendant":79,"descendantorself":80,"following":81,"followingsibling":82,"namespace":83,"parent":84,"preceding":85,"precedingsibling":86,"self":87,"PREDICADOS":88,"punto":89,"ppunto":90,"por":91,"at":92,"text":93,"node":94,"PREDICADO":95,"c_abre":96,"c_cierra":97,"mas":98,"T":99,"menos":100,"div":101,"mod":102,"menorque":103,"F":104,"lt":105,"menorigual":106,"le":107,"mayorque":108,"gt":109,"mayorigual":110,"ge":111,"eq":112,"ne":113,"land":114,"G":115,"lor":116,"last":117,"position":118,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"for",17:"dollasign",18:"identificador",19:"in",21:"coma",22:"doc",23:"p_abre",24:"StringLiteral",25:"p_cierra",28:"axis",31:"d_axis",32:"let",33:"dpuntos",34:"igual",36:"where",38:"order",40:"return",42:"rif",43:"rthen",44:"relse",47:"substring",48:"up_case",49:"low_case",50:"string",51:"number",52:"numero",53:"to",54:"dec",55:"fun",57:"as",60:"quest",61:"l_abre",62:"l_cierra",63:"pyc",64:"xs",65:"fn",66:"date",67:"integer",68:"int",69:"long",70:"short",71:"boolean",72:"double",73:"float",74:"ancestor",75:"cpuntos",76:"ancestororself",77:"attribute",78:"child",79:"descendant",80:"descendantorself",81:"following",82:"followingsibling",83:"namespace",84:"parent",85:"preceding",86:"precedingsibling",87:"self",89:"punto",90:"ppunto",91:"por",92:"at",93:"text",94:"node",96:"c_abre",97:"c_cierra",98:"mas",100:"menos",101:"div",102:"mod",103:"menorque",105:"lt",106:"menorigual",107:"le",108:"mayorque",109:"gt",110:"mayorigual",111:"ge",112:"eq",113:"ne",114:"land",116:"lor",117:"last",118:"position"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[7,5],[10,2],[10,0],[16,5],[16,6],[16,0],[20,5],[20,1],[20,1],[26,4],[26,4],[26,0],[11,6],[11,0],[12,2],[12,0],[13,2],[13,0],[39,2],[39,3],[39,0],[14,2],[14,2],[41,6],[8,6],[46,4],[46,4],[46,4],[46,4],[46,4],[27,5],[27,5],[45,2],[45,3],[45,0],[9,17],[56,8],[56,9],[56,0],[58,1],[58,1],[58,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,0],[30,2],[30,2],[30,2],[30,2],[30,3],[30,3],[30,3],[30,3],[88,2],[88,0],[95,3],[37,1],[37,2],[37,3],[37,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,1],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,1],[104,3],[104,3],[104,1],[115,3],[115,1],[115,1],[115,1],[115,1],[115,3],[115,3],[115,3],[115,1],[115,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 parserXPath = {} 
break;
case 8:
 
                                    
                                
break;
case 9: case 12: case 18: case 72: case 82:
 this.$ = '' 
break;
case 10: case 11: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 93: case 105:
 this.$ = $$[$0]; 
break;
case 13:

                                                    parserXPath = new parse($$[$0]);
                                                    var data = JSON.parse(localStorage.getItem('XML'));
                                                    var resultado = parserXPath.Ejecutar(data);
                                                    console.log(resultado);
                                                
break;
case 14:
 
                                                    parserXPath = new parse($$[$0]);
                                                    var data = JSON.parse(localStorage.getItem('XML'));
                                                    var resultado = parserXPath.Ejecutar(data);
                                                    console.log(resultado);
                                                
break;
case 15:
  
break;
case 16: case 17:
 this.$ = $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 73: case 74: case 75: case 76: case 81:
 this.$ = $$[$0-1]+$$[$0]; 
break;
case 77: case 78: case 79: case 80: case 83: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 109:
 this.$ = $$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 84: case 108: case 110: case 111: case 112: case 113: case 117: case 118:
 this.$ = $$[$0] 
break;
case 85:
 this.$ = $$[$0-1]+$$[$0] 
break;
case 106: case 107: case 114: case 115: case 116:
 this.$ = $$[$0-2]+$$[$0-1]+$$[$0] 
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,7:4,8:5,9:6,10:7,15:$V2,18:$V3,54:$V4}),{1:[3]},o($V0,$V1,{7:4,8:5,9:6,10:7,6:12,5:[1,11],15:$V2,18:$V3,54:$V4}),o($V5,[2,3]),o($V6,[2,4]),o($V6,[2,5]),o($V6,[2,6]),o($V7,[2,20],{11:13,32:[1,14]}),{33:[1,15]},{55:[1,16]},o($V0,$V8,{16:17,17:$V9,21:$Va}),{1:[2,1]},o($V5,[2,2]),o($Vb,[2,22],{12:20,36:[1,21]}),{17:[1,22]},{18:[1,23]},{18:[1,24]},o($V0,[2,8]),{18:[1,25]},{17:[1,26]},{13:27,38:[1,28],40:[2,24]},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,35:30,37:29,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{18:[1,52]},{23:[1,53]},{33:[1,54]},{19:[1,55]},{18:[1,56]},{14:57,40:[1,58]},{17:$Vc,18:$Vd,21:$Vs,23:$Ve,24:$Vf,27:46,35:30,37:60,39:59,40:$Vt,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},o($Vb,[2,21]),o($Vu,[2,84],{91:$Vv,98:$Vw,100:$Vx,101:$Vy,102:$Vz}),{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,35:67,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,99:34,104:35,115:36,117:$Vq,118:$Vr},{23:[1,68]},{23:[1,69]},o($VA,[2,93],{34:$VB,103:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI,111:$VJ,112:$VK,113:$VL}),o($VM,[2,105],{114:$VN,116:$VO}),o($VP,[2,108]),{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,35:83,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:[1,84],89:$Vm,99:34,104:35,115:36,117:$Vq,118:$Vr},o($VP,$VQ),o($VP,[2,111]),o($VP,[2,112]),o($VP,[2,113]),{23:[1,85]},{23:[1,86]},{18:[1,87]},o($VP,[2,117]),o($VP,[2,118]),{23:[1,88]},{23:[1,89]},{23:[1,90]},{23:[1,91]},{23:[1,92]},{33:[1,93]},{17:$Vc,18:$Vd,21:$VR,23:$Ve,24:$Vf,25:$VS,27:46,35:30,37:95,45:94,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{18:[1,97]},o($VT,$VU,{20:98,26:100,27:101,22:$VV,23:$VW}),{19:[1,103]},o($V6,[2,7]),{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,35:30,37:104,41:105,42:[1,106],46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{40:[2,23]},{17:$Vc,18:$Vd,21:$Vs,23:$Ve,24:$Vf,27:46,35:30,37:60,39:107,40:$Vt,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,35:30,37:108,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,99:109,104:35,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,99:110,104:35,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,99:111,104:35,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,99:112,104:35,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,99:113,104:35,115:36,117:$Vq,118:$Vr},o($Vu,[2,85],{91:$Vv,98:$Vw,100:$Vx,101:$Vy,102:$Vz}),{25:[1,114]},{25:[1,115]},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,104:116,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,104:117,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,104:118,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,104:119,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,104:120,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,104:121,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,104:122,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,104:123,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,104:124,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,104:125,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,104:126,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,115:127,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,115:128,117:$Vq,118:$Vr},{25:[1,129],91:$Vv,98:$Vw,100:$Vx,101:$Vy,102:$Vz},o([25,34,91,98,100,101,102,103,105,106,107,108,109,110,111,112,113,114,116],$VQ,{21:$VX,53:$VY}),{25:[1,132]},{25:[1,133]},o($VZ,$VU,{26:134}),{17:$Vc,18:$Vd,21:$VR,23:$Ve,24:$Vf,25:$VS,27:46,35:30,37:95,45:135,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,21:$VR,23:$Ve,24:$Vf,25:$VS,27:46,35:30,37:95,45:136,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,21:$VR,23:$Ve,24:$Vf,25:$VS,27:46,35:30,37:95,45:137,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,21:$VR,23:$Ve,24:$Vf,25:$VS,27:46,35:30,37:95,45:138,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,21:$VR,23:$Ve,24:$Vf,25:$VS,27:46,35:30,37:95,45:139,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{34:[1,140]},{25:[1,141]},{17:$Vc,18:$Vd,21:$VR,23:$Ve,24:$Vf,25:$VS,27:46,35:30,37:95,45:142,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,35:30,37:143,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{23:[1,144]},o($V0,$V8,{16:145,17:$V9,21:$Va}),{23:[1,146]},o($V_,[2,14],{28:$V$,31:$V01}),o($V_,[2,15]),{52:[1,149]},o($VT,$VU,{26:100,27:101,20:150,22:$VV,23:$VW}),o($V6,[2,28]),o($V6,[2,29]),{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,35:30,37:151,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{40:[2,25]},{17:$Vc,18:$Vd,21:$Vs,23:$Ve,24:$Vf,27:46,35:30,37:60,39:152,40:$Vt,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},o($VA,[2,88],{34:$VB,103:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI,111:$VJ,112:$VK,113:$VL}),o($VA,[2,89],{34:$VB,103:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI,111:$VJ,112:$VK,113:$VL}),o($VA,[2,90],{34:$VB,103:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI,111:$VJ,112:$VK,113:$VL}),o($VA,[2,91],{34:$VB,103:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI,111:$VJ,112:$VK,113:$VL}),o($VA,[2,92],{34:$VB,103:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI,111:$VJ,112:$VK,113:$VL}),o($Vu,[2,86]),o($Vu,[2,87]),o($VM,[2,94],{114:$VN,116:$VO}),o($VM,[2,95],{114:$VN,116:$VO}),o($VM,[2,96],{114:$VN,116:$VO}),o($VM,[2,97],{114:$VN,116:$VO}),o($VM,[2,98],{114:$VN,116:$VO}),o($VM,[2,99],{114:$VN,116:$VO}),o($VM,[2,100],{114:$VN,116:$VO}),o($VM,[2,101],{114:$VN,116:$VO}),o($VM,[2,102],{114:$VN,116:$VO}),o($VM,[2,103],{114:$VN,116:$VO}),o($VM,[2,104],{114:$VN,116:$VO}),o($VP,[2,106]),o($VP,[2,107]),o($VP,[2,109]),{52:[1,153]},{52:[1,154]},o($VP,[2,114]),o($VP,[2,115]),o($VP,[2,116],{28:$V$,31:$V01}),{25:[1,155]},{25:[1,156]},{25:[1,157]},{25:[1,158]},{25:[1,159]},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,35:160,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,99:34,104:35,115:36,117:$Vq,118:$Vr},o($V6,[2,31]),{25:[2,39]},{17:$Vc,18:$Vd,21:$VR,23:$Ve,24:$Vf,25:$VS,27:46,35:30,37:95,45:161,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{17:$V11,21:$V21,25:$V31,56:162},o($V0,[2,10]),{24:[1,165]},o($V41,$V51,{29:166,74:$V61,76:$V71,77:$V81,78:$V91,79:$Va1,80:$Vb1,81:$Vc1,82:$Vd1,83:$Ve1,84:$Vf1,85:$Vg1,86:$Vh1,87:$Vi1}),o($V41,$V51,{29:180,74:$V61,76:$V71,77:$V81,78:$V91,79:$Va1,80:$Vb1,81:$Vc1,82:$Vd1,83:$Ve1,84:$Vf1,85:$Vg1,86:$Vh1,87:$Vi1}),{21:$VX,53:$VY},o($V0,$V8,{16:181,17:$V9,21:$Va}),{43:[1,182]},{40:[2,26]},{25:[1,183]},{25:[1,184]},o($VP,[2,32]),o($VP,[2,33]),o($VP,[2,34]),o($VP,[2,35]),o($VP,[2,36]),o($V7,[2,19],{91:$Vv,98:$Vw,100:$Vx,101:$Vy,102:$Vz}),{25:[2,40]},{25:[1,185]},{18:[1,186]},{17:[1,187]},{25:[1,188]},{18:$Vj1,30:189,89:$Vk1,90:$Vl1,91:$Vm1,92:$Vn1,93:$Vo1,94:$Vp1},{75:[1,197]},{75:[1,198]},{75:[1,199]},{75:[1,200]},{75:[1,201]},{75:[1,202]},{75:[1,203]},{75:[1,204]},{75:[1,205]},{75:[1,206]},{75:[1,207]},{75:[1,208]},{75:[1,209]},{18:$Vj1,30:210,89:$Vk1,90:$Vl1,91:$Vm1,92:$Vn1,93:$Vo1,94:$Vp1},o($V0,[2,11]),{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,35:30,37:211,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},o($VP,[2,37]),o($VP,[2,38]),{57:[1,212]},{57:[1,213]},{18:[1,214]},o($VT,$VU,{26:215}),o($VZ,[2,16]),o($VZ,$Vq1,{88:216,95:217,96:$Vr1}),o($VZ,$Vq1,{95:217,88:219,96:$Vr1}),o($VZ,$Vq1,{95:217,88:220,96:$Vr1}),o($VZ,$Vq1,{95:217,88:221,96:$Vr1}),{18:[1,222],91:[1,223]},{23:[1,224]},{23:[1,225]},o($V41,[2,59]),o($V41,[2,60]),o($V41,[2,61]),o($V41,[2,62]),o($V41,[2,63]),o($V41,[2,64]),o($V41,[2,65]),o($V41,[2,66]),o($V41,[2,67]),o($V41,[2,68]),o($V41,[2,69]),o($V41,[2,70]),o($V41,[2,71]),o($VZ,[2,17]),{44:[1,226]},{58:227,60:$Vs1,64:$Vt1,65:$Vu1},{58:231,60:$Vs1,64:$Vt1,65:$Vu1},{57:[1,232]},o($V_,[2,13],{28:$V$,31:$V01}),o($VZ,[2,73]),o($VZ,$Vq1,{95:217,88:233,96:$Vr1}),{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,35:30,37:234,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},o($VZ,[2,74]),o($VZ,[2,75]),o($VZ,[2,76]),o($VZ,$Vq1,{95:217,88:235,96:$Vr1}),o($VZ,$Vq1,{95:217,88:236,96:$Vr1}),{25:[1,237]},{25:[1,238]},{17:$Vc,18:$Vd,23:$Ve,24:$Vf,27:46,35:30,37:239,46:45,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,89:$Vm,92:$Vn,93:$Vo,94:$Vp,99:34,104:35,115:36,117:$Vq,118:$Vr},{33:[1,240]},{33:[2,46]},{33:[2,47]},{33:[2,48]},{33:[1,241]},{58:242,60:$Vs1,64:$Vt1,65:$Vu1},o($VZ,[2,81]),{97:[1,243]},o($VZ,[2,77]),o($VZ,[2,78]),o($VZ,[2,79]),o($VZ,[2,80]),o($V6,[2,30]),{50:$Vv1,54:$Vw1,59:244,66:$Vx1,67:$Vy1,68:$Vz1,69:$VA1,70:$VB1,71:$VC1,72:$VD1,73:$VE1},{50:$Vv1,54:$Vw1,59:255,66:$Vx1,67:$Vy1,68:$Vz1,69:$VA1,70:$VB1,71:$VC1,72:$VD1,73:$VE1},{33:[1,256]},o([5,15,17,18,21,23,24,25,28,31,32,34,36,38,40,43,44,47,48,49,50,51,52,54,62,89,91,92,93,94,96,97,98,100,101,102,103,105,106,107,108,109,110,111,112,113,114,116,117,118],[2,83]),{60:[1,257]},{60:[2,49]},{60:[2,50]},{60:[2,51]},{60:[2,52]},{60:[2,53]},{60:[2,54]},{60:[2,55]},{60:[2,56]},{60:[2,57]},{60:[2,58]},{60:[1,258]},{50:$Vv1,54:$Vw1,59:259,66:$Vx1,67:$Vy1,68:$Vz1,69:$VA1,70:$VB1,71:$VC1,72:$VD1,73:$VE1},{61:[1,260]},{17:$V11,21:$V21,25:$V31,56:261},{60:[1,262]},o($V0,$V1,{7:4,8:5,9:6,10:7,6:263,15:$V2,18:$V3,54:$V4}),{25:[2,43]},{17:$V11,21:$V21,25:$V31,56:264},{62:[1,265]},{25:[2,44]},{63:[1,266]},o($V6,[2,42])],
defaultActions: {11:[2,1],59:[2,23],107:[2,25],142:[2,39],152:[2,26],161:[2,40],228:[2,46],229:[2,47],230:[2,48],245:[2,49],246:[2,50],247:[2,51],248:[2,52],249:[2,53],250:[2,54],251:[2,55],252:[2,56],253:[2,57],254:[2,58],261:[2,43],264:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { parse } = require ('../analizadorXPath/Xpath')
    var errores = [];
    var parserXPath = {}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip white space */
break;
case 1:return 78  
break;
case 2:return 80
break;
case 3:return 82
break;
case 4:return 86
break;
case 5:return 76
break;
case 6:return 79
break;
case 7:return 81
break;
case 8:return 85
break;
case 9:return 74
break;
case 10:return 77
break;
case 11:return 87
break;
case 12:return 83
break;
case 13:return 84
break;
case 14:return 93
break;
case 15:return 94
break;
case 16:return 118
break;
case 17:return 117
break;
case 18:return 15
break;
case 19:return 32
break;
case 20:return 36
break;
case 21:return 38
break;
case 22:return 40
break;
case 23:return 53
break;
case 24:return 19
break;
case 25:return 22
break;
case 26:return 112 // =
break;
case 27:return 113 // !=
break;
case 28:return 'it' // <
break;
case 29:return 107 // <=
break;
case 30:return 109 // >
break;
case 31:return 111 // >=
break;
case 32:return 21
break;
case 33:return 57
break;
case 34:return 42
break;
case 35:return 43
break;
case 36:return 44
break;
case 37:return 50
break;
case 38:return 'norm_str'
break;
case 39:return 'token'
break;
case 40:return 66
break;
case 41:return 'date_time'
break;
case 42:return 'duration'
break;
case 43:return 'time'
break;
case 44:return 54
break;
case 45:return 67
break;
case 46:return 'byte'
break;
case 47:return 68
break;
case 48:return 69
break;
case 49:return 70
break;
case 50:return 71
break;
case 51:return 72
break;
case 52:return 73
break;
case 53:return 54
break;
case 54:return 55
break;
case 55:return 51
break;
case 56:return 47
break;
case 57:return 48
break;
case 58:return 49
break;
case 59:return 65
break;
case 60:return 64
break;
case 61:return  'quest'
break;
case 62:return 114
break;
case 63:return 116
break;
case 64:return 34
break;
case 65:return 112
break;
case 66:return 'diferente'
break;
case 67:return 113
break;
case 68:return 106
break;
case 69:return 107
break;
case 70:return 103
break;
case 71:return 105
break;
case 72:return 110
break;
case 73:return 111
break;
case 74:return 108
break;
case 75:return 109
break;
case 76:return 98
break;
case 77:return 100
break;
case 78:return 91
break;
case 79:return 101 
break;
case 80:return 102
break;
case 81:return 96
break;
case 82:return 97
break;
case 83:return 61
break;
case 84:return 62
break;
case 85:return 23
break;
case 86:return 25
break;
case 87:return 75
break;
case 88:return 33
break;
case 89:return 90
break;
case 90:return 89
break;
case 91:return 63
break;
case 92:return 17
break;
case 93:return 92
break;
case 94:return 'or'
break;
case 95:return 31
break;
case 96:return 28
break;
case 97:return 24
break;
case 98:return 'CharLiteral'
break;
case 99:return 52;
break;
case 100:return 18;  
break;
case 101:return 'any'
break;
case 102:  
    console.error('Error léxico: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);
    errores.push({'Error Type': 'Lexico', 'Row': yy_.yylloc.first_line, 'Column': yy_.yylloc.first_column, 'Description': 'El caracter: '+yy_.yytext+' no pertenece al lenguaje' });

break;
case 103:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:following-sibling\b)/,/^(?:preceding-sibling\b)/,/^(?:ancestor-or-self\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:preceding\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:self\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:text\b)/,/^(?:node\b)/,/^(?:position\b)/,/^(?:last\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:to\b)/,/^(?:in\b)/,/^(?:doc\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:it\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:,)/,/^(?:as\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:string\b)/,/^(?:normalizedString\b)/,/^(?:token\b)/,/^(?:date\b)/,/^(?:dateTime\b)/,/^(?:duration\b)/,/^(?:time\b)/,/^(?:decimal\b)/,/^(?:integer\b)/,/^(?:byte\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:short\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:number\b)/,/^(?:substring\b)/,/^(?:upper-case\b)/,/^(?:lower-case\b)/,/^(?:fn\b)/,/^(?:xs\b)/,/^(?:\?)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:=)/,/^(?:eq\b)/,/^(?:!=)/,/^(?:ne\b)/,/^(?:<=)/,/^(?:le\b)/,/^(?:<)/,/^(?:lt\b)/,/^(?:>=)/,/^(?:ge\b)/,/^(?:>)/,/^(?:gt\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:mod\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:::)/,/^(?::)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:;)/,/^(?:\$)/,/^(?:@)/,/^(?:\|)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/,/^(?:{charliteral})/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+))|[0-9]+)/,/^(?:[a-zA-ZÀ-ÿ][a-zA-ZÀ-ÿ0-9_ñÑ]*)/,/^(?:(.))/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gram_xquery;
exports.Parser = gram_xquery.Parser;
exports.parse = function () { return gram_xquery.parse.apply(gram_xquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}