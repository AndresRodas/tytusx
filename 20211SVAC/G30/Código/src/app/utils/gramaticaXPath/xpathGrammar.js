/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xpathGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,7],$V5=[1,10],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,21],$Vf=[1,22],$Vg=[1,23],$Vh=[1,24],$Vi=[1,25],$Vj=[2,5,7,9,10,12,14,47,48,49,50,51,52,53,54,55,56,57,58,59],$Vk=[1,33],$Vl=[1,34],$Vm=[1,29],$Vn=[1,30],$Vo=[1,31],$Vp=[1,35],$Vq=[1,36],$Vr=[2,5,10,12,14,47,48,49,50,51,52,53,54,55,56,57,58,59],$Vs=[2,18],$Vt=[1,39],$Vu=[1,40],$Vv=[1,41],$Vw=[1,46],$Vx=[1,78],$Vy=[1,74],$Vz=[1,73],$VA=[1,69],$VB=[1,67],$VC=[1,70],$VD=[1,71],$VE=[1,72],$VF=[1,75],$VG=[1,76],$VH=[1,97],$VI=[1,95],$VJ=[1,96],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[1,104],$VR=[1,105],$VS=[1,106],$VT=[1,107],$VU=[18,22,26,27,28,29,30,31,32,33,34,35,36,37,38],$VV=[2,5,7,9,10,12,14,17,18,22,26,27,28,29,30,31,32,33,34,35,36,37,38,47,48,49,50,51,52,53,54,55,56,57,58,59],$VW=[2,5,7,9,10,12,14,17,18,22,24,26,27,28,29,30,31,32,33,34,35,36,37,38,47,48,49,50,51,52,53,54,55,56,57,58,59],$VX=[22,26,27,28,30,31,32,33,34,35],$VY=[18,22,26,27,28,29,30,31,32,33,34,35],$VZ=[22,26,30,31],$V_=[22,26,30,31,32,33,34,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"instrucciones":4,"EOF":5,"primero":6,"//":7,"segundo":8,"/":9,".":10,"Barritas":11,"..":12,"sinBarritas":13,"ID":14,"specs":15,"Axes":16,"|":17,"*":18,"@":19,"text":20,"(":21,")":22,"node":23,"[":24,"expr":25,"]":26,"+":27,"-":28,"div":29,"=":30,"!=":31,"<":32,"<=":33,">":34,">=":35,"or":36,"and":37,"mod":38,"ident":39,"position":40,"last":41,"NUMBER":42,"cadena":43,"nombre":44,"::":45,"predicado":46,"ancestor":47,"ancestor-or-self":48,"attribute":49,"child":50,"descendant":51,"descendant-or-self":52,"following":53,"following-sibling":54,"namespace":55,"parent":56,"preceding":57,"preceding-sibling":58,"self":59,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"//",9:"/",10:".",12:"..",14:"ID",17:"|",18:"*",19:"@",20:"text",21:"(",22:")",23:"node",24:"[",26:"]",27:"+",28:"-",29:"div",30:"=",31:"!=",32:"<",33:"<=",34:">",35:">=",36:"or",37:"and",38:"mod",40:"position",41:"last",42:"NUMBER",43:"cadena",45:"::",47:"ancestor",48:"ancestor-or-self",49:"attribute",50:"child",51:"descendant",52:"descendant-or-self",53:"following",54:"following-sibling",55:"namespace",56:"parent",57:"preceding",58:"preceding-sibling",59:"self"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[13,2],[13,1],[13,2],[13,3],[13,2],[11,2],[11,2],[11,2],[11,0],[8,3],[8,3],[8,2],[8,2],[8,3],[8,3],[8,2],[8,2],[8,2],[8,3],[8,2],[8,3],[8,2],[8,3],[8,3],[15,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,1],[39,3],[39,3],[39,3],[39,3],[39,2],[39,2],[39,1],[39,1],[39,1],[39,1],[39,1],[16,3],[16,4],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[46,1],[46,1],[46,3],[46,3],[46,3],[46,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST y todo lo demás
        this.$ = {
            final: new NodoFinal('INICIO', [$$[$0-1].final])
        };
        const gramaticarecorrida = '';
        const raiz = this.$.final
        console.log('XPATH completo! :D');
        const miPaquete = new Paquete(errores, tokensF, raiz, gramaticarecorrida);        
		return miPaquete;
	
break;
case 2:

                                    this.$ = {
                                        final: new NodoFinal('INSTRUCCIONES', [$$[$0-1].final, $$[$0].final])
                                    };
                                    
                                
break;
case 3:

                                    this.$ = {
                                        final: $$[$0].final,
                                    };
                                
break;
case 4:

                                this.$ = {
                                    final: new NodoFinal('NODO', [new NodoFinal($$[$0-1], []), $$[$0].final])
                                };                                
                                tokenss.push(new Token($$[$0-1], '//'));                                
                            
break;
case 5:

                                this.$ = {
                                    final: new NodoFinal('NODO', [new NodoFinal($$[$0-1], []), $$[$0].final])
                                };
                                tokenss.push(new Token($$[$0-1], '/')); 
                            
break;
case 6:

                                this.$ = {
                                    final: new NodoFinal('NODO', [new NodoFinal($$[$0-1], []), $$[$0].final])
                                };
                                tokenss.push(new Token($$[$0-1], '.')); 
                            
break;
case 7:

                                this.$ = {
                                    final: new NodoFinal('NODO', [new NodoFinal($$[$0-1], []), $$[$0].final])
                                };
                                tokenss.push(new Token($$[$0-1], '..')); 
                            
break;
case 8:

                                this.$ = {
                                    final: $$[$0].final,
                                };
                            
break;
case 9:

                this.$ = $$[$0-1];
                this._$.first_column = _$[$0-1].first_column;
                this._$.first_line = _$[$0-1].first_line;                
                if($$[$0-1] != ''){
                
                contaerrores++;
                console.log('Sintáctico ->', $$[$0-1], _$[$0-1].first_column,",",_$[$0-1].first_line);
                var alo = 'No se esperaba el caracter de: ';
                alo += $$[$0-1];
                errores.push(new Excepcion('Sintáctico', _$[$0-1].first_line, _$[$0-1].first_column, alo));
                }
                
            
break;
case 10: case 12:

                                this.$ = {
                                    final: new NodoFinal('ID', [new NodoFinal($$[$0-1], []), $$[$0].final])
                                };
                                tokenss.push(new Token($$[$0-1], 'ID')); 
                            
break;
case 11:

                                this.$ = {
                                    final: new NodoFinal('ID', [new NodoFinal($$[$0], [])])
                                };
                                tokenss.push(new Token($$[$0], 'ID')); 
                            
break;
case 13: case 19:

                                this.$ = {
                                    final: new NodoFinal('ID', [new NodoFinal($$[$0-2], []), $$[$0-1].final, $$[$0].final])
                                };
                            
break;
case 14:

                                this.$ = {
                                    final: new NodoFinal('AXE', [$$[$0-1].final, $$[$0].final]),
                                };
                            
break;
case 15: case 16: case 29: case 31:

                                this.$ = {
                                    final: new NodoFinal('NODO', [new NodoFinal($$[$0-1], []), $$[$0].final])
                                };
                            
break;
case 17:

                                this.$ = {
                                    final: new NodoFinal('AND', [new NodoFinal($$[$0-1], []), $$[$0].final])
                                };
                            
break;
case 18:

                                this.$ = {
                                    final: new NodoFinal('EOF', [new NodoFinal('EOF', [])])
                                };
                            
break;
case 20:

                                this.$ = {
                                    final: new NodoFinal('ALL', [new NodoFinal($$[$0-2], []), $$[$0-1].final, $$[$0].final])
                                };
                            
break;
case 21:

                                this.$ = {
                                    final: new NodoFinal('ALL', [new NodoFinal($$[$0-1], []), $$[$0].final])
                                };
                            
break;
case 22:

                                this.$ = {
                                    final: new NodoFinal('ID', [new NodoFinal($$[$0-1], []), $$[$0].final])
                                };
                            
break;
case 23: case 24:

                                this.$ = {
                                    final: new NodoFinal('Atributos', [new NodoFinal($$[$0-2], []), new NodoFinal($$[$0-1], []), $$[$0].final])
                                };
                            
break;
case 25:

                                this.$ = {
                                    final: new NodoFinal('Atributo', [new NodoFinal($$[$0-1], []), new NodoFinal($$[$0], [])])
                                };
                            
break;
case 26:

                                this.$ = {
                                    final: new NodoFinal('Atributos', [new NodoFinal($$[$0-1], []), new NodoFinal($$[$0], [])])
                                };
                            
break;
case 27:

                                this.$ = {
                                    final: new NodoFinal('AXE', [$$[$0-1].final, $$[$0].final])
                                };
                            
break;
case 28: case 30:

                                this.$ = {
                                    final: new NodoFinal('NODO', [new NodoFinal($$[$0-2], []), $$[$0-1].final, $$[$0].final])
                                };
                            
break;
case 32:

                                this.$ = {
                                    final: new NodoFinal('F_TEXT', [new NodoFinal($$[$0-2], []), new NodoFinal($$[$0-1], []), new NodoFinal($$[$0], [])])
                                };
                            
break;
case 33:

                                this.$ = {
                                    final: new NodoFinal('F_NODE', [new NodoFinal($$[$0-2], []), new NodoFinal($$[$0-1], []), new NodoFinal($$[$0], [])])
                                };
                            
break;
case 34:

                        this.$ = {
                            final: new NodoFinal('specs', [new NodoFinal($$[$0-2], []), $$[$0-1].final, new NodoFinal($$[$0], [])])
                        };
                    
break;
case 35:

                            this.$ = {
                                final: new NodoFinal('expr', [new NodoFinal($$[$0-2], []), $$[$0-1].final, new NodoFinal($$[$0], [])])
                            };
                            tokenss.push(new Token($$[$0-1], $$[$0-1]));
                        
break;
case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48:

                            this.$ = {
                                final: new NodoFinal('expr', [$$[$0-2].final, new NodoFinal($$[$0-1], []), $$[$0].final])
                            };
                            tokenss.push(new Token($$[$0-1], $$[$0-1]));
                        
break;
case 49:

                            this.$ = {
                                final: new NodoFinal('ID', [$$[$0].final])
                            };
                        
break;
case 50:
                                
                            this.$ = {
                                final: new NodoFinal('f_text', [new NodoFinal($$[$0-2], []), new NodoFinal($$[$0-1], []), new NodoFinal($$[$0], [])])
                            }; 
                            tokenss.push(new Token($$[$0-2], 'text'));
                            tokenss.push(new Token($$[$0-1], '('));
                            tokenss.push(new Token($$[$0], ')'));
                        
break;
case 51:
                                
                            this.$ = {
                                final: new NodoFinal('f_node', [new NodoFinal($$[$0-2], []), new NodoFinal($$[$0-1], []), new NodoFinal($$[$0], [])])
                            }; 
                            tokenss.push(new Token($$[$0-2], 'node'));
                            tokenss.push(new Token($$[$0-1], '('));
                            tokenss.push(new Token($$[$0], ')'));
                        
break;
case 52:
                                
                            this.$ = {
                                final: new NodoFinal('f_position', [new NodoFinal($$[$0-2], []), new NodoFinal($$[$0-1], []), new NodoFinal($$[$0], [])])
                            }; 
                            tokenss.push(new Token($$[$0-2], 'position'));
                            tokenss.push(new Token($$[$0-1], '('));
                            tokenss.push(new Token($$[$0], ')'));
                        
break;
case 53:
                                
                            this.$ = {
                                final: new NodoFinal('f_last', [new NodoFinal($$[$0-2], []), new NodoFinal($$[$0-1], []), new NodoFinal($$[$0], [])])
                            }; 
                            tokenss.push(new Token($$[$0-2], 'last'));
                            tokenss.push(new Token($$[$0-1], '('));
                            tokenss.push(new Token($$[$0], ')'));
                            
                        
break;
case 54:
                                
                            this.$ = {
                                final: new NodoFinal('Atributo', [new NodoFinal($$[$0-1], []), new NodoFinal($$[$0], [])])
                            }; 
                            tokenss.push(new Token($$[$0-1], '@')); 
                            tokenss.push(new Token($$[$0], 'ID')); 
                        
break;
case 55:
                                
                            this.$ = {
                                final: new NodoFinal('Atributos', [new NodoFinal($$[$0-1], []), new NodoFinal($$[$0], [])])
                            }; 
                            tokenss.push(new Token($$[$0-1], '@')); 
                            tokenss.push(new Token($$[$0], '*')); 
                        
break;
case 56:
                                
                            this.$ = {
                                final: new NodoFinal('ID', [new NodoFinal($$[$0], [])])
                            }; 
                            tokenss.push(new Token($$[$0], 'ID')); 
                        
break;
case 57:
                                
                            this.$ = {
                                final: new NodoFinal('Numero', [new NodoFinal($$[$0], [])])                                
                            }; 
                            tokenss.push(new Token($$[$0], 'numero')); 
                        
break;
case 58:
                                
                            this.$ = {
                                final: new NodoFinal('Cadena', [new NodoFinal($$[$0], [])])
                            }; 
                            tokenss.push(new Token($$[$0], 'cadena')); 
                        
break;
case 59:

                            this.$ = {
                                final: $$[$0].final,
                            };
                        
break;
case 60:

                this.$ = $$[$0];
                this._$.first_column = _$[$0].first_column;
                this._$.first_line = _$[$0].first_line;                
                if($$[$0] != ''){
                
                contaerrores++;
                console.log('Sintáctico ->', $$[$0], _$[$0].first_column,",",_$[$0].first_line);
                var alo = 'No se esperaba el caracter de: ';
                alo += $$[$0];
                errores.push(new Excepcion('Sintáctico', _$[$0].first_line, _$[$0].first_column, alo));
                }
                
            
break;
case 61:

                                        this.$ = {
                                           final: new NodoFinal('AXE', [$$[$0-2].final, new NodoFinal($$[$0-1], []), $$[$0].final])
                                        };
                                        tokenss.push(new Token($$[$0-1], '::')); 
                                    
break;
case 62:

                                        this.$ = {
                                           final: new NodoFinal('AXE', [$$[$0-3].final, new NodoFinal($$[$0-2], []), $$[$0-1].final, $$[$0].final])
                                        };
                                        tokenss.push(new Token($$[$0-2], '::')); 
                                    
break;
case 63:
                                
                                this.$ = {
                                final: new NodoFinal('PR_ancestor', [new NodoFinal($$[$0], [])])
                                }; 
                                tokenss.push(new Token($$[$0], 'ancestor')); 
                            
break;
case 64:
                                
                                this.$ = {
                                final: new NodoFinal('PR_ancestor-or-self', [new NodoFinal($$[$0], [])])
                                }; 
                                tokenss.push(new Token($$[$0], 'ancestor-or-self'));  
                            
break;
case 65:
                                
                                this.$ = {
                                final: new NodoFinal('PR_attribute', [new NodoFinal($$[$0], [])])
                                }; 
                                tokenss.push(new Token($$[$0], 'attribute'));  
                            
break;
case 66:
                                
                                this.$ = {
                                    final: new NodoFinal('PR_child', [new NodoFinal($$[$0], [])])
                                }; 
                                tokenss.push(new Token($$[$0], 'child'));  
                            
break;
case 67:
                                
                                this.$ = {
                                    final: new NodoFinal('PR_descendant', [new NodoFinal($$[$0], [])])
                                }; 
                                tokenss.push(new Token($$[$0], 'descendant'));  
                            
break;
case 68:
                                
                                this.$ = {
                                    final: new NodoFinal('PR_descendant-or-self', [new NodoFinal($$[$0], [])])
                                }; 
                                tokenss.push(new Token($$[$0], 'descendant-or-self'));  
                            
break;
case 69:
                                
                                this.$ = {
                                    final: new NodoFinal('PR_following', [new NodoFinal($$[$0], [])])
                                }; 
                                tokenss.push(new Token($$[$0], 'following'));  
                            
break;
case 70:
                                
                                this.$ = {
                                    final: new NodoFinal('PR_following-sibling', [new NodoFinal($$[$0], [])])
                                }; 
                                tokenss.push(new Token($$[$0], 'following-sibling'));  
                            
break;
case 71:
                                
                                this.$ = {
                                    final: new NodoFinal('PR_namespace', [new NodoFinal($$[$0], [])])
                                }; 
                                tokenss.push(new Token($$[$0], 'namespace'));  
                            
break;
case 72:
                                
                                this.$ = {
                                    final: new NodoFinal('PR_parent', [new NodoFinal($$[$0], [])])
                                }; 
                                tokenss.push(new Token($$[$0], 'parent'));  
                            
break;
case 73:
                                
                                this.$ = {
                                    final: new NodoFinal('PR_preceding', [new NodoFinal($$[$0], [])])
                                }; 
                                tokenss.push(new Token($$[$0], 'preceeding'));  
                            
break;
case 74:
                                
                                this.$ = {
                                    final: new NodoFinal('PR_preceding-sibling', [new NodoFinal($$[$0], [])])
                                }; 
                                tokenss.push(new Token($$[$0], 'preceding-sibling')); 
                            
break;
case 75:

                                this.$ = {
                                    final: new NodoFinal('PR_SELF', [new NodoFinal($$[$0], [])])
                                };   
                                tokenss.push(new Token($$[$0], 'self'));                             
                            
break;
case 76:

                            this.$ = {
                                final: new NodoFinal('ALL', [new NodoFinal($$[$0], [])])
                            };
                            tokenss.push(new Token($$[$0], '*'));
                        
break;
case 77:

                            this.$ = {
                                final: new NodoFinal('ID', [new NodoFinal($$[$0], [])])
                            };
                            tokenss.push(new Token($$[$0], 'ID'));
                        
break;
case 78:

                            this.$ = {
                                final: new NodoFinal('F_TEXT', [new NodoFinal('text', []),new NodoFinal('(', []),new NodoFinal(')', [])])
                            };
                            tokenss.push(new Token($$[$0-2], 'text'));
                            tokenss.push(new Token($$[$0-1], '('));
                            tokenss.push(new Token($$[$0], ')'));
                        
break;
case 79:

                            this.$ = {
                                final: new NodoFinal('F_NODE', [new NodoFinal('node', []),new NodoFinal('(', []),new NodoFinal(')', [])])
                            };
                            tokenss.push(new Token($$[$0-2], 'node'));
                            tokenss.push(new Token($$[$0-1], '('));
                            tokenss.push(new Token($$[$0], ')'));
                        
break;
case 80:

                            this.$ = {
                                final: new NodoFinal('F_POSITION', [new NodoFinal('final', []),new NodoFinal('(', []),new NodoFinal(')', [])])
                            };
                            tokenss.push(new Token($$[$0-2], 'final'));
                            tokenss.push(new Token($$[$0-1], '('));
                            tokenss.push(new Token($$[$0], ')'));
                        
break;
case 81:

                            this.$ = {
                                final: new NodoFinal('F_LAST', [new NodoFinal('last', []),new NodoFinal('(', []),new NodoFinal(')', [])])
                            };
                            tokenss.push(new Token($$[$0-2], 'last'));
                            tokenss.push(new Token($$[$0-1], '('));
                            tokenss.push(new Token($$[$0], ')'));
                        
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,9:$V2,10:$V3,12:$V4,13:8,14:$V5,16:11,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{1:[3]},{2:$V0,5:[1,26],6:27,7:$V1,9:$V2,10:$V3,12:$V4,13:8,14:$V5,16:11,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},o($Vj,[2,3]),{8:28,10:$Vk,12:$Vl,14:$Vm,16:32,18:$Vn,19:$Vo,20:$Vp,23:$Vq,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{8:37,10:$Vk,12:$Vl,14:$Vm,16:32,18:$Vn,19:$Vo,20:$Vp,23:$Vq,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},o($Vr,$Vs,{11:38,7:$Vt,9:$Vu,17:$Vv}),o($Vr,$Vs,{11:42,7:$Vt,9:$Vu,17:$Vv}),o($Vj,[2,8]),o($Vr,$Vs,{11:43,7:$Vt,9:$Vu,17:$Vv}),o($Vr,[2,11],{11:44,15:45,7:$Vt,9:$Vu,17:$Vv,24:$Vw}),o($Vr,$Vs,{11:47,7:$Vt,9:$Vu,17:$Vv}),{45:[1,48]},{45:[2,63]},{45:[2,64]},{45:[2,65]},{45:[2,66]},{45:[2,67]},{45:[2,68]},{45:[2,69]},{45:[2,70]},{45:[2,71]},{45:[2,72]},{45:[2,73]},{45:[2,74]},{45:[2,75]},{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,4]),o($Vr,$Vs,{15:49,11:50,7:$Vt,9:$Vu,17:$Vv,24:$Vw}),o($Vr,$Vs,{15:51,11:52,7:$Vt,9:$Vu,17:$Vv,24:$Vw}),{14:[1,53],18:[1,54]},o($Vr,$Vs,{11:55,7:$Vt,9:$Vu,17:$Vv}),o($Vr,$Vs,{15:56,11:57,7:$Vt,9:$Vu,17:$Vv,24:$Vw}),o($Vr,$Vs,{15:58,11:59,7:$Vt,9:$Vu,17:$Vv,24:$Vw}),{21:[1,60]},{21:[1,61]},o($Vj,[2,5]),o($Vj,[2,6]),{8:62,10:$Vk,12:$Vl,14:$Vm,16:32,18:$Vn,19:$Vo,20:$Vp,23:$Vq,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{8:63,10:$Vk,12:$Vl,14:$Vm,16:32,18:$Vn,19:$Vo,20:$Vp,23:$Vq,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{2:$V0,6:64,7:$V1,9:$V2,10:$V3,12:$V4,13:8,14:$V5,16:11,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},o($Vj,[2,7]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vr,[2,12],{11:65,7:$Vt,9:$Vu,17:$Vv}),{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:66,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},o($Vj,[2,14]),{14:[1,81],18:[1,80],20:[1,82],23:[1,83],40:[1,84],41:[1,85],46:79},o($Vr,$Vs,{11:86,7:$Vt,9:$Vu,17:$Vv}),o($Vj,[2,22]),o($Vr,$Vs,{11:87,7:$Vt,9:$Vu,17:$Vv}),o($Vj,[2,21]),o($Vj,[2,25],{15:88,24:$Vw}),o($Vj,[2,26],{15:89,24:$Vw}),o($Vj,[2,27]),o($Vr,$Vs,{11:90,7:$Vt,9:$Vu,17:$Vv}),o($Vj,[2,29]),o($Vr,$Vs,{11:91,7:$Vt,9:$Vu,17:$Vv}),o($Vj,[2,31]),{22:[1,92]},{22:[1,93]},o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,13]),{18:$VH,26:[1,94],27:$VI,28:$VJ,29:$VK,30:$VL,31:$VM,32:$VN,33:$VO,34:$VP,35:$VQ,36:$VR,37:$VS,38:$VT},{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:108,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},o($VU,[2,49]),{21:[1,109]},{21:[1,110]},{21:[1,111]},{21:[1,112]},{14:[1,113],18:[1,114]},o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VU,[2,60]),o($VV,[2,61],{15:115,24:$Vw}),o($VW,[2,76]),o($VW,[2,77]),{21:[1,116]},{21:[1,117]},{21:[1,118]},{21:[1,119]},o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,28]),o($Vj,[2,30]),o($Vj,[2,32]),o($Vj,[2,33]),o($VV,[2,34]),{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:120,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:121,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:122,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:123,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:124,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:125,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:126,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:127,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:128,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:129,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:130,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:131,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{2:$Vx,14:$Vy,16:77,19:$Vz,20:$VA,21:$VB,23:$VC,25:132,39:68,40:$VD,41:$VE,42:$VF,43:$VG,44:12,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{18:$VH,22:[1,133],27:$VI,28:$VJ,29:$VK,30:$VL,31:$VM,32:$VN,33:$VO,34:$VP,35:$VQ,36:$VR,37:$VS,38:$VT},{22:[1,134]},{22:[1,135]},{22:[1,136]},{22:[1,137]},o($VU,[2,54]),o($VU,[2,55]),o($VV,[2,62]),{22:[1,138]},{22:[1,139]},{22:[1,140]},{22:[1,141]},o($VX,[2,36],{18:$VH,29:$VK,36:$VR,37:$VS,38:$VT}),o($VX,[2,37],{18:$VH,29:$VK,36:$VR,37:$VS,38:$VT}),o($VY,[2,38],{36:$VR,37:$VS,38:$VT}),o($VY,[2,39],{36:$VR,37:$VS,38:$VT}),o($VZ,[2,40],{18:$VH,27:$VI,28:$VJ,29:$VK,32:$VN,33:$VO,34:$VP,35:$VQ,36:$VR,37:$VS,38:$VT}),o($VZ,[2,41],{18:$VH,27:$VI,28:$VJ,29:$VK,32:$VN,33:$VO,34:$VP,35:$VQ,36:$VR,37:$VS,38:$VT}),o($V_,[2,42],{18:$VH,27:$VI,28:$VJ,29:$VK,36:$VR,37:$VS,38:$VT}),o($V_,[2,43],{18:$VH,27:$VI,28:$VJ,29:$VK,36:$VR,37:$VS,38:$VT}),o($V_,[2,44],{18:$VH,27:$VI,28:$VJ,29:$VK,36:$VR,37:$VS,38:$VT}),o($V_,[2,45],{18:$VH,27:$VI,28:$VJ,29:$VK,36:$VR,37:$VS,38:$VT}),o([18,22,26,27,28,29,30,31,32,33,34,35,36],[2,46],{37:$VS,38:$VT}),o([18,22,26,27,28,29,30,31,32,33,34,35,36,37],[2,47],{38:$VT}),o($VU,[2,48]),o($VU,[2,35]),o($VU,[2,50]),o($VU,[2,51]),o($VU,[2,52]),o($VU,[2,53]),o($VW,[2,78]),o($VW,[2,79]),o($VW,[2,80]),o($VW,[2,81])],
defaultActions: {13:[2,63],14:[2,64],15:[2,65],16:[2,66],17:[2,67],18:[2,68],19:[2,69],20:[2,70],21:[2,71],22:[2,72],23:[2,73],24:[2,74],25:[2,75],26:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


    /*Acá importo mis cosas errores, tokens para la tabla de símbolos y eso*/

    const { Excepcion } = require('src/app/models/excepcion.model');
    const { tipoToken } = require('src/app/models/xpathTipo.model');
    const { ambitoToken } = require('src/app/models/xpathTipo.model');
    const { Paquete } = require('src/app/models/reportes.model');
    const { NodoFinal } = require('src/app/models/AST/nodoAST.model');
    const { Token } = require('src/app/models/token.model');

    
    var ambito = '';
    var profundidad = 0;

    var errores = [];
    var contaerrores = 0;
    var contatokens = 0;
    var tokenss = [];

    var tokensF = [];

    var specabierto = false;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1: tokensF.push(new Token('1111', 'NUMBER'));
                        return 42;
break;
case 2: tokensF.push(new Token('//', '//'));
                        return 7;
break;
case 3: tokensF.push(new Token('/', '/'));
                        return 9;
break;
case 4: tokensF.push(new Token('cadena', 'cadena'));
                        return 43;
break;
case 5: tokensF.push(new Token('cadena', 'cadena'));
                        return 43;
break;
case 6: tokensF.push(new Token('[', '['));
                        return 24;
break;
case 7: tokensF.push(new Token(']', ']'));
                        return 26;
break;
case 8: tokensF.push(new Token('(', '('));
                        return 21;
break;
case 9: tokensF.push(new Token(')', ')'));
                        return 22;
break;
case 10: tokensF.push(new Token('|', '|'));
                        return 17;
break;
case 11: tokensF.push(new Token('+', '+'));
                        return 27;
break;
case 12: tokensF.push(new Token('-', '-'));
                        return 28;
break;
case 13: tokensF.push(new Token('*', '*'));
                        return 18;
break;
case 14: tokensF.push(new Token('div', 'div'));
                        return 29;
break;
case 15: tokensF.push(new Token('=', '='));
                        return 30;
break;
case 16: tokensF.push(new Token('!=', '!='));
                        return 31;
break;
case 17: tokensF.push(new Token('<=', '<='));
                        return 33;
break;
case 18: tokensF.push(new Token('<', '<'));
                        return 32;
break;
case 19: tokensF.push(new Token('>=', '>='));
                        return 35;
break;
case 20: tokensF.push(new Token('>', '>'));
                        return 34;
break;
case 21: tokensF.push(new Token('or', 'or'));
                        return 36;
break;
case 22: tokensF.push(new Token('and', 'and'));
                        return 37;
break;
case 23: tokensF.push(new Token('mod', 'mod'));
                        return 38;
break;
case 24: tokensF.push(new Token('@', '@'));
                        return 19;
break;
case 25: tokensF.push(new Token('\'', '\''));
                        return '\'';
break;
case 26: tokensF.push(new Token('\"', '\"'));
                        return '\"';
break;
case 27: tokensF.push(new Token('ancestor-or-self', 'ancestor-or-self'));
                        return 48;
break;
case 28: tokensF.push(new Token('ancestor', 'ancestor'));
                        return 47;
break;
case 29: tokensF.push(new Token('attribute', 'attribute'));
                        return 49;
break;
case 30: tokensF.push(new Token('child', 'child'));
                        return 50;
break;
case 31: tokensF.push(new Token('descendant-or-self', 'descendant-or-self'));
                        return 52;
break;
case 32: tokensF.push(new Token('descendant', 'descendant'));
                        return 51;
break;
case 33: tokensF.push(new Token('following-or-sibling', 'following-or-sibling'));
                        return 'following-or-sibling';
break;
case 34: tokensF.push(new Token('following', 'following'));
                        return 53;
break;
case 35: tokensF.push(new Token('namespace', 'namespace'));
                        return 55;
break;
case 36: tokensF.push(new Token('parent', 'parent'));
                        return 56;
break;
case 37: tokensF.push(new Token('preceding-sibling', 'preceding-sibling'));
                        return 58;
break;
case 38: tokensF.push(new Token('preceding', 'preceding'));
                        return 57;
break;
case 39: tokensF.push(new Token('self', 'self'));
                        return 59;
break;
case 40: tokensF.push(new Token('text', 'text'));
                        return 20;
break;
case 41: tokensF.push(new Token('node', 'node'));
                        return 23;
break;
case 42: tokensF.push(new Token('position', 'position'));
                        return 40;
break;
case 43: tokensF.push(new Token('last', 'last'));
                        return 41;
break;
case 44: tokensF.push(new Token('::', '::'));
                        return 45;
break;
case 45: tokensF.push(new Token('..', '..'));
                        return 12;
break;
case 46: tokensF.push(new Token('.', '.'));
                        return 10;
break;
case 47: tokensF.push(new Token('ID', 'ID'));
                        return 14;
break;
case 48: tokensF.push(new Token('EOF', 'EOF'));
                        return 5;
break;
case 49:
                contaerrores++;                
                errores.push(new Excepcion('Léxico', yy_.yylloc.first_line, yy_.yylloc.first_column, `Patrón desconocido -> ${yy_.yytext}`));
                
                console.log(`Error Léxico: ${yy_.yytext} en la linea ${yy_.yylloc.first_line} y en la columna ${yy_.yylloc.first_column}`);
            
break;
}
},
rules: [/^(?:\s+)/i,/^(?:([0-9]+(\.[0-9]+)?\b))/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:"([^\\\"\n]|\\.)*")/i,/^(?:'([^\\\"\n]|\\.)*')/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:@)/i,/^(?:')/i,/^(?:")/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:text\b)/i,/^(?:node\b)/i,/^(?:position\b)/i,/^(?:last\b)/i,/^(?:::)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xpathGrammar;
exports.Parser = xpathGrammar.Parser;
exports.parse = function () { return xpathGrammar.parse.apply(xpathGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}