/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador_xpath_AST = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[1,25],$V3=[1,26],$V4=[1,27],$V5=[1,28],$V6=[1,29],$V7=[1,8],$V8=[1,9],$V9=[1,10],$Va=[1,11],$Vb=[1,12],$Vc=[1,13],$Vd=[1,14],$Ve=[1,15],$Vf=[1,16],$Vg=[1,17],$Vh=[1,18],$Vi=[1,19],$Vj=[1,20],$Vk=[1,21],$Vl=[1,22],$Vm=[1,23],$Vn=[1,24],$Vo=[2,4],$Vp=[1,32],$Vq=[5,8],$Vr=[5,8,14,17,18,20,21,23,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46],$Vs=[2,57],$Vt=[1,36],$Vu=[2,8],$Vv=[1,40],$Vw=[5,8,14,17,18,20,21,23,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,48],$Vx=[2,99],$Vy=[1,42],$Vz=[1,61],$VA=[1,62],$VB=[1,60],$VC=[1,63],$VD=[1,68],$VE=[1,67],$VF=[1,70],$VG=[1,71],$VH=[1,79],$VI=[1,81],$VJ=[1,82],$VK=[1,78],$VL=[1,80],$VM=[1,83],$VN=[14,17,21,23,27,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46],$VO=[1,109],$VP=[1,107],$VQ=[1,108],$VR=[1,110],$VS=[17,50,54,55,56,57],$VT=[50,54,55,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ELEMENTO":4,"EOF":5,"EXPRESION":6,"ELEMENTO_P":7,"tk_barra_or":8,"RESERVA":9,"RESERVA_P":10,"SIMBOLOS":11,"CAJETIN":12,"SIMBOLOS_P":13,"tk_identificador":14,"SIMBOLOSSECU":15,"SIMBOLOSSECU_P":16,"tk_asterisco":17,"tk_diagonal":18,"CONTENIDODOS":19,"tk_diagonal_doble":20,"tk_arroba":21,"ARROPROD":22,"tk_puntos_seguidos":23,"PRODUCT":24,"tk_punto":25,"CONTENIDO":26,"tk_ancestor":27,"ITEMRESERVA":28,"tk_ancestor_or_self":29,"tk_attribute":30,"tk_child":31,"tk_descendant":32,"tk_descendant_or_self":33,"tk_following":34,"tk_following_sibling":35,"tk_namespace":36,"tk_parent":37,"tk_preceding":38,"tk_preceding_sibling":39,"tk_self":40,"tk_node":41,"tk_parentesis_izq":42,"tk_parentesis_der":43,"tk_last":44,"tk_position":45,"tk_text":46,"CONTENIDO_P":47,"tk_corchete_izq":48,"PREDICADO":49,"tk_corchete_der":50,"DATO":51,"tk_numero":52,"tk_hilera":53,"tk_mas":54,"tk_menos":55,"tk_div":56,"tk_igual":57,"OPERACIONES":58,"ITEMINICIO":59,"OPERADOR":60,"ITEMFINAL":61,"OPERACIONES_L":62,"tk_indiferente":63,"tk_menor_igual":64,"tk_menor":65,"tk_mayor_igual":66,"tk_mayor":67,"tk_mod":68,"tk_caracter":69,"tk_or":70,"tk_and":71,"tk_cuatro_puntos":72,"SIMBOLOSTERC":73,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tk_barra_or",14:"tk_identificador",17:"tk_asterisco",18:"tk_diagonal",20:"tk_diagonal_doble",21:"tk_arroba",23:"tk_puntos_seguidos",25:"tk_punto",27:"tk_ancestor",29:"tk_ancestor_or_self",30:"tk_attribute",31:"tk_child",32:"tk_descendant",33:"tk_descendant_or_self",34:"tk_following",35:"tk_following_sibling",36:"tk_namespace",37:"tk_parent",38:"tk_preceding",39:"tk_preceding_sibling",40:"tk_self",41:"tk_node",42:"tk_parentesis_izq",43:"tk_parentesis_der",44:"tk_last",45:"tk_position",46:"tk_text",48:"tk_corchete_izq",50:"tk_corchete_der",52:"tk_numero",53:"tk_hilera",54:"tk_mas",55:"tk_menos",56:"tk_div",57:"tk_igual",63:"tk_indiferente",64:"tk_menor_igual",65:"tk_menor",66:"tk_mayor_igual",67:"tk_mayor",68:"tk_mod",69:"tk_caracter",70:"tk_or",71:"tk_and",72:"tk_cuatro_puntos"},
productions_: [0,[3,2],[4,2],[7,3],[7,0],[6,2],[6,3],[6,4],[6,1],[6,2],[11,2],[11,2],[11,2],[11,3],[11,3],[11,2],[13,1],[13,0],[15,2],[15,2],[15,2],[15,1],[15,2],[16,1],[16,0],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,3],[9,3],[9,3],[9,3],[10,1],[10,0],[24,1],[24,1],[22,1],[22,1],[26,1],[19,2],[19,1],[19,1],[19,1],[19,1],[47,1],[47,0],[12,3],[12,0],[49,1],[51,1],[51,1],[51,1],[51,2],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,2],[58,4],[58,1],[59,1],[59,1],[59,2],[59,1],[59,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[61,1],[61,1],[61,1],[61,1],[61,2],[61,1],[62,2],[62,2],[62,3],[62,0],[28,2],[28,0],[73,1],[73,1],[73,1],[73,2],[73,2],[73,2],[73,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
this.$= new Nodo("Porduccion","ELEMENTO",[ $$[$0-1] ,$$[$0]] );
break;
case 3:
this.$= new Nodo("Porduccion","ELEMENTO_P",[ $$[$0-2] ,$$[$0-1],$$[$0]] );
break;
case 4: case 17: case 24: case 43: case 55: case 57: case 99:
this.$= new Nodo("Porduccion","ITEMRESERVA",[ "Îµ" ] );
break;
case 5:
this.$= new Nodo("Porduccion","EXPRESION",[ $$[$0-1] ,$$[$0]] );
break;
case 6:
this.$= new Nodo("Porduccion","EXPRESION",[ $$[$0-2], $$[$0-1] ,$$[$0]] );
break;
case 7:
this.$= new Nodo("Porduccion","EXPRESION",[ $$[$0-3] ,$$[$0-2], $$[$0-1], $$[$0]] );
break;
case 8:
this.$= new Nodo("Porduccion","EXPRESION",[ $$[$0] ] );
break;
case 9:
this.$= new Nodo("Porduccion","EXPRESION",[ $$[$0-1], $$[$0] ] );
break;
case 10: case 11: case 15:
this.$= new Nodo("Porduccion","SIMBOLOS",[ $$[$0-1] ,$$[$0]] );
break;
case 12:
this.$= new Nodo("Porduccion","SIMBOLOS",[ $$[$0-1],$$[$0] ] );
break;
case 13:
this.$= new Nodo("Porduccion","SIMBOLOS",[ $$[$0-2], $$[$0-1] ,$$[$0]] );
break;
case 14:
this.$= new Nodo("Porduccion","SIMBOLOS",[ $$[$0-2],$$[$0-1] ,$$[$0]] );
break;
case 16: case 23: case 42: case 54: case 58: case 59: case 72: case 88: case 102:
this.$= $$[$0];
break;
case 18: case 19: case 20: case 22:
this.$= new Nodo("Porduccion","SIMBOLOSSECU",[ $$[$0-1], $$[$0] ] );
break;
case 21:
this.$= new Nodo("Porduccion","SIMBOLOSSECU",[ $$[$0] ] );
break;
case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37:
this.$= new Nodo("Porduccion","RESERVA",[$$[$0-1], $$[$0] ] );
break;
case 38: case 39: case 40: case 41:
this.$= new Nodo("Porduccion","RESERVA",[$$[$0-2], $$[$0-1], $$[$0] ] );
break;
case 44: case 45:
this.$= new Nodo("Porduccion","PRODUCT",[$$[$0] ] );
break;
case 46: case 47:
this.$= new Nodo("Porduccion","ARROPROD",[$$[$0] ] );
break;
case 48:
this.$= new Nodo("Porduccion","CONTENIDO",[$$[$0] ] );
break;
case 49:
this.$= new Nodo("Porduccion","CONTENIDODOS",[ $$[$0-1], $$[$0]] );
break;
case 50: case 51: case 52: case 53:
this.$= new Nodo("Porduccion","CONTENIDODOS",[ $$[$0]] );
break;
case 56:
this.$= new Nodo("Porduccion","CAJETIN",[$$[$0-2], $$[$0-1], $$[$0] ] );
break;
case 60:
this.$= new Nodo("Porduccion","ID",[$$[$0]]);
break;
case 61:
this.$= new Nodo("Porduccion","CADENA",[$$[$0].slice(1,-1)]);
break;
case 62:
this.$= new Nodo("Porduccion","ATRIBUTO",[$$[$0]]);
break;
case 63:
this.$= new Nodo("Porduccion","LAST",[]);
break;
case 64:
this.$= new Nodo("Porduccion","SUM",[$$[$0-2],$$[$0-1],$$[$0]]);
break;
case 65:
this.$= new Nodo("Porduccion","RES",[ $$[$0-2],$$[$0-1],$$[$0]]);
break;
case 66:
this.$= new Nodo("Porduccion","MUL",[ $$[$0-2],$$[$0-1],$$[$0]]);
break;
case 67:
this.$= new Nodo("Porduccion","DIV",[ $$[$0-2],$$[$0-1],$$[$0]]);
break;
case 68:
this.$= new Nodo("Porduccion","IGUAL",[ $$[$0-2],$$[$0-1],$$[$0]]);
break;
case 69:
this.$= new Nodo("Porduccion","NEG",[ $$[$0-1],$$[$0]]); 
break;
case 70:
this.$= new Nodo("Porduccion","OPERACIONES",[$$[$0-3], $$[$0-2], $$[$0-1], $$[$0] ] );
break;
case 71:
this.$= new Nodo("Porduccion","OPERACIONES",[$$[$0] ] );
break;
case 73: case 75: case 76:
this.$= new Nodo("Porduccion","ITEMINICIO",[$$[$0] ] );
break;
case 74:
this.$= new Nodo("Porduccion","ITEMINICIO",[$$[$0-1], $$[$0] ] );
break;
case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87:
this.$= new Nodo("Porduccion","OPERADOR",[$$[$0] ] );
break;
case 89: case 91: case 93:
this.$= new Nodo("Porduccion","ITEMFINAL",[ $$[$0]] );
break;
case 90:
this.$= new Nodo("Porduccion","ITEMFINAL",[ $$[$0].slice(1,-1)] );
break;
case 92:
this.$= new Nodo("Porduccion","ITEMFINAL",[ $$[$0-1], $$[$0]] );
break;
case 94: case 95:
this.$= new Nodo("Porduccion","OPERACIONES_L",[ $$[$0-1], $$[$0]] );
break;
case 96:
this.$= new Nodo("Porduccion","OPERACIONES_L",[ $$[$0-2], $$[$0-1], $$[$0]] );
break;
case 97:
this.$= new Nodo("Porduccion","OPERACIONES_L",[ "Îµ" ] );
break;
case 98:
this.$= new Nodo("Porduccion","ITEMRESERVA",[ $$[$0-1], $$[$0]] );
break;
case 100: case 101: case 106:
this.$= new Nodo("Porduccion","SIMBOLOSTERC",[ $$[$0]] );
break;
case 103: case 105:
this.$= new Nodo("Porduccion","SIMBOLOSTERC",[ $$[$0-1], $$[$0]] );
break;
case 104:
this.$= new Nodo("Porduccion","SIMBOLOSTERC",[ $$[$0-1], $$[$0]]);
break;
}
},
table: [{3:1,4:2,6:3,9:4,11:5,14:$V0,17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn},{1:[3]},{5:[1,30]},{5:$Vo,7:31,8:$Vp},o($Vq,[2,43],{9:4,11:5,10:33,6:34,14:$V0,17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn}),o($Vr,$Vs,{12:35,48:$Vt}),o([17,18,20,21,23],$Vs,{12:37,5:$Vu,8:$Vu,48:$Vt}),o($Vq,$Vs,{12:38,26:39,14:$Vv,48:$Vt}),o($Vw,$Vx,{28:41,72:$Vy}),o($Vw,$Vx,{28:43,72:$Vy}),o($Vw,$Vx,{28:44,72:$Vy}),o($Vw,$Vx,{28:45,72:$Vy}),o($Vw,$Vx,{28:46,72:$Vy}),o($Vw,$Vx,{28:47,72:$Vy}),o($Vw,$Vx,{28:48,72:$Vy}),o($Vw,$Vx,{28:49,72:$Vy}),o($Vw,$Vx,{28:50,72:$Vy}),o($Vw,$Vx,{28:51,72:$Vy}),o($Vw,$Vx,{28:52,72:$Vy}),o($Vw,$Vx,{28:53,72:$Vy}),o($Vw,$Vx,{28:54,72:$Vy}),{42:[1,55]},{42:[1,56]},{42:[1,57]},{42:[1,58]},{9:64,14:$Vz,17:$VA,19:59,21:$VB,23:$VC,27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn},{9:64,14:$Vz,17:$VA,19:65,21:$VB,23:$VC,27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn},{14:$VD,17:$VE,22:66},{18:$VF,20:$VG,24:69},{18:$VF,20:$VG,24:72},{1:[2,1]},{5:[2,2]},{6:73,9:4,11:5,14:$V0,17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn},o($Vq,[2,5]),o($Vq,[2,42]),o($Vq,[2,17],{9:4,11:5,13:74,6:75,14:$V0,17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn}),{14:$VH,21:$VI,44:$VJ,49:76,51:77,52:$VK,53:$VL,55:$VM},{15:84,17:[1,89],18:[1,85],20:[1,86],21:[1,87],23:[1,88]},o($Vq,[2,9]),o($Vw,[2,15]),o($Vw,[2,48]),o($Vw,[2,25]),{9:93,14:[1,91],17:[1,92],18:[1,94],20:[1,95],21:[1,96],23:[1,97],27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn,73:90},o($Vw,[2,26]),o($Vw,[2,27]),o($Vw,[2,28]),o($Vw,[2,29]),o($Vw,[2,30]),o($Vw,[2,31]),o($Vw,[2,32]),o($Vw,[2,33]),o($Vw,[2,34]),o($Vw,[2,35]),o($Vw,[2,36]),o($Vw,[2,37]),{43:[1,98]},{43:[1,99]},{43:[1,100]},{43:[1,101]},o($Vw,[2,10]),{14:$VD,17:$VE,22:102},o($Vw,[2,50]),o($Vw,[2,51]),o($Vw,[2,52]),o($Vw,[2,53]),o($Vw,[2,11]),o($Vw,[2,12]),o($Vw,[2,46]),o($Vw,[2,47]),{9:64,14:$Vz,17:$VA,19:103,21:$VB,23:$VC,27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn},o($VN,[2,44]),o($VN,[2,45]),{9:64,14:$Vz,17:$VA,19:104,21:$VB,23:$VC,27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn},{5:$Vo,7:105,8:$Vp},o($Vq,[2,6]),o($Vq,[2,16]),{50:[1,106]},{17:$VO,50:[2,58],54:$VP,55:$VQ,56:$VR,57:[1,111]},o($VS,[2,59]),o($VS,[2,60]),o($VS,[2,61]),{14:[1,112]},{42:[1,113]},{14:$VH,21:$VI,44:$VJ,51:114,52:$VK,53:$VL,55:$VM},o($Vq,[2,24],{9:4,11:5,16:115,6:116,14:$V0,17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn}),{9:64,14:$Vz,17:$VA,19:117,21:$VB,23:$VC,27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn},{9:64,14:$Vz,17:$VA,19:118,21:$VB,23:$VC,27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn},{14:$VD,17:$VE,22:119},o($Vr,[2,21]),{14:$Vv,26:120},o($Vw,[2,98]),o($Vw,[2,100]),o($Vw,[2,101]),o($Vw,[2,102]),{9:64,14:$Vz,17:$VA,19:121,21:$VB,23:$VC,27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn},{9:64,14:$Vz,17:$VA,19:122,21:$VB,23:$VC,27:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,44:$Vl,45:$Vm,46:$Vn},{14:$VD,17:$VE,22:123},o($Vw,[2,106]),o($Vw,[2,38]),o($Vw,[2,39]),o($Vw,[2,40]),o($Vw,[2,41]),o($Vw,[2,49]),o($Vw,[2,13]),o($Vw,[2,14]),{5:[2,3]},o($Vr,[2,56]),{14:$VH,21:$VI,44:$VJ,51:124,52:$VK,53:$VL,55:$VM},{14:$VH,21:$VI,44:$VJ,51:125,52:$VK,53:$VL,55:$VM},{14:$VH,21:$VI,44:$VJ,51:126,52:$VK,53:$VL,55:$VM},{14:$VH,21:$VI,44:$VJ,51:127,52:$VK,53:$VL,55:$VM},{14:$VH,21:$VI,44:$VJ,51:128,52:$VK,53:$VL,55:$VM},o($VS,[2,62]),{43:[1,129]},o($VT,[2,69],{17:$VO,56:$VR}),o($Vq,[2,7]),o($Vq,[2,23]),o($Vr,[2,18]),o($Vr,[2,19]),o($Vr,[2,20]),o($Vr,[2,22]),o($Vw,[2,103]),o($Vw,[2,104]),o($Vw,[2,105]),o($VT,[2,64],{17:$VO,56:$VR}),o($VT,[2,65],{17:$VO,56:$VR}),o($VS,[2,66]),o($VS,[2,67]),o([50,57],[2,68],{17:$VO,54:$VP,55:$VQ,56:$VR}),o($VS,[2,63])],
defaultActions: {30:[2,1],31:[2,2],105:[2,3]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70;
break;
case 3: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 4: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68;
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 56;
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace_node';
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32;
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37;
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 38;
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 27: listaTokens.push(new Token("Barra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 8;
break;
case 28: listaTokens.push(new Token("Suma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 29: listaTokens.push(new Token("Resta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55;
break;
case 30: listaTokens.push(new Token("Asterisco", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 17;
break;
case 31: listaTokens.push(new Token("Indiferente", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63;
break;
case 32: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 57;
break;
case 33: listaTokens.push(new Token("Menor_igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64;
break;
case 34: listaTokens.push(new Token("Menor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 65;
break;
case 35: listaTokens.push(new Token("Mayor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 66;
break;
case 36: listaTokens.push(new Token("Mayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67;
break;
case 37: listaTokens.push(new Token("Cuatro_Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72;
break;
case 38: listaTokens.push(new Token("Diagonal_doble", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 20;
break;
case 39: listaTokens.push(new Token("Division", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 18;
break;
case 40: listaTokens.push(new Token("Arroba", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 21;
break;
case 41: listaTokens.push(new Token("Puntos_Seguidos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23;
break;
case 42: listaTokens.push(new Token("Parentesis_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42;
break;
case 43: listaTokens.push(new Token("Parentesis_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 43;
break;
case 44: listaTokens.push(new Token("Corchete_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_izq";
break;
case 45: listaTokens.push(new Token("Corchete_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_der";
break;
case 46: listaTokens.push(new Token("Punto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 47: listaTokens.push(new Token("Caracter", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_caracter";
break;
case 48: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 49: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 50: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 51: return "EOF"; 
break;
case 52: listaErrores.push(new TokenError("xPATH","ERROR LEXICO","Caracter no reconocido "+ yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:namespace-node\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:!=)/,/^(?:=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:'[^\']*')/,/^(?:"([^\\\"]|\\.)*")/,/^(?:[a-zA-Z_Ã-Ã¿\u00F1\u00D1]([a-zA-ZÃ-Ã¿\-\.\u00F1\u00D10-9_])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador_xpath_AST;
exports.Parser = analizador_xpath_AST.Parser;
exports.parse = function () { return analizador_xpath_AST.parse.apply(analizador_xpath_AST, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}