/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,9],$V3=[1,12],$V4=[1,10],$V5=[1,11],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,18],$Vb=[1,17],$Vc=[5,11,16,17,21,22,23,25,27,29,40,42,43,46],$Vd=[22,31,32,52],$Ve=[2,39],$Vf=[1,30],$Vg=[1,50],$Vh=[1,48],$Vi=[1,49],$Vj=[1,51],$Vk=[9,19],$Vl=[2,41],$Vm=[1,63],$Vn=[14,19],$Vo=[9,14,34,35,36,37,38,39,45,51,52,53,54,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INICIO":4,"EOF":5,"SENTENCIAS":6,"SENTENCIA":7,"DECLARACION":8,"tk_punto_coma":9,"ASIGNACION":10,"tk_void":11,"tk_main":12,"tk_parent_izq":13,"tk_parent_der":14,"tk_llave_izq":15,"tk_llave_der":16,"tk_printf":17,"TIPO_PRINT":18,"tk_coma":19,"VALOR":20,"tk_goto":21,"tk_identificador":22,"tk_if":23,"OP_REL":24,"tk_call":25,"tk_dos_puntos":26,"tk_proc":27,"tk_begin":28,"tk_end":29,"tk_caracter":30,"tk_entero":31,"tk_decimal":32,"tk_hilera":33,"tk_igualdad":34,"tk_desigual":35,"tk_menor_igual":36,"tk_menor":37,"tk_mayor_igual":38,"tk_mayor":39,"tk_double":40,"LISTA_IDS":41,"tk_var":42,"tk_stack":43,"tk_corchete_izq":44,"tk_corchete_der":45,"tk_heap":46,"tk_igual":47,"ASIGNACIONSIGNO":48,"EXP":49,"COMPLEMENTO":50,"tk_suma":51,"tk_resta":52,"tk_asterisco":53,"tk_diagonal":54,"tk_modulo":55,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"tk_punto_coma",11:"tk_void",12:"tk_main",13:"tk_parent_izq",14:"tk_parent_der",15:"tk_llave_izq",16:"tk_llave_der",17:"tk_printf",19:"tk_coma",21:"tk_goto",22:"tk_identificador",23:"tk_if",25:"tk_call",26:"tk_dos_puntos",27:"tk_proc",28:"tk_begin",29:"tk_end",30:"tk_caracter",31:"tk_entero",32:"tk_decimal",33:"tk_hilera",34:"tk_igualdad",35:"tk_desigual",36:"tk_menor_igual",37:"tk_menor",38:"tk_mayor_igual",39:"tk_mayor",40:"tk_double",42:"tk_var",43:"tk_stack",44:"tk_corchete_izq",45:"tk_corchete_der",46:"tk_heap",47:"tk_igual",51:"tk_suma",52:"tk_resta",53:"tk_asterisco",54:"tk_diagonal",55:"tk_modulo"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,1],[7,2],[7,2],[7,7],[7,5],[7,7],[7,3],[7,9],[7,3],[7,2],[7,3],[7,1],[18,1],[18,1],[18,1],[18,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[8,2],[8,4],[8,4],[8,4],[41,3],[41,1],[10,3],[10,6],[10,6],[10,7],[10,7],[48,1],[48,0],[50,3],[50,0],[49,3],[49,3],[49,3],[49,3],[49,3],[49,1],[20,1],[20,1],[20,1],[20,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
this.$= new Nodo("INIC", "INIC" );
	 //console.log($$[$0]);
	 this.$.agregarHijo($$[$0]);
	
break;
case 3:

    this.$= new Nodo("INIC","INIC");
	//console.log("ε");
    this.$.agregarHijo(new Nodo("ε","ε"));
    
break;
case 4:

    this.$= new Nodo("SENS","SENS");
	this.$.agregarHijo($$[$0-1]);
    this.$.agregarHijo($$[$0]);
    
break;
case 5:

    this.$= new Nodo("SENS","SENS");
	this.$.agregarHijo($$[$0]);
	
break;
case 6: case 7:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo($$[$0-1]);
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 8:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
	this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
	this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo($$[$0-1]);
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 9:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo($$[$0-2]);
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 10:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
	this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
	this.$.agregarHijo($$[$0-4]);
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo($$[$0-2]);
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 11: case 13: case 15:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 12:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0-8],$$[$0-8]));
	this.$.agregarHijo(new Nodo($$[$0-7],$$[$0-7]));
	this.$.agregarHijo($$[$0-6]);
	this.$.agregarHijo($$[$0-5]);
	this.$.agregarHijo($$[$0-4]);
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 14:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 16:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 17: case 18: case 19: case 20:

    this.$= new Nodo("TPR","TPR");
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 21: case 22: case 23: case 24: case 25: case 26:

    this.$= new Nodo("OPR","OPR");
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 27:

    this.$= new Nodo("DEC","DEC");
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo($$[$0]);
	
break;
case 28: case 29:

    this.$= new Nodo("DEC","DEC");
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 30:

    this.$= new Nodo("DEC","DEC");
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo($$[$0]);
	
break;
case 31:

    this.$= new Nodo("LID","LID");
	this.$.agregarHijo($$[$0-2]);
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 32:

    this.$= new Nodo("LID","LID");
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 33:

    this.$= new Nodo("ASIG","ASIG");
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo($$[$0-1]);
	this.$.agregarHijo($$[$0]);
	
break;
case 34: case 35:

    this.$= new Nodo("ASIG","ASIG");
	this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
	this.$.agregarHijo($$[$0-4]);
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo($$[$0-1]);
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 36: case 37:

    this.$= new Nodo("ASIG","ASIG");
	this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
	this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
	this.$.agregarHijo($$[$0-4]);
	this.$.agregarHijo($$[$0-3]);
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo($$[$0]);
	
break;
case 38:
this.$= new Nodo("ASIGS", "ASIGS" );
        	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
			
break;
case 39:
this.$= new Nodo("ASIGS", "ASIGS" );
        	this.$.agregarHijo(new Nodo("ε","ε"));
			
break;
case 40:
this.$= new Nodo("COMP", "COMP" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
		this.$.agregarHijo($$[$0-1]);
		this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
		
break;
case 41:
this.$= new Nodo("COMP", "COMP" );
        this.$.agregarHijo(new Nodo("ε","ε"));
		
break;
case 42: case 43: case 44: case 45: case 46:
this.$= new Nodo("EXP", "EXP" );
    this.$.agregarHijo($$[$0-2]);
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo($$[$0]);
	
break;
case 47:
this.$= new Nodo("EXP", "EXP" );
    this.$.agregarHijo($$[$0]);
	
break;
case 48: case 49: case 50:
this.$= new Nodo("VAL", "VAL" );
    this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 51:
this.$= new Nodo("VAL", "VAL" );
    this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo($$[$0]);
	
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,8:5,10:6,11:$V0,17:$V1,21:$V2,22:$V3,23:$V4,25:$V5,27:$V6,29:$V7,40:$V8,42:$V9,43:$Va,46:$Vb},{1:[3]},{5:[1,19]},{5:[2,2],7:20,8:5,10:6,11:$V0,17:$V1,21:$V2,22:$V3,23:$V4,25:$V5,27:$V6,29:$V7,40:$V8,42:$V9,43:$Va,46:$Vb},o($Vc,[2,5]),{9:[1,21]},{9:[1,22]},{12:[1,23]},{13:[1,24]},{22:[1,25]},{13:[1,26]},{22:[1,27]},o($Vd,$Ve,{48:29,26:[1,28],47:$Vf}),{22:[1,31]},o($Vc,[2,16]),o([43,46],$Ve,{41:32,48:33,22:[1,34],47:$Vf}),{22:[1,37],43:[1,35],46:[1,36]},{44:[1,38]},{44:[1,39]},{1:[2,1]},o($Vc,[2,4]),o($Vc,[2,6]),o($Vc,[2,7]),{13:[1,40]},{18:41,30:[1,42],31:[1,43],32:[1,44],33:[1,45]},{9:[1,46]},{20:47,22:$Vg,31:$Vh,32:$Vi,52:$Vj},{9:[1,52]},o($Vc,[2,14]),{20:54,22:$Vg,31:$Vh,32:$Vi,49:53,52:$Vj},o([22,31,32,43,46,52],[2,38]),{28:[1,55]},{9:[2,27],19:[1,56]},{43:[1,58],46:[1,57]},o($Vk,[2,32]),{44:[1,59]},{44:[1,60]},{47:[1,61]},o($Vd,$Vl,{50:62,13:$Vm}),o($Vd,$Vl,{50:64,13:$Vm}),{14:[1,65]},{14:[1,66],19:[1,67]},o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),o($Vn,[2,20]),o($Vc,[2,11]),{24:68,34:[1,69],35:[1,70],36:[1,71],37:[1,72],38:[1,73],39:[1,74]},o($Vo,[2,48]),o($Vo,[2,49]),o($Vo,[2,50]),{20:75,22:$Vg,31:$Vh,32:$Vi,52:$Vj},o($Vc,[2,13]),{9:[2,33]},{9:[2,47],51:[1,76],52:[1,77],53:[1,78],54:[1,79],55:[1,80]},o($Vc,[2,15]),{22:[1,81]},{44:[1,82]},{44:[1,83]},{45:[1,84]},{45:[1,85]},{20:86,22:$Vg,31:$Vh,32:$Vi,52:$Vj},{20:87,22:$Vg,31:$Vh,32:$Vi,52:$Vj},{20:88,22:$Vg,31:$Vh,32:$Vi,52:$Vj},{20:89,22:$Vg,31:$Vh,32:$Vi,52:$Vj},{15:[1,90]},{9:[1,91]},{20:92,22:$Vg,31:$Vh,32:$Vi,52:$Vj},{20:93,22:$Vg,31:$Vh,32:$Vi,52:$Vj},o($Vd,[2,21]),o($Vd,[2,22]),o($Vd,[2,23]),o($Vd,[2,24]),o($Vd,[2,25]),o($Vd,[2,26]),o($Vo,[2,51]),{20:94,22:$Vg,31:$Vh,32:$Vi,52:$Vj},{20:95,22:$Vg,31:$Vh,32:$Vi,52:$Vj},{20:96,22:$Vg,31:$Vh,32:$Vi,52:$Vj},{20:97,22:$Vg,31:$Vh,32:$Vi,52:$Vj},{20:98,22:$Vg,31:$Vh,32:$Vi,52:$Vj},o($Vk,[2,31]),{20:99,22:$Vg,31:$Vh,32:$Vi,52:$Vj},{20:100,22:$Vg,31:$Vh,32:$Vi,52:$Vj},{9:[2,28]},{9:[2,29]},{9:[2,30]},{45:[1,101]},{14:[1,102]},{45:[1,103]},{6:104,7:4,8:5,10:6,11:$V0,17:$V1,21:$V2,22:$V3,23:$V4,25:$V5,27:$V6,29:$V7,40:$V8,42:$V9,43:$Va,46:$Vb},o($Vc,[2,9]),{14:[1,105]},{14:[1,106]},{9:[2,42]},{9:[2,43]},{9:[2,44]},{9:[2,45]},{9:[2,46]},{45:[1,107]},{45:[1,108]},{47:[1,109]},o($Vd,[2,40]),{47:[1,110]},{7:20,8:5,10:6,11:$V0,16:[1,111],17:$V1,21:$V2,22:$V3,23:$V4,25:$V5,27:$V6,29:$V7,40:$V8,42:$V9,43:$Va,46:$Vb},{9:[1,112]},{21:[1,113]},{9:[2,34]},{9:[2,35]},{20:114,22:$Vg,31:$Vh,32:$Vi,52:$Vj},{20:115,22:$Vg,31:$Vh,32:$Vi,52:$Vj},o($Vc,[2,8]),o($Vc,[2,10]),{22:[1,116]},{9:[2,36]},{9:[2,37]},{9:[1,117]},o($Vc,[2,12])],
defaultActions: {19:[2,1],53:[2,33],84:[2,28],85:[2,29],86:[2,30],94:[2,42],95:[2,43],96:[2,44],97:[2,45],98:[2,46],107:[2,34],108:[2,35],114:[2,36],115:[2,37]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};



/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2:
break;
case 3:
break;
case 4:/* IGNORE */
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 11;
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 12;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 43;
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 21;
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 17;
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23;
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32;
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 9;
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 19;
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 13;
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 14;
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 27: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 28: listaTokens.push(new Token("LLave_izquierda", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 15;
break;
case 29: listaTokens.push(new Token("LLave_derecha", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 16;
break;
case 30: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 31: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52;
break;
case 32: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53;
break;
case 33: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 34: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55;
break;
case 35: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 36: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47;
break;
case 37: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 38: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 39: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37;
break;
case 40: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 38;
break;
case 41: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 42: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 43: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 44: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_decimal";
break;
case 45: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_entero";
break;
case 46: return "EOF"; 
break;
case 47: return "error"; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[\t\r]+)/i,/^(?:\n)/i,/^(?:((#[^\r\n]*[^\r\n])))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:var\b)/i,/^(?:double\b)/i,/^(?:heap\b)/i,/^(?:stack\b)/i,/^(?:goto\b)/i,/^(?:proc\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:call\b)/i,/^(?:printf\b)/i,/^(?:if\b)/i,/^(?:"%c")/i,/^(?:"%i")/i,/^(?:"%d")/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:"([^\\\"]|\\.)*")/i,/^(?:[a-zA-Z_À-ÿ\u00F1\u00D1]([a-zA-ZÀ-ÿ\-\.\u00F1\u00D10-9_])*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}