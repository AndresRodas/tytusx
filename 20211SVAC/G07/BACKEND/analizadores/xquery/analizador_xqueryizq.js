/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador_xqueryizq = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,26],$V2=[1,14],$V3=[1,25],$V4=[1,27],$V5=[1,31],$V6=[1,32],$V7=[1,17],$V8=[1,18],$V9=[1,19],$Va=[1,20],$Vb=[1,28],$Vc=[20,38],$Vd=[5,42,74],$Ve=[5,42,74,79],$Vf=[1,40],$Vg=[5,20,22,38,42,74,79],$Vh=[1,45],$Vi=[5,27,42,44,73,74,79],$Vj=[5,20,22,26,27,28,29,30,31,32,33,34,35,36,37,38,42,69,74,79],$Vk=[2,91],$Vl=[5,20,22,26,27,28,29,30,31,32,33,34,35,36,37,38,42,48,50,69,74,79],$Vm=[1,71],$Vn=[1,72],$Vo=[1,75],$Vp=[2,59],$Vq=[1,88],$Vr=[1,101],$Vs=[1,102],$Vt=[1,103],$Vu=[1,104],$Vv=[1,105],$Vw=[1,106],$Vx=[1,107],$Vy=[1,108],$Vz=[1,109],$VA=[1,110],$VB=[1,111],$VC=[1,112],$VD=[20,26,27,28,29,30,31,32,33,34,35,36,37,38,42],$VE=[42,69],$VF=[1,127],$VG=[1,129],$VH=[1,128],$VI=[1,130],$VJ=[1,131],$VK=[1,132],$VL=[1,168],$VM=[1,169],$VN=[1,167],$VO=[1,166],$VP=[1,164],$VQ=[1,161],$VR=[1,159],$VS=[1,160],$VT=[1,162],$VU=[1,163],$VV=[26,27,28,29,30,31,54,58,60,61,62,63],$VW=[26,27,28,29,30,31,58,60,61],$VX=[26,27,28,29,30,31,58],$VY=[1,207],$VZ=[1,208],$V_=[1,209],$V$=[5,27,44,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"XQUERYGRA":4,"EOF":5,"HTML":6,"FUNCACKERMAN":7,"FOR_IN":8,"WHERE":9,"ORDEN":10,"RETURN":11,"LLAMADA":12,"F_DATA":13,"F_UPPER":14,"F_LOWER":15,"F_SUBSTRING":16,"tk_for":17,"VARIABLE":18,"tk_in":19,"tk_order_by":20,"XPATHGRA":21,"tk_where":22,"CONDICIONAL":23,"tk_numero":24,"tk_hilera":25,"tk_mayor":26,"tk_menor":27,"tk_mayor_igual":28,"tk_menor_igual":29,"tk_igual":30,"tk_indiferente":31,"tk_gt":32,"tk_lt":33,"tk_ge":34,"tk_le":35,"tk_eq":36,"tk_ne":37,"tk_return":38,"IF":39,"tk_doc":40,"tk_parentesis_izq":41,"tk_parentesis_der":42,"tk_dolar":43,"tk_identificador":44,"CONSULTA_":45,"CONSULTA":46,"NODO":47,"tk_diagonal":48,"PREDICADO":49,"tk_diagonal_doble":50,"tk_puntos_seguidos":51,"tk_arroba":52,"tk_punto":53,"tk_asterisco":54,"tk_node":55,"tk_corchete_izq":56,"DATO":57,"tk_corchete_der":58,"tk_last":59,"tk_mas":60,"tk_menos":61,"tk_div":62,"tk_mod":63,"tk_data":64,"CONS":65,"tk_upper":66,"tk_lower":67,"tk_substring":68,"tk_coma":69,"CONTENIDO":70,"L_CONTENIDO":71,"COD":72,"tk_llave_izq":73,"tk_llave_der":74,"tk_if":75,"THEN":76,"ELSE":77,"tk_then":78,"tk_else":79,"CABEZAFUNC":80,"LISTAFUNC":81,"RETURNFUNC":82,"FUNCOPERACION":83,"tk_punto_coma":84,"LLAMADAFUNCION":85,"tk_declare":86,"tk_function":87,"tk_local":88,"LISTACONF":89,"tk_as":90,"tk_xs":91,"CODIGOFUNCION":92,"LLAFCONT":93,"L_LLAFCONT":94,"LLAD":95,"FF":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"tk_for",19:"tk_in",20:"tk_order_by",22:"tk_where",24:"tk_numero",25:"tk_hilera",26:"tk_mayor",27:"tk_menor",28:"tk_mayor_igual",29:"tk_menor_igual",30:"tk_igual",31:"tk_indiferente",32:"tk_gt",33:"tk_lt",34:"tk_ge",35:"tk_le",36:"tk_eq",37:"tk_ne",38:"tk_return",40:"tk_doc",41:"tk_parentesis_izq",42:"tk_parentesis_der",43:"tk_dolar",44:"tk_identificador",48:"tk_diagonal",50:"tk_diagonal_doble",51:"tk_puntos_seguidos",52:"tk_arroba",53:"tk_punto",54:"tk_asterisco",55:"tk_node",56:"tk_corchete_izq",58:"tk_corchete_der",59:"tk_last",60:"tk_mas",61:"tk_menos",62:"tk_div",63:"tk_mod",64:"tk_data",66:"tk_upper",67:"tk_lower",68:"tk_substring",69:"tk_coma",73:"tk_llave_izq",74:"tk_llave_der",75:"tk_if",78:"tk_then",79:"tk_else",84:"tk_punto_coma",86:"tk_declare",87:"tk_function",88:"tk_local",90:"tk_as",91:"tk_xs"},
productions_: [0,[3,2],[3,2],[3,2],[4,4],[4,1],[4,1],[4,1],[4,1],[4,1],[8,4],[10,0],[10,2],[10,3],[9,2],[9,0],[23,2],[23,1],[23,1],[23,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[11,2],[11,3],[11,2],[11,2],[12,5],[12,1],[12,2],[12,1],[18,2],[21,1],[45,2],[45,1],[46,2],[46,1],[47,3],[47,3],[47,2],[47,3],[47,2],[47,3],[47,3],[47,3],[47,5],[47,5],[47,3],[47,3],[49,3],[49,0],[57,1],[57,1],[57,1],[57,2],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,2],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[13,4],[14,4],[15,4],[16,6],[16,8],[65,2],[65,1],[6,1],[70,2],[70,1],[70,2],[70,1],[71,3],[71,4],[71,1],[72,3],[39,6],[39,5],[76,2],[76,2],[77,2],[77,2],[7,8],[80,4],[81,3],[81,1],[89,5],[82,3],[83,3],[92,1],[92,0],[85,1],[93,2],[93,1],[93,2],[93,1],[94,3],[94,4],[94,1],[95,7],[96,1],[96,3],[96,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
return {instr:"HTML",valor:$$[$0-1]};
break;
case 4:
this.$={instr:"FOR_IN",iterador:$$[$0-3],retorno:$$[$0],where:$$[$0-2],order:$$[$0-1]};
break;
case 5:
this.$={instr:"LLAMADA",valor:$$[$0]};
break;
case 6:
this.$={instr:"F_DATA",valor:$$[$0]};
break;
case 7:
this.$={instr:"F_UPPER",valor:$$[$0]};
break;
case 8:
this.$={instr:"F_LOWER",valor:$$[$0]};
break;
case 9:
this.$={instr:"F_SUBSTRING",valor:$$[$0]};
break;
case 10:
this.$={variable:$$[$0-2],consulta:$$[$0]}
break;
case 11: case 15:
this.$=null;
break;
case 12: case 17:
this.$={tipo:"VARIABLE",variable:$$[$0],consulta:null}
break;
case 13: case 16:
this.$={tipo:"VARIABLE",variable:$$[$0-1],consulta:$$[$0]}
break;
case 14:
this.$={instr:"WHERE",condicion:$$[$0]};
break;
case 18:
this.$={tipo:"NUMERO",valor:$$[$0]}
break;
case 19:
this.$={tipo:"CADENA",valor:$$[$0].slice(1,-1)}
break;
case 20: case 26:
this.$={tipo:"MAYOR",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 21: case 27:
this.$={tipo:"MENOR",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 22: case 28:
this.$={tipo:"MAYOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 23: case 29:
this.$={tipo:"MENOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 24: case 30:
this.$={tipo:"IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 25: case 31:
this.$={tipo:"DIFERENTE",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 32:
this.$={tipo:"VAR",variable:$$[$0],consulta:null}
break;
case 33:
this.$={tipo:"VAR",variable:$$[$0-1],consulta:$$[$0]}
break;
case 34: case 95: case 97:
this.$={tipo:"HTML",valor:$$[$0]}
break;
case 35:
this.$={tipo:"IF",valor:$$[$0]}
break;
case 36: case 37: case 40: case 41: case 43: case 84:
this.$=$$[$0];
break;
case 38: case 82:
this.$={variable:$$[$0-1],consulta:$$[$0]}
break;
case 39: case 83:
this.$={variable:$$[$0],consulta:null}
break;
case 42:
$$[$0].unshift({instr:"NODO",valor:$$[$0-1]}); this.$=$$[$0];
break;
case 44:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 45: case 86: case 88:
this.$=[$$[$0]];
break;
case 46: case 51:
this.$= {instr:"ACCESO",valor:$$[$0-1],index:$$[$0]};
break;
case 47: case 52:
this.$= {instr:"ACCESODOBLE",valor:$$[$0-1],index:$$[$0]};
break;
case 48:
this.$= {instr:"RETROCESO"};
break;
case 49: case 53:
this.$= {instr:"ATRIBUTO",valor:$$[$0]};
break;
case 50:
this.$= {instr:"ACTUAL"};
break;
case 54:
this.$= {instr:"ACCESO",valor:"*",index:$$[$0]};
break;
case 55:
this.$= {instr:"ACCESODOBLE",valor:"*",index:$$[$0]};
break;
case 56: case 57:
this.$= {instr:"ATRIBUTODOBLE",valor:$$[$0]};
break;
case 58:
this.$= $$[$0-1];
break;
case 59:
this.$= null;
break;
case 60:
this.$= {tipo:"NUMERO",valor:$$[$0]}
break;
case 61:
this.$= {tipo:"ID",valor:$$[$0]}
break;
case 62:
this.$= {tipo:"CADENA",valor:$$[$0]}
break;
case 63:
this.$= {tipo:"ATRIBUTO",valor:$$[$0]}
break;
case 64:
this.$= {tipo:"LAST"}
break;
case 65:
this.$= {tipo:"OP_MAS",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 66:
this.$= {tipo:"OP_MENOS",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 67:
this.$= {tipo:"OP_MUL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 68:
this.$= {tipo:"OP_DIV",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 69:
this.$= {tipo:"OP_MOD",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 70:
this.$= {tipo:"OP_NEG",valor1:$$[$0-1]}
break;
case 71:
this.$= {tipo:"OP_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 72:
this.$= {tipo:"OP_DIFERENTE",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 73:
this.$= {tipo:"OP_MENOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 74:
this.$= {tipo:"OP_MAYOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 75:
this.$= {tipo:"OP_MAYOR",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 76:
this.$= {tipo:"OP_MENOR",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 77: case 78: case 79:
this.$=$$[$0-1];
break;
case 80:
this.$={valor:$$[$0-3],inicio:$$[$0-1],fin:null};
break;
case 81:
this.$={valor:$$[$0-5],inicio:$$[$0-3],fin:$$[$0-1]};
break;
case 85: case 87:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 89: case 113:
this.$={tipo:"TXT",valor:$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()};
break;
case 90: case 114:
this.$={tipo:"TXT",valor:$$[$0-3].toString()+$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()};
break;
case 91: case 115:
this.$={tipo:"TXT",valor:$$[$0].toString()};
break;
case 92:
this.$={tipo:"COD",valor:$$[$0-1]};
break;
case 93:
this.$={condicion:$$[$0-3],else:$$[$0],then:$$[$0-1]};
break;
case 94:
this.$={condicion:$$[$0-2],else:null,then:$$[$0]};
break;
case 96: case 98:
this.$={tipo:"LLAMADA",valor:$$[$0]}
break;
case 116:
this.$={tipo:"COD",valor:$$[$0-5]};
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,12:6,13:7,14:8,15:9,16:10,17:$V0,18:16,21:15,27:$V1,40:$V2,43:$V3,44:$V4,45:24,46:29,47:30,48:$V5,50:$V6,64:$V7,66:$V8,67:$V9,68:$Va,70:11,71:21,72:22,73:$Vb,80:12,86:[1,23]},{1:[3]},{5:[1,33]},{5:[1,34]},{5:[1,35]},o($Vc,[2,15],{9:36,22:[1,37]}),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Ve,[2,84],{71:38,72:39,27:$V1,44:$Vf,73:$Vb}),{41:[1,41]},{18:42,43:$V3},{41:[1,43]},o($Vg,[2,37]),o($Vg,[2,39],{45:24,46:29,47:30,21:44,44:$Vh,48:$V5,50:$V6}),{41:[1,46]},{41:[1,47]},{41:[1,48]},{41:[1,49]},o($Vi,[2,86]),o($Vi,[2,88]),{87:[1,50]},o($Vj,[2,41]),{44:[1,51]},{44:[1,52],48:[1,53]},o($Vi,$Vk,{47:30,46:54,48:$V5,50:$V6}),{4:55,8:5,12:6,13:7,14:8,15:9,16:10,17:$V0,18:16,21:15,40:$V2,43:$V3,44:$Vh,45:24,46:29,47:30,48:$V5,50:$V6,64:$V7,66:$V8,67:$V9,68:$Va},o($Vj,[2,43],{47:56,48:$V5,50:$V6}),o($Vl,[2,45]),{44:[1,57],51:[1,58],52:[1,59],53:[1,60],54:[1,61],55:[1,62]},{44:[1,63],52:[1,66],54:[1,64],55:[1,65]},{1:[2,1]},{1:[2,2]},{1:[2,3]},{10:67,20:[1,68],38:[2,11]},{18:70,23:69,24:$Vm,25:$Vn,43:$V3},o($Vi,[2,85]),o($Vi,[2,87]),o($Vi,$Vk),{43:$Vo,81:73,89:74},{19:[1,76]},{25:[1,77]},o($Vg,[2,38]),{46:54,47:30,48:$V5,50:$V6},{18:79,43:$V3,65:78},{18:79,43:$V3,65:80},{18:79,43:$V3,65:81},{18:79,43:$V3,65:82},{88:[1,83]},o([5,19,20,22,26,27,28,29,30,31,32,33,34,35,36,37,38,42,44,48,50,69,74,79],[2,40]),{26:[1,84]},{44:[1,85]},o($Vj,[2,42],{47:56,48:$V5,50:$V6}),{74:[1,86]},o($Vl,[2,44]),o($Vl,$Vp,{49:87,56:$Vq}),o($Vl,[2,48]),{44:[1,89],54:[1,90]},o($Vl,[2,50]),o($Vl,$Vp,{49:91,56:$Vq}),{41:[1,92]},o($Vl,$Vp,{49:93,56:$Vq}),o($Vl,$Vp,{49:94,56:$Vq}),{41:[1,95]},{44:[1,96],54:[1,97]},{11:98,38:[1,99]},{18:100,43:$V3},o($Vc,[2,14],{26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC}),o($VD,[2,17],{45:24,46:29,47:30,21:113,44:$Vh,48:$V5,50:$V6}),o($VD,[2,18]),o($VD,[2,19]),{42:[1,114],69:[1,115]},o($VE,[2,102]),{44:[1,116]},{12:117,18:16,21:15,40:$V2,43:$V3,44:$Vh,45:24,46:29,47:30,48:$V5,50:$V6},{42:[1,118]},{42:[1,119]},o($VE,[2,83],{45:24,46:29,47:30,21:120,44:$Vh,48:$V5,50:$V6}),{42:[1,121]},{42:[1,122]},{69:[1,123]},{44:[1,124]},o($Vi,[2,89]),{26:[1,125]},o($Vi,[2,92]),o($Vl,[2,46]),{24:$VF,25:$VG,44:$VH,52:$VI,57:126,59:$VJ,61:$VK},o($Vl,[2,49]),o($Vl,[2,53]),o($Vl,[2,51]),{42:[1,133]},o($Vl,[2,47]),o($Vl,[2,52]),{42:[1,134]},o($Vl,[2,56]),o($Vl,[2,57]),o($Vd,[2,4]),{6:136,18:135,27:$V1,39:137,43:$V3,44:$Vf,70:11,71:21,72:22,73:$Vb,75:[1,138]},{21:139,38:[2,12],44:$Vh,45:24,46:29,47:30,48:$V5,50:$V6},{18:70,23:140,24:$Vm,25:$Vn,43:$V3},{18:70,23:141,24:$Vm,25:$Vn,43:$V3},{18:70,23:142,24:$Vm,25:$Vn,43:$V3},{18:70,23:143,24:$Vm,25:$Vn,43:$V3},{18:70,23:144,24:$Vm,25:$Vn,43:$V3},{18:70,23:145,24:$Vm,25:$Vn,43:$V3},{18:70,23:146,24:$Vm,25:$Vn,43:$V3},{18:70,23:147,24:$Vm,25:$Vn,43:$V3},{18:70,23:148,24:$Vm,25:$Vn,43:$V3},{18:70,23:149,24:$Vm,25:$Vn,43:$V3},{18:70,23:150,24:$Vm,25:$Vn,43:$V3},{18:70,23:151,24:$Vm,25:$Vn,43:$V3},o($VD,[2,16]),{82:152,90:[1,153]},{43:$Vo,89:154},{90:[1,155]},o([20,22,38],[2,10]),{21:156,44:$Vh,45:24,46:29,47:30,48:$V5,50:$V6},o($Vd,[2,77]),o($VE,[2,82]),o($Vd,[2,78]),o($Vd,[2,79]),{24:[1,157]},{41:[2,100]},o($Vi,[2,90]),{26:$VL,27:$VM,28:$VN,29:$VO,30:$VP,31:[1,165],54:$VQ,58:[1,158],60:$VR,61:$VS,62:$VT,63:$VU},o($VV,[2,60]),o($VV,[2,61]),o($VV,[2,62]),{44:[1,170]},{41:[1,171]},{24:$VF,25:$VG,44:$VH,52:$VI,57:172,59:$VJ,61:$VK},o($Vl,$Vp,{49:173,56:$Vq}),o($Vl,$Vp,{49:174,56:$Vq}),o($Vd,[2,32],{45:24,46:29,47:30,21:175,44:$Vh,48:$V5,50:$V6}),o($Vd,[2,34]),o($Vd,[2,35]),{41:[1,176]},{38:[2,13]},o($VD,[2,20]),o($VD,[2,21]),o($VD,[2,22]),o($VD,[2,23]),o($VD,[2,24]),o([20,31,38,42],[2,25],{26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC}),o($VD,[2,26]),o($VD,[2,27]),o($VD,[2,28]),o($VD,[2,29]),o($VD,[2,30]),o($VD,[2,31]),{73:[1,178],83:177},{91:[1,179]},o($VE,[2,101]),{91:[1,180]},o($Vg,[2,36]),{42:[1,181],69:[1,182]},o($Vl,[2,58]),{24:$VF,25:$VG,44:$VH,52:$VI,57:183,59:$VJ,61:$VK},{24:$VF,25:$VG,44:$VH,52:$VI,57:184,59:$VJ,61:$VK},{24:$VF,25:$VG,44:$VH,52:$VI,57:185,59:$VJ,61:$VK},{24:$VF,25:$VG,44:$VH,52:$VI,57:186,59:$VJ,61:$VK},{24:$VF,25:$VG,44:$VH,52:$VI,57:187,59:$VJ,61:$VK},{24:$VF,25:$VG,44:$VH,52:$VI,57:188,59:$VJ,61:$VK},{24:$VF,25:$VG,44:$VH,52:$VI,57:189,59:$VJ,61:$VK},{24:$VF,25:$VG,44:$VH,52:$VI,57:190,59:$VJ,61:$VK},{24:$VF,25:$VG,44:$VH,52:$VI,57:191,59:$VJ,61:$VK},{24:$VF,25:$VG,44:$VH,52:$VI,57:192,59:$VJ,61:$VK},{24:$VF,25:$VG,44:$VH,52:$VI,57:193,59:$VJ,61:$VK},o($VV,[2,63]),{42:[1,194]},o($VW,[2,70],{54:$VQ,62:$VT,63:$VU}),o($Vl,[2,54]),o($Vl,[2,55]),o($Vd,[2,33]),{18:70,23:195,24:$Vm,25:$Vn,43:$V3},{84:[1,196]},{4:198,8:5,12:6,13:7,14:8,15:9,16:10,17:$V0,18:16,21:15,40:$V2,43:$V3,44:$Vh,45:24,46:29,47:30,48:$V5,50:$V6,64:$V7,66:$V8,67:$V9,68:$Va,74:[2,107],92:197},{44:[1,199]},{44:[1,200]},o($Vd,[2,80]),{24:[1,201]},o($VW,[2,65],{54:$VQ,62:$VT,63:$VU}),o($VW,[2,66],{54:$VQ,62:$VT,63:$VU}),o($VV,[2,67]),o($VV,[2,68]),o($VV,[2,69]),o($VX,[2,71],{54:$VQ,60:$VR,61:$VS,62:$VT,63:$VU}),o([31,58],[2,72],{26:$VL,27:$VM,28:$VN,29:$VO,30:$VP,54:$VQ,60:$VR,61:$VS,62:$VT,63:$VU}),o($VX,[2,73],{54:$VQ,60:$VR,61:$VS,62:$VT,63:$VU}),o($VX,[2,74],{54:$VQ,60:$VR,61:$VS,62:$VT,63:$VU}),o($VX,[2,75],{54:$VQ,60:$VR,61:$VS,62:$VT,63:$VU}),o($VX,[2,76],{54:$VQ,60:$VR,61:$VS,62:$VT,63:$VU}),o($VV,[2,64]),{26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC,42:[1,202]},{27:$VY,44:$VZ,73:$V_,85:203,93:204,94:205,95:206},{74:[1,210]},{74:[2,106]},{73:[2,104]},o($VE,[2,103]),{42:[1,211]},{76:212,78:[1,213]},{5:[2,99]},{5:[2,108],27:$VY,44:$VZ,73:$V_,94:214,95:215},o($V$,[2,110]),o($V$,[2,112]),{44:[1,216],48:[1,217]},o($V$,[2,115]),{88:[1,218]},{84:[2,105]},o($Vd,[2,81]),o($Vd,[2,94],{77:219,79:[1,220]}),{6:221,12:222,18:16,21:15,27:$V1,40:$V2,43:$V3,44:$V4,45:24,46:29,47:30,48:$V5,50:$V6,70:11,71:21,72:22,73:$Vb},o($V$,[2,109]),o($V$,[2,111]),{26:[1,223]},{44:[1,224]},{44:[1,225]},o($Vd,[2,93]),{6:226,12:227,18:16,21:15,27:$V1,40:$V2,43:$V3,44:$V4,45:24,46:29,47:30,48:$V5,50:$V6,70:11,71:21,72:22,73:$Vb},o($Ve,[2,95]),o($Ve,[2,96]),o($V$,[2,113]),{26:[1,228]},{41:[1,229]},o($Vd,[2,97]),o($Vd,[2,98]),o($V$,[2,114]),{4:231,8:5,12:6,13:7,14:8,15:9,16:10,17:$V0,18:16,21:15,24:[1,233],40:$V2,43:$V3,44:[1,232],45:24,46:29,47:30,48:$V5,50:$V6,64:$V7,66:$V8,67:$V9,68:$Va,96:230},{42:[1,234]},{42:[2,117]},{46:54,47:30,48:$V5,50:$V6,69:[1,235]},{69:[1,236]},{74:[1,237]},{44:[1,238]},{24:[1,239]},o($V$,[2,116]),{42:[2,118]},{42:[2,119]}],
defaultActions: {33:[2,1],34:[2,2],35:[2,3],124:[2,100],139:[2,13],198:[2,106],199:[2,104],203:[2,99],210:[2,105],231:[2,117],238:[2,118],239:[2,119]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2:
break;
case 3: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 4: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 17;
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_let';
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 22;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 20;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 38;
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64;
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 75;
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 78;
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 79;
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 19;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_to';
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_at';
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37;
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32;
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 86;
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 87;
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 88;
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 90;
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 91;
break;
case 27: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84;
break;
case 28: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 43;
break;
case 29: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_or';
break;
case 30: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_and';
break;
case 31: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63;
break;
case 32: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 33: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55;
break;
case 34: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 35: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace_node';
break;
case 36: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor_or_self';
break;
case 37: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor';
break;
case 38: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 39: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 40: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant_or_self';
break;
case 41: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant';
break;
case 42: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following_sibling';
break;
case 43: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following';
break;
case 44: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace';
break;
case 45: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_parent';
break;
case 46: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding_sibling';
break;
case 47: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding';
break;
case 48: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_self';
break;
case 49: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 50: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 51: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 52: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_position';
break;
case 53: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 54: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 66;
break;
case 55: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67;
break;
case 56: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68;
break;
case 57: listaTokens.push(new Token("ComparacionLet", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_let_igual';
break;
case 58: listaTokens.push(new Token("Barra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_barra_or';
break;
case 59: listaTokens.push(new Token("Suma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 60: listaTokens.push(new Token("Resta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61;
break;
case 61: listaTokens.push(new Token("Asterisco", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 62: listaTokens.push(new Token("Indiferente", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 63: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 64: listaTokens.push(new Token("Menor_igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 65: listaTokens.push(new Token("Menor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 66: listaTokens.push(new Token("Mayor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 67: listaTokens.push(new Token("Mayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 68: listaTokens.push(new Token("Cuatro_Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_cuatro_puntos';
break;
case 69: listaTokens.push(new Token("Diagonal_doble", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 70: listaTokens.push(new Token("Division", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 48;
break;
case 71: listaTokens.push(new Token("Arroba", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52;
break;
case 72: listaTokens.push(new Token("Puntos_Seguidos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 73: listaTokens.push(new Token("Parentesis_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 74: listaTokens.push(new Token("Parentesis_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42;
break;
case 75: listaTokens.push(new Token("Corchete_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_izq";
break;
case 76: listaTokens.push(new Token("Corchete_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_der";
break;
case 77: listaTokens.push(new Token("Llave_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_izq";
break;
case 78: listaTokens.push(new Token("Llave_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_der";
break;
case 79: listaTokens.push(new Token("Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_coma";
break;
case 80: listaTokens.push(new Token("Punto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53;
break;
case 81: listaTokens.push(new Token("Caracter", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_caracter";
break;
case 82: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 83: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 84: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 85: return "EOF"; 
break;
case 86: listaErrores.push(new TokenError("xPATH","ERROR LEXICO","Caracter no reconocido "+ yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:[(][:][^:]*[:]+[)])/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:data\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:local:)/,/^(?:as\b)/,/^(?:xs:)/,/^(?:;)/,/^(?:\$)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:namespace-node\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?:upper-case\b)/,/^(?:lower-case\b)/,/^(?:substring\b)/,/^(?::=)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:!=)/,/^(?:=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:'[^\']*')/,/^(?:"([^\\\"]|\\.)*")/,/^(?:[a-zA-Z_À-ÿ\u00F1\u00D1]([a-zA-ZÀ-ÿ\-\.\u00F1\u00D10-9_])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador_xqueryizq;
exports.Parser = analizador_xqueryizq.Parser;
exports.parse = function () { return analizador_xqueryizq.parse.apply(analizador_xqueryizq, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}