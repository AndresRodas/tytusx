/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador_xqueryder = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,11],$V3=[1,12],$V4=[1,10],$V5=[1,28],$V6=[1,30],$V7=[1,29],$V8=[1,24],$V9=[1,20],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,25],$Ve=[1,26],$Vf=[1,31],$Vg=[5,34,39,41],$Vh=[1,37],$Vi=[5,11,19,20,22,29,30,33,34,37,38,39,41],$Vj=[2,62],$Vk=[1,41],$Vl=[1,43],$Vm=[5,11,19,20,22,29,30,33,34,37,38,39,41,67],$Vn=[2,72],$Vo=[27,32,53,72,77,80],$Vp=[1,47],$Vq=[5,11,19,20,22,27,29,30,32,33,34,37,38,39,41,53,56,64,67,71,72,74,76,77,80],$Vr=[1,56],$Vs=[1,60],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[5,11,19,20,22,27,29,30,32,33,34,37,38,39,41,53,54,56,63,64,67,71,72,74,76,77,79,80,81,82,83,84,85,86,87],$VB=[1,67],$VC=[1,68],$VD=[5,11],$VE=[1,99],$VF=[1,97],$VG=[1,98],$VH=[1,109],$VI=[26,30,31],$VJ=[5,11,19,20,22,27,29,30,32,33,34,37,38,39,41,53,54,56,63,64,67,71,72,74,76,77,79,80,81,82,85,86,87],$VK=[5,11,19,20,22,27,29,30,32,33,34,37,38,39,41,53,54,56,63,64,67,71,72,74,76,77,79,80,85,86,87],$VL=[39,41],$VM=[1,122],$VN=[1,126],$VO=[1,127],$VP=[1,123],$VQ=[1,125],$VR=[45,62],$VS=[1,142],$VT=[1,145],$VU=[10,53],$VV=[1,154],$VW=[10,37,38,45,53,56,62];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONSTRUCCION":4,"EOF":5,"ELEMENTO":6,"ESTRUCTURAHTMLUL":7,"CONTENIDO":8,"tk_ul_abre":9,"tk_llave_izq":10,"tk_llave_der":11,"tk_ul_cierra":12,"ENCABEZADO":13,"ACCIONWHE":14,"ACCIONOBY":15,"ACCIONRET":16,"tk_for":17,"EXPRESION":18,"tk_at":19,"tk_in":20,"tk_let":21,"tk_let_igual":22,"PRODUCCION":23,"XPATHGRA":24,"LISTAELEMENTO":25,"tk_parentesis_izq":26,"tk_numero":27,"tk_to":28,"tk_parentesis_der":29,"tk_coma":30,"tk_doc":31,"tk_hilera":32,"tk_dolar":33,"tk_where":34,"LISTAWHE":35,"ESTIMACIONAND":36,"tk_and":37,"tk_or":38,"tk_order_by":39,"LISTAOBY":40,"tk_return":41,"VALORRETURN":42,"tk_li_abre":43,"LISTARET":44,"tk_li_cierra":45,"ESTRUCTURAIF":46,"ESTRUCTURATHEN":47,"ESTRUCTURAELSE":48,"ETIQUETAABRE":49,"ETIQUETACIERRA":50,"LISTAOPHT":51,"OPCIONHTML":52,"tk_identificador":53,"tk_igual":54,"AGREGACION":55,"tk_punto":56,"OPCIONDATA":57,"tk_data":58,"tk_if":59,"tk_then":60,"tk_else":61,"tk_menor":62,"tk_mayor":63,"tk_diagonal":64,"EXPRESIONXPA":65,"ELEMENTO_P":66,"tk_barra_or":67,"SIMBOLOS":68,"CAJETIN":69,"SIMBOLOS_P":70,"tk_diagonal_doble":71,"tk_arroba":72,"ARROPROD":73,"tk_puntos_seguidos":74,"PRODUCT":75,"tk_asterisco":76,"tk_corchete_izq":77,"DATO":78,"tk_corchete_der":79,"tk_last":80,"tk_mas":81,"tk_menos":82,"tk_div":83,"tk_mod":84,"tk_indiferente":85,"tk_menor_igual":86,"tk_mayor_igual":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"tk_ul_abre",10:"tk_llave_izq",11:"tk_llave_der",12:"tk_ul_cierra",17:"tk_for",19:"tk_at",20:"tk_in",21:"tk_let",22:"tk_let_igual",26:"tk_parentesis_izq",27:"tk_numero",28:"tk_to",29:"tk_parentesis_der",30:"tk_coma",31:"tk_doc",32:"tk_hilera",33:"tk_dolar",34:"tk_where",37:"tk_and",38:"tk_or",39:"tk_order_by",41:"tk_return",43:"tk_li_abre",45:"tk_li_cierra",53:"tk_identificador",54:"tk_igual",56:"tk_punto",58:"tk_data",59:"tk_if",60:"tk_then",61:"tk_else",62:"tk_menor",63:"tk_mayor",64:"tk_diagonal",67:"tk_barra_or",71:"tk_diagonal_doble",72:"tk_arroba",73:"ARROPROD",74:"tk_puntos_seguidos",75:"PRODUCT",76:"tk_asterisco",77:"tk_corchete_izq",79:"tk_corchete_der",80:"tk_last",81:"tk_mas",82:"tk_menos",83:"tk_div",84:"tk_mod",85:"tk_indiferente",86:"tk_menor_igual",87:"tk_mayor_igual"},
productions_: [0,[3,2],[4,1],[4,1],[4,1],[7,5],[8,5],[8,4],[8,4],[8,3],[13,5],[13,3],[13,3],[6,2],[6,1],[25,6],[25,5],[25,8],[25,6],[25,5],[25,8],[23,4],[18,2],[14,2],[35,3],[35,1],[36,1],[36,1],[36,1],[15,2],[40,3],[40,1],[16,2],[42,1],[42,3],[42,3],[42,3],[44,2],[44,1],[51,3],[51,5],[51,4],[51,6],[55,1],[55,1],[55,1],[52,3],[52,1],[52,3],[52,1],[57,4],[46,4],[47,4],[47,4],[47,0],[48,4],[48,4],[48,3],[49,3],[50,4],[24,2],[66,3],[66,0],[65,3],[65,2],[68,1],[68,1],[68,2],[68,2],[68,2],[68,2],[70,1],[70,0],[69,3],[69,1],[78,1],[78,1],[78,1],[78,2],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 10:
console.log($$[$0-4]);
        console.log($$[$0-2]);
break;
case 21: case 59:
console.log($$[$0-3]);
        console.log($$[$0-2]);
        console.log($$[$0-1]);
        console.log($$[$0]);
break;
case 22: case 23: case 29: case 32: case 67: case 68: case 69:
console.log($$[$0-1]);
break;
case 34:
console.log($$[$0-2]);
        console.log($$[$0]);
break;
case 50: case 51: case 53: case 56:
console.log($$[$0-3]);
        console.log($$[$0-2]);
        console.log($$[$0]);
break;
case 52: case 55:
console.log($$[$0-3]);
break;
case 57: case 58:
console.log($$[$0-2]);
        console.log($$[$0-1]);
        console.log($$[$0]);
break;
case 61:
console.log($$[$0-2]);
break;
case 65: case 66:
console.log($$[$0]);
break;
case 70:
console.log($$[$0-1]);
         console.log($$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:[1,8],13:9,17:$V0,21:$V1,23:6,25:7,26:$V2,30:$V3,31:$V4},{1:[3]},{5:[1,15]},{5:[2,2]},{5:[2,3]},{5:[2,4]},{24:16,27:$V5,32:$V6,53:$V7,56:$V8,64:$V9,65:17,68:18,69:19,71:$Va,72:$Vb,74:$Vc,76:$Vd,77:$Ve,78:27,80:$Vf},o($Vg,[2,14]),{10:[1,32]},{6:33,23:6,25:7,26:$V2,30:$V3,31:$V4},{26:[1,34]},{27:[1,35]},{18:36,33:$Vh},{18:38,33:$Vh},{18:39,33:$Vh},{1:[2,1]},o($Vg,[2,13]),o($Vi,$Vj,{66:40,67:$Vk}),{27:$V5,32:$V6,53:$V7,69:42,72:$Vl,77:$Ve,78:27,80:$Vf},o($Vm,$Vn,{68:18,69:19,78:27,70:44,65:45,27:$V5,32:$V6,53:$V7,56:$V8,64:$V9,71:$Va,72:$Vb,74:$Vc,76:$Vd,77:$Ve,80:$Vf}),o($Vo,[2,65]),o($Vo,[2,66]),{53:$Vp,73:[1,46]},{75:[1,48]},{75:[1,49]},{53:[1,50]},{27:$V5,32:$V6,53:$V7,72:$Vl,78:51,80:$Vf},o($Vq,[2,74],{54:$Vr,63:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz}),o($VA,[2,75]),o($VA,[2,76]),o($VA,[2,77]),{26:[1,61]},{8:62,13:9,17:$V0,21:$V1},{14:63,15:64,16:65,34:[1,66],39:$VB,41:$VC},{32:[1,69]},{28:[1,70],30:[1,71]},{20:[1,72]},{24:73,27:$V5,32:$V6,53:$V7,56:$V8,64:$V9,65:17,68:18,69:19,71:$Va,72:$Vb,74:$Vc,76:$Vd,77:$Ve,78:27,80:$Vf},{19:[1,74],20:[1,75]},{22:[1,76]},o($Vi,[2,60]),{27:$V5,32:$V6,53:$V7,56:$V8,64:$V9,65:77,68:18,69:19,71:$Va,72:$Vb,74:$Vc,76:$Vd,77:$Ve,78:27,80:$Vf},o($Vm,$Vn,{68:18,69:19,78:27,65:45,70:78,27:$V5,32:$V6,53:$V7,56:$V8,64:$V9,71:$Va,72:$Vb,74:$Vc,76:$Vd,77:$Ve,80:$Vf}),{53:$Vp},o($Vm,[2,64]),o($Vm,[2,71]),o($Vo,[2,67]),o($VA,[2,78]),o($Vo,[2,68]),o($Vo,[2,69]),o($Vo,[2,70]),{54:$Vr,63:$Vs,79:[1,79],81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz},{27:$V5,32:$V6,53:$V7,72:$Vl,78:80,80:$Vf},{27:$V5,32:$V6,53:$V7,72:$Vl,78:81,80:$Vf},{27:$V5,32:$V6,53:$V7,72:$Vl,78:82,80:$Vf},{27:$V5,32:$V6,53:$V7,72:$Vl,78:83,80:$Vf},{27:$V5,32:$V6,53:$V7,72:$Vl,78:84,80:$Vf},{27:$V5,32:$V6,53:$V7,72:$Vl,78:85,80:$Vf},{27:$V5,32:$V6,53:$V7,72:$Vl,78:86,80:$Vf},{27:$V5,32:$V6,53:$V7,72:$Vl,78:87,80:$Vf},{27:$V5,32:$V6,53:$V7,72:$Vl,78:88,80:$Vf},{29:[1,89]},{11:[1,90]},{15:91,16:92,39:$VB,41:$VC},{16:93,41:$VC},o($VD,[2,9]),{18:96,30:$VE,33:$Vh,35:94,36:95,37:$VF,38:$VG},{18:102,30:$VE,33:$Vh,36:101,37:$VF,38:$VG,40:100},{18:104,33:$Vh,42:103,43:[1,105],46:106,49:107,59:[1,108],62:$VH},{29:[1,110]},{27:[1,111]},{27:[1,112]},{26:[1,113]},o([5,11,19,20,22,29,30,33,37,38,39,41],[2,22]),{18:114,33:$Vh},o($VI,[2,11]),o($VI,[2,12]),o($Vi,$Vj,{66:115,67:$Vk}),o($Vm,[2,63]),o($Vq,[2,73]),o($VJ,[2,80],{83:$Vv,84:$Vw}),o($VJ,[2,81],{83:$Vv,84:$Vw}),o($VA,[2,82]),o($VA,[2,83]),o($VK,[2,84],{81:$Vt,82:$Vu,83:$Vv,84:$Vw}),o([5,11,19,20,22,27,29,30,32,33,34,37,38,39,41,53,56,64,67,71,72,74,76,77,79,80,85],[2,85],{54:$Vr,63:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vy,87:$Vz}),o($VK,[2,86],{81:$Vt,82:$Vu,83:$Vv,84:$Vw}),o($VK,[2,87],{81:$Vt,82:$Vu,83:$Vv,84:$Vw}),o($VK,[2,88],{81:$Vt,82:$Vu,83:$Vv,84:$Vw}),o($VA,[2,79]),{12:[1,116]},{16:117,41:$VC},o($VD,[2,7]),o($VD,[2,8]),o($VL,[2,23]),{18:118,33:$Vh},o($VL,[2,25]),{33:[2,26]},{33:[2,27]},{33:[2,28]},{41:[2,29]},{18:119,33:$Vh},{41:[2,31]},o($VD,[2,32]),o($VD,[2,33]),{10:$VM,37:$VN,38:$VO,44:120,51:121,53:$VP,55:124,56:$VQ},{47:128,60:[1,129],61:[2,54]},{10:$VM,37:$VN,38:$VO,44:130,51:121,53:$VP,55:124,56:$VQ},{26:[1,131]},{53:[1,132]},o([27,32,53,56,64,71,72,74,76,77,80],[2,21]),{29:[1,133]},{29:[1,134]},{27:[1,135]},{20:[1,136]},o($Vi,[2,61]),{5:[2,5]},o($VD,[2,6]),{18:96,30:$VE,33:$Vh,35:137,36:95,37:$VF,38:$VG},{18:102,30:$VE,33:$Vh,36:101,37:$VF,38:$VG,40:138},{45:[1,139]},o($VR,[2,38],{51:121,55:124,44:140,10:$VM,37:$VN,38:$VO,53:$VP,56:$VQ}),{10:$VS,18:143,33:$Vh,52:141,57:144,58:$VT},{54:[1,146]},{10:[1,147],53:[1,148]},o($VU,[2,43]),o($VU,[2,44]),o($VU,[2,45]),{48:149,61:[1,150]},{26:[1,152],49:151,62:$VH},{50:153,62:$VV},{18:155,33:$Vh},{63:[1,156]},o($Vg,[2,16],{25:157,26:$V2,30:$V3}),o($Vg,[2,19],{25:158,26:$V2,30:$V3}),{28:[1,159],30:[1,160]},o($VI,[2,10]),o($VL,[2,24]),{41:[2,30]},o($VD,[2,34]),o($VR,[2,37]),{11:[1,161]},{18:162,33:$Vh,57:163,58:$VT},{11:[2,47]},{11:[2,49]},{26:[1,164]},{10:[1,165]},{10:$VS,18:143,33:$Vh,52:166,57:144,58:$VT},{54:[1,167]},o($VD,[2,35]),{26:[1,169],49:168,62:$VH},{10:$VM,37:$VN,38:$VO,51:170,53:$VP,55:124,56:$VQ},{18:171,33:$Vh},o($VD,[2,36]),{64:[1,172]},{29:[1,173]},o([10,37,38,53,56],[2,58]),o($Vg,[2,15]),o($Vg,[2,18]),{27:[1,174]},{27:[1,175]},o($VW,[2,39]),{11:[1,176]},{11:[1,177]},{18:178,33:$Vh},{10:$VS,18:143,33:$Vh,52:179,57:144,58:$VT},{11:[1,180]},{10:[1,181]},{10:$VM,37:$VN,38:$VO,51:182,53:$VP,55:124,56:$VQ},{18:183,29:[1,184],33:$Vh},{50:185,62:$VV},{29:[1,186]},{53:[1,187]},o([60,61],[2,51]),{29:[1,188]},{29:[1,189]},{11:[2,46]},{11:[2,48]},{29:[1,190]},{11:[1,191]},o($VW,[2,41]),{10:$VS,18:143,33:$Vh,52:192,57:144,58:$VT},{50:193,62:$VV},{29:[1,194]},o($VD,[2,57]),{61:[2,52]},{61:[2,53]},{63:[1,195]},o($Vg,[2,17]),o($Vg,[2,20]),{11:[2,50]},o($VW,[2,40]),{11:[1,196]},o($VD,[2,55]),o($VD,[2,56]),o([5,11,61],[2,59]),o($VW,[2,42])],
defaultActions: {3:[2,2],4:[2,3],5:[2,4],15:[2,1],97:[2,26],98:[2,27],99:[2,28],100:[2,29],102:[2,31],116:[2,5],138:[2,30],143:[2,47],144:[2,49],176:[2,46],177:[2,48],185:[2,52],186:[2,53],190:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2:
break;
case 3: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 4: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 17;
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 21;
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58;
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61;
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 20;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 19;
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_eq';
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ne';
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_lt';
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_le';
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_gt';
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ge';
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_html_abre';
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_html_cierra';
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_body_abre';
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_body_cierra';
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_h1_abre';
break;
case 27: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_h1_cierra';
break;
case 28: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 9;
break;
case 29: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 12;
break;
case 30: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 43;
break;
case 31: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 32: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 33: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 38;
break;
case 34: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37;
break;
case 35: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84;
break;
case 36: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 83;
break;
case 37: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_node';
break;
case 38: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 39: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace_node';
break;
case 40: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor_or_self';
break;
case 41: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor';
break;
case 42: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 43: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 44: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant_or_self';
break;
case 45: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant';
break;
case 46: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following_sibling';
break;
case 47: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following';
break;
case 48: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace';
break;
case 49: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_parent';
break;
case 50: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding_sibling';
break;
case 51: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding';
break;
case 52: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_self';
break;
case 53: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 54: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 55: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 80;
break;
case 56: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_position';
break;
case 57: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 58: listaTokens.push(new Token("ComparacionLet", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 22;
break;
case 59: listaTokens.push(new Token("Barra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67;
break;
case 60: listaTokens.push(new Token("Suma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 81;
break;
case 61: listaTokens.push(new Token("Resta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 62: listaTokens.push(new Token("Asterisco", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 76;
break;
case 63: listaTokens.push(new Token("Indiferente", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 85;
break;
case 64: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 65: listaTokens.push(new Token("Menor_igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 86;
break;
case 66: listaTokens.push(new Token("Menor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 67: listaTokens.push(new Token("Mayor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 87;
break;
case 68: listaTokens.push(new Token("Mayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63;
break;
case 69: listaTokens.push(new Token("Cuatro_Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_cuatro_puntos';
break;
case 70: listaTokens.push(new Token("Diagonal_doble", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 71: listaTokens.push(new Token("Division", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64;
break;
case 72: listaTokens.push(new Token("Arroba", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72;
break;
case 73: listaTokens.push(new Token("Puntos_Seguidos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74;
break;
case 74: listaTokens.push(new Token("Parentesis_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 75: listaTokens.push(new Token("Parentesis_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 76: listaTokens.push(new Token("Corchete_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_izq";
break;
case 77: listaTokens.push(new Token("Corchete_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_der";
break;
case 78: listaTokens.push(new Token("Llave_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_izq";
break;
case 79: listaTokens.push(new Token("Llave_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_der";
break;
case 80: listaTokens.push(new Token("Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_coma";
break;
case 81: listaTokens.push(new Token("Punto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 56;
break;
case 82: listaTokens.push(new Token("Caracter", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_caracter";
break;
case 83: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 84: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 85: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 86: return "EOF"; 
break;
case 87: listaErrores.push(new TokenError("xPATH","ERROR LEXICO","Caracter no reconocido "+ yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:[(][:][^:]*[:]+[)])/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:data\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:<html>)/,/^(?:<\/html>)/,/^(?:<body>)/,/^(?:<\/body>)/,/^(?:<h1>)/,/^(?:<\/h1>)/,/^(?:<ul>)/,/^(?:<\/ul>)/,/^(?:<li>)/,/^(?:<\/li>)/,/^(?:\$)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:namespace-node\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?::=)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:!=)/,/^(?:=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:'[^\']*')/,/^(?:"([^\\\"]|\\.)*")/,/^(?:[a-zA-Z_À-ÿ\u00F1\u00D1]([a-zA-ZÀ-ÿ\-\.\u00F1\u00D10-9_])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador_xqueryder;
exports.Parser = analizador_xqueryder.Parser;
exports.parse = function () { return analizador_xqueryder.parse.apply(analizador_xqueryder, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}