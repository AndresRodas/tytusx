/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xmlDerecha = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[2,5,22,23,27,29,30,31,32,33,34],$V3=[1,14],$V4=[1,15],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[2,22],$Vb=[10,15],$Vc=[2,22,23,27,29,30,31,32,33,34],$Vd=[21,25],$Ve=[2,16],$Vf=[1,36];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"PROLOGO":4,"EOF":5,"tk_inicio_prologo":6,"VERSION":7,"CODIFICACION":8,"DEPENDENCIA":9,"tk_fin_prologo":10,"RAIZ":11,"tk_igual":12,"tk_hilera":13,"tk_encoding":14,"tk_standalone":15,"ETIQUETA":16,"ETIQUETA_UNICA":17,"APERTURA":18,"CONTENIDO":19,"CIERRE":20,"tk_cierra":21,"tk_abre":22,"tk_etiqueta":23,"ATRIBUTOS":24,"tk_cierra_dos":25,"ATRIBUTO":26,"tk_numero":27,"CARACESPECIAL":28,"tk_less":29,"tk_great":30,"tk_amper":31,"tk_apostro":32,"tk_quota":33,"tk_abre_dos":34,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"tk_inicio_prologo",10:"tk_fin_prologo",12:"tk_igual",13:"tk_hilera",14:"tk_encoding",15:"tk_standalone",21:"tk_cierra",22:"tk_abre",23:"tk_etiqueta",25:"tk_cierra_dos",27:"tk_numero",29:"tk_less",30:"tk_great",31:"tk_amper",32:"tk_apostro",33:"tk_quota",34:"tk_abre_dos"},
productions_: [0,[3,2],[4,6],[4,1],[7,2],[8,3],[8,0],[9,3],[9,0],[11,1],[16,1],[16,3],[16,2],[17,4],[18,4],[24,2],[24,0],[26,3],[19,2],[19,2],[19,2],[19,2],[19,0],[28,1],[28,1],[28,1],[28,1],[28,1],[20,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

   
    // REPORTE GRAMATICAL

    gramaticapp = `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nI   -> P EOF \n` + gramaticapp;
    gramatical = `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n<INICIO> := <PROLOGO> <EOF> \n` + gramatical;
 
    return {
        "json": $$[$0-1],
        "gramaticapp": gramaticapp,
        "gramatical": gramatical,
        "listaErrores": listaErrores,
        "tipoencoding": tipoencoding
    };

break;
case 2:

        this.$ = $$[$0];

        // REPORTE GRAMATICAL
        gramaticapp = `PROLOGO.VAL -> prologo.lexval VERSION.VAL CODIFICACION.VAL DEPENDENCIA.VAL prologof.lexval RAIZ.VAL \n` + gramaticapp;
        gramatical = `<PROLOGO> := ${$$[$0-5]} <VERSION> <CODIFICACION> <DEPENDENCIA> ${$$[$0-1]} <RAIZ> \n` + gramatical;
    
break;
case 3:

        this.$ = $$[$0];

        // REPORTE GRAMATICAL
        gramaticapp = `PROLOGO.VAL -> RAIZ.VAL \n` + gramaticapp;
        gramatical = `<PROLOGO> := <RAIZ> \n` + gramatical;
    
break;
case 4:

        // REPORTE GRAMATICAL
        gramaticapp = `VERSION.VAL -> igual.lexval cadena.lexval \n` + gramaticapp;
        gramatical = `<VERSION> := ${$$[$0-1]} ${$$[$0]} \n` + gramatical;
    
break;
case 5:

        // REPORTE GRAMATICAL
        gramaticapp = `CODIFICACION.VAL -> encoding.lexval igual.lexval cadena.lexval \n` + gramaticapp;
        gramatical = `<CODIFICACION> := ${$$[$0-2]} ${$$[$0-1]} ${$$[$0]} \n` + gramatical;
        tipoencoding = `${$$[$0]}`.replaceAll("\"", ' ');
    
break;
case 6:

        // REPORTE GRAMATICAL
        gramaticapp = `CODIFICACION.VAL -> ε \n` + gramaticapp;
        gramatical = `<CODIFICACION> := ε \n` + gramatical;

    
break;
case 7:

        // REPORTE GRAMATICAL
        gramaticapp = `DEPENDENCIA.VAL -> standalone.lexval igual.lexval cadena.lexval\n` + gramaticapp;
        gramatical = `<DEPENDENCIA> := ${$$[$0-2]} ${$$[$0-1]} ${$$[$0]} \n` + gramatical;
    
break;
case 8:

        // REPORTE GRAMATICAL
        gramaticapp = `DEPENDENCIA.VAL -> ε \n` + gramaticapp;
        gramatical = `<DEPENDENCIA> := ε \n` + gramatical;
    
break;
case 9:

        this.$ = $$[$0];

        // CST
        nodoPadre = new Nodo("RAIZ","RAIZ");
        nodoPadre.agregarHijo($$[$0]['nodo']);

        this.$['nodo'] = nodoPadre;

        // REPORTE GRAMATICAL
        gramaticapp = `RIAZ.VAL -> ETIQUETA.VAL \n` + gramaticapp;
        gramatical = `<RAIZ> := <ETIQUETA> \n` + gramatical;
    
break;
case 10:

        this.$ = $$[$0];

        // CST
        nodoPadre = new Nodo("ETIQUETA","ETIQUETA");
        nodoPadre.agregarHijo($$[$0]['nodo']);

        this.$['nodo'] = nodoPadre;

        // REPORTE GRAMATICAL
        gramaticapp = `ETIQUETA.VAL -> ETIQUETA_UNICA.VAL\n` + gramaticapp;
        gramatical = `<ETIQUETA> := <ETIQUETA_UNICA> \n` + gramatical;
    
break;
case 11:

        this.$ = $$[$0-2];
        this.$["texto"] = $$[$0-1]["texto"];
        this.$["hijos"] = $$[$0-1]["hijos"];

        // CST
        nodoPadre = new Nodo("ETIQUETA","ETIQUETA");
        nodoPadre.agregarHijo($$[$0-2]['nodo']);

        if($$[$0-1]) {
            nodoPadre.agregarHijo($$[$0-1]['nodo']);
        }

        nodoPadre.agregarHijo($$[$0]['nodo']);

        this.$['nodo'] = nodoPadre;


        // REPORTE GRAMATICAL
        gramaticapp = `ETIQUETA.VAL -> APERTURA.VAL CONTENIDO.VAL CIERRE.VAL\n` + gramaticapp;
        gramatical = `<ETIQUETA> := <APERTURA> <CONTENIDO> <CIERRE> \n` + gramatical;
    
break;
case 12:

            listaErrores.push(new TokenError("XML",'Este es un error sintáctico: ' , "Me recupero con: " + yytext , _$[$0-1].first_line, _$[$0].first_column ));
            
        
break;
case 13:

        this.$ = {}
        this.$["etiqueta"] = $$[$0-2];
        this.$["tipo"] = "unica";
        this.$["atributos"] = [];
        this.$["linea"] = _$[$0-2].first_line;
        this.$["columna"] = _$[$0-2].first_column;    

        // CST
        nodoPadre = new Nodo("ETIQUETA UNICA","ETIQUETA UNICA");
        nodoPadre.agregarHijo(new Nodo("APERTURA", $$[$0-3]));
        nodoPadre.agregarHijo(new Nodo("ETIQUETA", $$[$0-2]));
        if ($$[$0-1]) {
            this.$['atributos'] = $$[$0-1]['atributos'];
            nodoPadre.agregarHijo($$[$0-1]['nodo']);
        }
        nodoPadre.agregarHijo(new Nodo("CIERRE", $$[$0]));

        this.$['nodo'] = nodoPadre;

        // REPORTE GRAMATICAL
        gramaticapp = `ETIQUETA_UNICA.VAL -> abre.lexval etiqueta.lexval ATRIBUTOS.VAL cierra_dos.lexval\n` + gramaticapp;
        gramatical = `<ETIQUETA_UNICA> := ${$$[$0-3]} ${$$[$0-2]} <ATRIBUTOS> ${$$[$0]} \n` + gramatical;
    
break;
case 14:

        this.$ = {}
        this.$["etiqueta"] = $$[$0-2];
        this.$["tipo"] = "completa";
        this.$["atributos"] = [];
        this.$["linea"] = _$[$0-2].first_line;
        this.$["columna"] = _$[$0-2].first_column;

        // CST
        nodoPadre = new Nodo('ETIQUETA COMPLETA', 'ETIQUETA COMPLETA');
        nodoPadre.agregarHijo(new Nodo("APERTURA",$$[$0-3]));
        nodoPadre.agregarHijo(new Nodo("ETIQUETA", $$[$0-2]));

        if($$[$0-1]) {
            this.$['atributos'] = $$[$0-1]['atributos'];
            nodoPadre.agregarHijo($$[$0-1]['nodo']);
        } 

        nodoPadre.agregarHijo(new Nodo("CIERRE",$$[$0]));

        this.$['nodo'] = nodoPadre;


        // REPORTE GRAMATICAL
        gramaticapp = `APERTURA.VAL -> abre.lexval etiqueta.lexval ATRIBUTOS.VAL cierra.lexval\n` + gramaticapp;
        gramatical = `<APERTURA> := ${$$[$0-3]} ${$$[$0-2]} <ATRIBUTOS> ${$$[$0]} \n` + gramatical;

        // Verificar Etiqueta
        verificarEtiquetas.push(new Token("ETIQUETA",$$[$0-2] , _$[$0-2].first_line, _$[$0-2].first_column ));
    
break;
case 15:

        // CST
        nodoPadre = new Nodo("ATRIBUTOS", "ATRIBUTOS");
        nodoPadre.agregarHijo($$[$0-1]['nodo']);
        if ($$[$0] && $$[$0]['nodo']) {
            nodoPadre.agregarHijo($$[$0]['nodo']);
        }

        // GUARDAR LOS DATOS
        this.$ = {
            'atributos': [$$[$0-1]]
        }

        if ($$[$0]) {
            $$[$0]['atributos'].forEach(atributo => {
                this.$['atributos'].push(atributo);
            });
        }

        // ALMACENANDO EL NODO
        this.$['nodo'] = nodoPadre;

        // REPORTE GRAMATICAL
        gramaticapp = `ATRIBUTOS.VAL -> ATRIBUTO.VAL ATRIBUTOS.VAL \n` + gramaticapp;
        gramatical = `<ATRIBUTOS> := <ATRIBUTO> <ATRIBUTOS> \n` + gramatical;
    
break;
case 16:

        // REPORTE GRAMATICAL
        gramaticapp = `ATRIBUTOS.VAL -> ε \n` + gramaticapp;
        gramatical = `<ATRIBUTOS> := ε \n` + gramatical;
    
break;
case 17:

        // CST
        nodoPadre = new Nodo("ATRIBUTO", "ATRIBUTO");
        nodoPadre.agregarHijo(new Nodo("ETIQUETA", $$[$0-2]));    
        nodoPadre.agregarHijo(new Nodo("IGUAL", $$[$0-1]));    
        nodoPadre.agregarHijo(new Nodo("VALOR", $$[$0].replaceAll('"','')));
        

        // GUARDAR LOS DATOS
        this.$ = {};
        this.$["valorAtributo"] = $$[$0].replaceAll('"','');
        this.$["nombreAtributo"]=$$[$0-2];
        this.$["tipo"] = "atributo";
        this.$["linea"] = _$[$0-2].first_line;
        this.$["columna"] = _$[$0-2].first_column;

        // ALMACENANDO EL CST
        this.$["nodo"] = nodoPadre;
         
         // REPORTE GRAMATICAL
        gramaticapp = `ATRIBUTO.VAL -> etiqueta.lexval igual.lexval cadena.lexval \n` + gramaticapp;
        gramatical = `<ATRIBUTO> := ${$$[$0-2]} ${$$[$0-1]} ${$$[$0]} \n` + gramatical;

    
break;
case 18:

        // CST
        nodoPadre = new Nodo("CONTENIDO", "CONTENIDO");
        nodoPadre.agregarHijo(new Nodo('ETIQUETA', $$[$0-1]));
        if ($$[$0] && $$[$0]['nodo']) {
            nodoPadre.agregarHijo($$[$0]['nodo']);
        }

        // GUARDAR LOS DATOS
        this.$ = {}
        this.$["hijos"] = [];
        this.$["texto"] = $$[$0-1];


        if ($$[$0]) {           
            if ($$[$0]["hijos"].length > 0) {
                $$[$0]["hijos"].forEach(hijo => {
                    this.$["hijos"].push(hijo);
                });
            }

            if ($$[$0]["texto"] !== "" || $$[$0]["texto"] !== " ") {
                this.$["texto"] += " " + $$[$0]["texto"];
            }
        }

        // AGREGAR A LOS DATOS
        this.$['nodo'] = nodoPadre

        // REPORTE GRAMATICAL
        gramaticapp = `CONTENIDO.VAL -> etiqueta.lexval CONTENIDO.VAL \n` + gramaticapp;
        gramatical = ` <CONTENIDO> := ${$$[$0-1]} <CONTENIDO> \n` + gramatical;
    
break;
case 19:

        // CST
        nodoPadre = new Nodo("CONTENIDO", "CONTENIDO");
        nodoPadre.agregarHijo(new Nodo('NUMERO', $$[$0-1]));
        if ($$[$0] && $$[$0]['nodo']) {
            nodoPadre.agregarHijo($$[$0]['nodo']);
        }

        // GUARDAR LOS DATOS
        this.$ = {}
        this.$["hijos"] = [];
        this.$["texto"] = $$[$0-1];


        if ($$[$0]) {           
            if ($$[$0]["hijos"].length > 0) {
                $$[$0]["hijos"].forEach(hijo => {
                    this.$["hijos"].push(hijo);
                });
            }

            if ($$[$0]["texto"] !== "" || $$[$0]["texto"] !== " ") {
                this.$["texto"] += " " + $$[$0]["texto"];
            }
        }

        // AGREGAR A LOS DATOS
        this.$['nodo'] = nodoPadre

        // REPORTE GRAMATICAL
        gramaticapp = `CONTENIDO.VAL -> numero.lexval CONTENIDO.VAL \n` + gramaticapp;
        gramatical = `<CONTENIDO> := ${$$[$0-1]} <CONTENIDO> \n` + gramatical;

    
break;
case 20:

        // CST
        nodoPadre = new Nodo("CONTENIDO", "CONTENIDO");
        nodoPadre.agregarHijo($$[$0-1]['nodo']);
        if ($$[$0] && $$[$0]['nodo']) {
            nodoPadre.agregarHijo($$[$0]['nodo']);
        }

        // GUARDAR LOS DATOS
        this.$ = {};
        this.$["texto"] = "";
        this.$["hijos"] = [$$[$0-1]];

        if ($$[$0]) {           
            if ($$[$0]["hijos"].length > 0) {
                $$[$0]["hijos"].forEach(hijo => {
                    this.$["hijos"].push(hijo);
                });
            }

            if ($$[$0]["texto"] !== "" || $$[$0]["texto"] !== " ") {
                this.$["texto"] += " " + $$[$0]["texto"];
            }
        }

        // AGREGAR A LOS DATOS
        this.$['nodo'] = nodoPadre

        // REPORTE GRAMATICAL
        gramaticapp = `CONTENIDO.VAL -> ETIQUETA.VAL CONTENIDO.VAL \n` + gramaticapp;
        gramatical = `<CONTENIDO> := <ETIQUETA> <CONTENIDO> \n` + gramatical;
    
break;
case 21:

        // CST
        nodoPadre = new Nodo("CONTENIDO", "CONTENIDO");
        nodoPadre.agregarHijo(new Nodo('CARACTER', $$[$0-1]));
        if ($$[$0] && $$[$0]['nodo']) {
            nodoPadre.agregarHijo($$[$0]['nodo']);
        }

        this.$ = {}
        this.$["hijos"] = [];
        this.$["texto"] = $$[$0-1];


        if ($$[$0]) {           
            if ($$[$0]["hijos"].length > 0) {
                $$[$0]["hijos"].forEach(hijo => {
                    this.$["hijos"].push(hijo);
                });
            }

            if ($$[$0]["texto"] !== "" || $$[$0]["texto"] !== " ") {
                this.$["texto"] += " " + $$[$0]["texto"];
            }
        }

        // AGREGAR A LOS DATOS
        this.$['nodo'] = nodoPadre;

        // REPORTE GRAMATICAL
        gramaticapp = `CONTENIDO.VAL  -> CARACTERESPECIAL.VAL CONTENIDO.VAL \n` + gramaticapp;
        gramatical = `<CONTENIDO> := ${$$[$0-1]} <CONTENIDO> \n` + gramatical;

    
break;
case 23:

            this.$ = "<";
            // REPORTE GRAMATICAL
            gramaticapp = `CARACTERESPECIAL.VAL -> less.lexval \n` + gramaticapp;
            gramatical = `<CARAESPECIAL> := ${$$[$0]} \n` + gramatical;
        
break;
case 24:

            this.$ = ">";
            // REPORTE GRAMATICAL
            gramaticapp = `CARACTERESPECIAL.VAL -> great.lexval\n` + gramaticapp;
            gramatical = `<CARAESPECIAL> := ${$$[$0]} \n` + gramatical;
        
break;
case 25:

            this.$ = "&";
            // REPORTE GRAMATICAL
            gramaticapp = `CARACTERESPECIAL.VAL -> amper.lexval \n` + gramaticapp;
            gramatical = `<CARAESPECIAL> := ${$$[$0]} \n` + gramatical;
        
break;
case 26:

            this.$ = "'";
            // REPORTE GRAMATICAL
            gramaticapp = `CARACTERESPECIAL.VAL -> apostro.lexval\n` + gramaticapp;
            gramatical = `<CARAESPECIAL> := ${$$[$0]} \n` + gramatical;
        
break;
case 27:

            this.$ = '"';
            // REPORTE GRAMATICAL
            gramaticapp = `CARACTERESPECIAL.VAL -> quota.lexval\n` + gramaticapp;
            gramatical = `<CARAESPECIAL> := ${$$[$0]} \n` + gramatical;
        
break;
case 28:

        this.$ = {}

        // CST
        nodoPadre = new Nodo("CIERRE", "CIERRE");
        nodoPadre.agregarHijo(new Nodo("APERTURA", $$[$0-2]));
        nodoPadre.agregarHijo(new Nodo("ETIQUETA", $$[$0-1]));
        nodoPadre.agregarHijo(new Nodo("CIERRE", $$[$0]));

        this.$['nodo'] = nodoPadre;

        // REPORTE GRAMATICAL
        gramaticapp = `CIERRE.VAL -> abre.lexval etiqueta.lexval cierra.lexval \n` + gramaticapp;
        gramatical = `<CIERRE> := ${$$[$0-2]} ${$$[$0-1]} ${$$[$0]} \n` + gramatical;

        //VERIFICAR ETIQUETA
        let etiqueta = verificarEtiquetas.pop();
        if (etiqueta.lexema === $$[$0-1]) {
            // Etiqueta correcta
        } else {
            listaErrores.push(new TokenError("XML", "Semantico", `Se abrio la etiqueta ${etiqueta.lexema} en la linea ${etiqueta.linea} y se esta cerrando con ${$$[$0-1]} en la linea ${_$[$0-1].first_line}` , _$[$0-1].first_line, _$[$0-1].first_column ));
        }
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:[1,3],11:4,16:5,17:6,18:7,22:$V1},{1:[3]},{5:[1,10]},{7:11,12:[1,12]},{5:[2,3]},{5:[2,9]},o($V2,[2,10]),{2:$V0,16:16,17:6,18:7,19:13,22:$V1,23:$V3,27:$V4,28:17,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va},{21:[1,23]},{23:[1,24]},{1:[2,1]},o($Vb,[2,6],{8:25,14:[1,26]}),{13:[1,27]},{20:28,34:[1,29]},{2:$V0,16:16,17:6,18:7,19:30,22:$V1,23:$V3,27:$V4,28:17,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va},{2:$V0,16:16,17:6,18:7,19:31,22:$V1,23:$V3,27:$V4,28:17,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va},{2:$V0,16:16,17:6,18:7,19:32,22:$V1,23:$V3,27:$V4,28:17,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va},{2:$V0,16:16,17:6,18:7,19:33,22:$V1,23:$V3,27:$V4,28:17,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va},o($Vc,[2,23]),o($Vc,[2,24]),o($Vc,[2,25]),o($Vc,[2,26]),o($Vc,[2,27]),o($V2,[2,12]),o($Vd,$Ve,{24:34,26:35,23:$Vf}),{9:37,10:[2,8],15:[1,38]},{12:[1,39]},o([10,14,15],[2,4]),o($V2,[2,11]),{23:[1,40]},{34:[2,18]},{34:[2,19]},{34:[2,20]},{34:[2,21]},{21:[1,42],25:[1,41]},o($Vd,$Ve,{26:35,24:43,23:$Vf}),{12:[1,44]},{10:[1,45]},{12:[1,46]},{13:[1,47]},{21:[1,48]},o($V2,[2,13]),o($Vc,[2,14]),o($Vd,[2,15]),{13:[1,49]},{2:$V0,11:50,16:5,17:6,18:7,22:$V1},{13:[1,51]},o($Vb,[2,5]),o($V2,[2,28]),o([21,23,25],[2,17]),{5:[2,2]},{10:[2,7]}],
defaultActions: {4:[2,3],5:[2,9],10:[2,1],30:[2,18],31:[2,19],32:[2,20],33:[2,21],50:[2,2],51:[2,7]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    
    let listaTokens = [];
    let listaErrores = [];
    let nodoPadre;
    let gramatical = ' ';
    let gramaticapp = ' ';
    let tipoencoding = ' ';    

    let verificarEtiquetas = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2:
break;
case 3: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_inicio_prologo";
break;
case 4: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 10;
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 14;
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 15;
break;
case 7: listaTokens.push(new Token("Abre", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 8: listaTokens.push(new Token("Cierra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 9: listaTokens.push(new Token("Abre", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 22;
break;
case 10: listaTokens.push(new Token("Cierra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 21;
break;
case 11: listaTokens.push(new Token("PPmenor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 12: listaTokens.push(new Token("PPmayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 13: listaTokens.push(new Token("PPampersand", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 14: listaTokens.push(new Token("PPapostrofe", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32;
break;
case 15: listaTokens.push(new Token("PPcomillas", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 16: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 12;
break;
case 17: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 18: return "EOF"; 
break;
case 19: listaTokens.push(new Token("Etiqueta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_etiqueta";
break;
case 20: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 21: return "EOF"; 
break;
case 22: listaErrores.push(new TokenError("XML",'Error Lexico ' , "Caracter desconocido " + yy_.yytext ,  yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:[<][!][-][-][^>]*[-][-]+[>])/,/^(?:<\?xml version\b)/,/^(?:\?>)/,/^(?:encoding\b)/,/^(?:standalone\b)/,/^(?:<\/)/,/^(?:\/>)/,/^(?:<)/,/^(?:>)/,/^(?:&lt;)/,/^(?:&gt;)/,/^(?:&amp;)/,/^(?:&apos;)/,/^(?:&quot;)/,/^(?:=)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:$)/,/^(?:[a-zA-Z_À-ÿ\u00F1\u00D1]([a-zA-ZÀ-ÿ\-\.\u00F1\u00D10-9_])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xmlDerecha;
exports.Parser = xmlDerecha.Parser;
exports.parse = function () { return xmlDerecha.parse.apply(xmlDerecha, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}