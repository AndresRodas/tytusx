/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ascendente = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,24],$V2=[1,44],$V3=[1,45],$V4=[1,46],$V5=[1,47],$V6=[1,48],$V7=[1,49],$V8=[1,50],$V9=[1,51],$Va=[1,52],$Vb=[1,38],$Vc=[1,39],$Vd=[1,40],$Ve=[1,41],$Vf=[1,42],$Vg=[1,43],$Vh=[1,57],$Vi=[1,37],$Vj=[1,33],$Vk=[1,34],$Vl=[1,35],$Vm=[1,36],$Vn=[1,54],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,15],$Vy=[1,16],$Vz=[1,10],$VA=[1,22],$VB=[1,21],$VC=[5,54,61,62,83,89,92,93,97,100],$VD=[1,78],$VE=[1,79],$VF=[1,74],$VG=[5,54,61,62,69,83,89,92,93,97,100],$VH=[1,81],$VI=[83,89,92,93,97],$VJ=[5,54,61,62,68,69,83,89,92,93,97,100],$VK=[1,84],$VL=[1,87],$VM=[1,94],$VN=[1,95],$VO=[5,54,61,62,68,69,83,89,92,93,97,100,104,105,106,107,108,109,111,112],$VP=[1,96],$VQ=[1,97],$VR=[5,49,54,61,62,68,69,70,83,89,92,93,97,100,104,105,106,107,108,109,111,112],$VS=[1,102],$VT=[1,103],$VU=[5,23,25,49,54,61,62,68,69,70,83,89,92,93,97,100,104,105,106,107,108,109,111,112],$VV=[1,106],$VW=[5,23,25,49,52,54,61,62,68,69,70,83,89,92,93,97,100,104,105,106,107,108,109,111,112],$VX=[2,68],$VY=[2,67],$VZ=[2,78],$V_=[2,81],$V$=[2,80],$V01=[2,69],$V11=[2,70],$V21=[2,72],$V31=[2,71],$V41=[2,74],$V51=[2,73],$V61=[2,76],$V71=[2,82],$V81=[1,128],$V91=[1,129],$Va1=[1,131],$Vb1=[1,130],$Vc1=[1,133],$Vd1=[1,132],$Ve1=[1,134],$Vf1=[1,138],$Vg1=[1,127],$Vh1=[1,126],$Vi1=[1,135],$Vj1=[1,137],$Vk1=[1,136],$Vl1=[2,83],$Vm1=[1,142],$Vn1=[2,77],$Vo1=[1,143],$Vp1=[2,75],$Vq1=[1,144],$Vr1=[2,79],$Vs1=[1,145],$Vt1=[5,12,15,23,25,49,52,54,61,62,68,69,70,83,87,88,89,92,93,97,100,104,105,106,107,108,109,111,112],$Vu1=[62,83,89,92,93,97],$Vv1=[1,161],$Vw1=[1,159],$Vx1=[1,158],$Vy1=[1,160],$Vz1=[54,62],$VA1=[5,12,18,23,25,49,52,54,61,62,68,69,70,83,89,92,93,97,100,104,105,106,107,108,109,111,112],$VB1=[1,194],$VC1=[54,61,62],$VD1=[12,15,87,88],$VE1=[12,18];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"RAIZ":3,"DECLARACIONES":4,"EOF":5,"declare":6,"VAR_DECL":7,"EXPR_SINGLE":8,"variable":9,"$":10,"VAR_NAME":11,":=":12,"VAR_VALUE":13,"TYPE_DECL":14,"as":15,"SEQUENCE_TYPE":16,"ITEM_TYPE":17,"OCCURRENCE_INDICATOR":18,"KIND_TEST":19,"PARENTHESIZED_EXPR":20,"EQNAME":21,"QUERY":22,"/":23,"PATH_EXPR":24,"//":25,"STEP_EXPR":26,"POST_FIX_EXPR":27,"AXIS_STEP":28,"REVERSE_STEP":29,"PREDICATE_LIST":30,"FORWARD_STEP":31,"attribute":32,"::":33,"NODE_TEST":34,"child":35,"descendant":36,"descendant-or-self":37,"following":38,"following-sibling":39,"namespace":40,"self":41,"@":42,"ancestor":43,"ancestor-or-self":44,"parent":45,"preceding":46,"preceding-sibling":47,"..":48,"*":49,"PRIMARY_EXPR":50,"PREDICATE":51,"[":52,"EXPR":53,"]":54,".":55,"cadena":56,"digito":57,"decimal":58,"QUERY_LIST":59,"(":60,")":61,",":62,"text":63,"node":64,"last":65,"position":66,"nodename":67,"and":68,"or":69,"div":70,"mod":71,"FLWOR_EXPR":72,"IF_EXPR":73,"OR_EXPR":74,"INITIAL_CLAUSE":75,"INTERMEDIATE_CLAUSE_LIST":76,"RETURN_CLAUSE":77,"FOR_CLAUSE":78,"LET_CLAUSE":79,"INTERMEDIATE_CLAUSE":80,"WHERE_CLAUSE":81,"ORDERBY_CLAUSE":82,"for":83,"FOR_BINDING_LIST":84,"FOR_BINDING":85,"POSITIONAL_VAR":86,"in":87,"at":88,"let":89,"LET_BINDING_LIST":90,"LET_BINDING":91,"where":92,"order":93,"by":94,"ORDER_SPEC_LIST":95,"ORDER_SPEC":96,"return":97,"if":98,"then":99,"else":100,"AND_EXPR":101,"COMPARISON_EXPR":102,"ADDITIVE_EXPR":103,"<":104,">":105,"<=":106,">=":107,"=":108,"!=":109,"MULTIPLICATIVE_EXPR":110,"+":111,"-":112,"UNARY_EXPR":113,"ERROR":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"declare",9:"variable",10:"$",12:":=",15:"as",18:"OCCURRENCE_INDICATOR",23:"/",25:"//",32:"attribute",33:"::",35:"child",36:"descendant",37:"descendant-or-self",38:"following",39:"following-sibling",40:"namespace",41:"self",42:"@",43:"ancestor",44:"ancestor-or-self",45:"parent",46:"preceding",47:"preceding-sibling",48:"..",49:"*",52:"[",54:"]",55:".",56:"cadena",57:"digito",58:"decimal",60:"(",61:")",62:",",63:"text",64:"node",65:"last",66:"position",67:"nodename",68:"and",69:"or",70:"div",71:"mod",83:"for",87:"in",88:"at",89:"let",92:"where",93:"order",94:"by",97:"return",98:"if",99:"then",100:"else",104:"<",105:">",106:"<=",107:">=",108:"=",109:"!=",111:"+",112:"-"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[7,5],[7,6],[14,2],[16,2],[16,1],[17,1],[17,1],[13,1],[11,1],[22,1],[22,2],[22,2],[22,1],[24,3],[24,3],[24,1],[26,1],[26,1],[28,1],[28,2],[28,1],[28,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[34,1],[34,1],[34,1],[27,1],[27,2],[30,2],[30,1],[51,3],[50,1],[50,1],[50,1],[50,1],[50,1],[50,2],[50,3],[20,2],[20,3],[59,3],[59,1],[19,3],[19,3],[19,3],[19,3],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[53,3],[53,1],[8,1],[8,1],[8,1],[72,3],[72,2],[75,1],[75,1],[76,2],[76,1],[80,1],[80,1],[80,1],[78,2],[84,3],[84,1],[85,5],[85,4],[86,3],[79,2],[90,3],[90,1],[91,4],[81,3],[82,4],[95,3],[95,1],[96,1],[77,3],[73,8],[74,1],[74,3],[101,1],[101,3],[102,1],[102,3],[102,3],[102,3],[102,3],[102,3],[102,3],[103,1],[103,3],[103,3],[110,1],[110,3],[110,3],[113,1],[113,2],[113,2],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,5:[1,3],6:[1,4],8:5,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},{1:[3]},{5:[1,67]},{1:[2,2]},{7:68,9:[1,69]},{5:[2,4]},o($VC,[2,90]),o($VC,[2,91]),o($VC,[2,92],{69:[1,70]}),{75:75,76:71,77:72,78:12,79:13,80:73,81:76,82:77,83:$Vx,89:$Vy,92:$VD,93:$VE,97:$VF},{60:[1,80]},o($VG,[2,119],{68:$VH}),o($VI,[2,95]),o($VI,[2,96]),o($VJ,[2,121]),{10:$VK,84:82,85:83},{10:$VL,90:85,91:86},o($VJ,[2,123],{104:[1,88],105:[1,89],106:[1,90],107:[1,91],108:[1,92],109:[1,93],111:$VM,112:$VN}),o($VO,[2,130],{49:$VP,70:$VQ}),o($VR,[2,133]),o($VR,[2,136]),{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,111:$VA,112:$VB,113:98},{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,111:$VA,112:$VB,113:99},o([5,54,61,62,83,89,92,93,97,100,104,105,106,107,108,109,111,112],[2,14],{26:26,27:27,28:28,50:29,29:30,31:31,20:32,34:53,19:55,21:56,24:100,32:$V2,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw}),{19:55,20:32,21:56,24:101,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},o($VR,[2,17],{23:$VS,25:$VT}),o($VU,[2,20]),o($VU,[2,21]),o($VU,[2,22]),o($VU,[2,46],{30:104,51:105,52:$VV}),o($VU,[2,23],{51:105,30:107,52:$VV}),o($VU,[2,25],{51:105,30:108,52:$VV}),o($VW,[2,51]),o($VW,[2,52]),o($VW,[2,53]),o($VW,[2,54]),o($VW,[2,55]),{19:55,20:32,21:56,22:111,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,54:[1,109],55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:110,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},o($VW,$VX,{33:[1,112]}),o($VW,$VY,{33:[1,113]}),o($VW,$VZ,{33:[1,114]}),o($VW,$V_,{33:[1,115]}),o($VW,$V$,{33:[1,116]}),o($VW,[2,42]),o($VW,$V01,{33:[1,117]}),o($VW,$V11,{33:[1,118]}),o($VW,$V21,{33:[1,119]}),o($VW,$V31,{33:[1,120]}),o($VW,$V41,{33:[1,121]}),o($VW,$V51,{33:[1,122]}),o($VW,$V61,{33:[1,123]}),o($VW,$V71,{33:[1,124]}),{19:55,21:56,32:$V81,34:125,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},o($VW,[2,36]),{8:141,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,53:140,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:[1,139],63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},o($VW,[2,43]),o($VW,[2,44]),o($VW,[2,45]),o($VW,$Vl1,{60:$Vm1}),o($VW,$Vn1,{60:$Vo1}),o($VW,$Vp1,{60:$Vq1}),o($VW,$Vr1,{60:$Vs1}),o($Vt1,[2,66]),o($Vt1,[2,84]),o($Vt1,[2,85]),o($Vt1,[2,86]),o($Vt1,[2,87]),{1:[2,1]},{5:[2,3]},{10:[1,146]},{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,101:147,102:14,103:17,110:18,111:$VA,112:$VB,113:19},{75:75,77:148,78:12,79:13,80:149,81:76,82:77,83:$Vx,89:$Vy,92:$VD,93:$VE,97:$VF},o($VC,[2,94]),o($VI,[2,98]),{10:[1,150]},o($VI,[2,99]),o($VI,[2,100]),o($VI,[2,101]),{10:[1,151]},{94:[1,152]},{8:141,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,53:153,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,102:154,103:17,110:18,111:$VA,112:$VB,113:19},o($VI,[2,102],{62:[1,155]}),o($Vu1,[2,104]),{11:156,21:157,32:$V81,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,63:$Vv1,64:$Vw1,65:$Vx1,66:$Vy1,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},o($VI,[2,108],{62:[1,162]}),o($Vu1,[2,110]),{11:163,21:157,32:$V81,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,63:$Vv1,64:$Vw1,65:$Vx1,66:$Vy1,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,103:164,110:18,111:$VA,112:$VB,113:19},{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,103:165,110:18,111:$VA,112:$VB,113:19},{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,103:166,110:18,111:$VA,112:$VB,113:19},{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,103:167,110:18,111:$VA,112:$VB,113:19},{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,103:168,110:18,111:$VA,112:$VB,113:19},{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,103:169,110:18,111:$VA,112:$VB,113:19},{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,110:170,111:$VA,112:$VB,113:19},{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,110:171,111:$VA,112:$VB,113:19},{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,111:$VA,112:$VB,113:172},{19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,111:$VA,112:$VB,113:173},o($VR,[2,137]),o($VR,[2,138]),o($VR,[2,15],{23:$VS,25:$VT}),o($VR,[2,16],{23:$VS,25:$VT}),{19:55,20:32,21:56,26:174,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,20:32,21:56,26:175,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},o($VU,[2,47],{51:176,52:$VV}),o($VW,[2,49]),{8:141,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,53:177,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},o($VU,[2,24],{51:176,52:$VV}),o($VU,[2,26],{51:176,52:$VV}),o($VW,[2,56]),{54:[1,178],62:[1,179]},o($Vz1,[2,61]),{19:55,21:56,32:$V81,34:180,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,21:56,32:$V81,34:181,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,21:56,32:$V81,34:182,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,21:56,32:$V81,34:183,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,21:56,32:$V81,34:184,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,21:56,32:$V81,34:185,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,21:56,32:$V81,34:186,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,21:56,32:$V81,34:187,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,21:56,32:$V81,34:188,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,21:56,32:$V81,34:189,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,21:56,32:$V81,34:190,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,21:56,32:$V81,34:191,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:55,21:56,32:$V81,34:192,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,49:$Vh,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},o($VW,[2,35]),o($Vt1,$VY),o($Vt1,$VX),o($Vt1,$V01),o($Vt1,$V11),o($Vt1,$V31),o($Vt1,$V21),o($Vt1,$V51),o($Vt1,$V41),o($Vt1,$V61),o($Vt1,$VZ),o($Vt1,$V$),o($Vt1,$V_),o($Vt1,$V71),o($VA1,[2,58]),{61:[1,193],62:$VB1},o($VC1,[2,89]),{61:[1,195]},{61:[1,196]},{61:[1,197]},{61:[1,198]},{11:199,21:157,32:$V81,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,63:$Vv1,64:$Vw1,65:$Vx1,66:$Vy1,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},o($VG,[2,120],{68:$VH}),o($VC,[2,93]),o($VI,[2,97]),{8:200,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},{8:201,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},{10:[1,202]},{61:[1,203],62:$VB1},o($VJ,[2,122]),{10:$VK,85:204},{86:205,87:[1,206],88:[1,207]},o($VD1,[2,13]),o($VD1,$Vp1),o($VD1,$Vn1),o($VD1,$Vr1),o($VD1,$Vl1),{10:$VL,91:208},{12:[1,209]},o($VJ,[2,124],{111:$VM,112:$VN}),o($VJ,[2,125],{111:$VM,112:$VN}),o($VJ,[2,126],{111:$VM,112:$VN}),o($VJ,[2,127],{111:$VM,112:$VN}),o($VJ,[2,128],{111:$VM,112:$VN}),o($VJ,[2,129],{111:$VM,112:$VN}),o($VO,[2,131],{49:$VP,70:$VQ}),o($VO,[2,132],{49:$VP,70:$VQ}),o($VR,[2,134]),o($VR,[2,135]),o($VU,[2,18]),o($VU,[2,19]),o($VW,[2,48]),{54:[1,210],62:$VB1},o($VW,[2,57]),{19:55,20:32,21:56,22:211,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},o($VW,[2,37]),o($VW,[2,38]),o($VW,[2,39]),o($VW,[2,40]),o($VW,[2,41]),o($VW,[2,27]),o($VW,[2,28]),o($VW,[2,29]),o($VW,[2,30]),o($VW,[2,31]),o($VW,[2,32]),o($VW,[2,33]),o($VW,[2,34]),o($VA1,[2,59]),{8:212,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},o($VA1,[2,62]),o($VA1,[2,63]),o($VA1,[2,64]),o($VA1,[2,65]),{12:[1,213],14:214,15:[1,215]},o($VC,[2,117]),o($VI,[2,112]),{8:218,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,95:216,96:217,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},{99:[1,219]},o($Vu1,[2,103]),{87:[1,220]},{8:221,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},{10:[1,222]},o($Vu1,[2,109]),{8:223,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},o($VW,[2,50]),o($Vz1,[2,60]),o($VC1,[2,88]),{8:225,13:224,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},{12:[1,226]},{16:227,17:228,19:229,20:230,60:$Vn,63:[1,231],64:[1,232],65:[1,233],66:[1,234]},o($VI,[2,113],{62:[1,235]}),o($Vu1,[2,115]),o($Vu1,[2,116]),{8:236,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},{8:237,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},o($Vu1,[2,106]),{11:238,21:157,32:$V81,35:$V91,36:$Va1,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,43:$Vg1,44:$Vh1,45:$Vi1,46:$Vj1,47:$Vk1,63:$Vv1,64:$Vw1,65:$Vx1,66:$Vy1,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},o($Vu1,[2,111]),{5:[2,5]},{5:[2,12]},{8:225,13:239,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},{12:[2,7]},{12:[2,9],18:[1,240]},o($VE1,[2,10]),o($VE1,[2,11]),{60:$Vm1},{60:$Vo1},{60:$Vq1},{60:$Vs1},{8:218,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,96:241,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},{100:[1,242]},o($Vu1,[2,105]),{87:[2,107]},{5:[2,6]},{12:[2,8]},o($Vu1,[2,114]),{8:243,19:55,20:32,21:56,22:20,23:$V0,24:25,25:$V1,26:26,27:27,28:28,29:30,31:31,32:$V2,34:53,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:29,52:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:6,73:7,74:8,75:9,78:12,79:13,83:$Vx,89:$Vy,98:$Vz,101:11,102:14,103:17,110:18,111:$VA,112:$VB,113:19},o($VC,[2,118])],
defaultActions: {3:[2,2],5:[2,4],67:[2,1],68:[2,3],224:[2,5],225:[2,12],227:[2,7],238:[2,107],239:[2,6],240:[2,8]},
parseError: function parseError (str, hash) {
  this.hash = hash;
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignorar espacios en blanco */
break;
case 1:return 25
break;
case 2:return 23
break;
case 3:return 48
break;
case 4:return 55
break;
case 5:return 33
break;
case 6:return 12
break;
case 7:return ':'
break;
case 8:return 42
break;
case 9:return 60
break;
case 10:return 61
break;
case 11:return 52
break;
case 12:return 54
break;
case 13:return '|'
break;
case 14:return 10
break;
case 15:return 44
break;
case 16:return 43
break;
case 17:return 32
break;
case 18:return 35
break;
case 19:return 37
break;
case 20:return 36
break;
case 21:return 39
break;
case 22:return 38
break;
case 23:return 65
break;
case 24:return 40
break;
case 25:return 64
break;
case 26:return 45
break;
case 27:return 66
break;
case 28:return 47
break;
case 29:return 46
break;
case 30:return 41
break;
case 31:return 63
break;
case 32:return 88
break;
case 33:return 15
break;
case 34:return 94
break;
case 35:return 6
break;
case 36:return 100
break;
case 37:return 83
break;
case 38:return 98
break;
case 39:return 87
break;
case 40:return 89
break;
case 41:return 93
break;
case 42:return 97
break;
case 43:return 99
break;
case 44:return 'to'
break;
case 45:return 9
break;
case 46:return 92
break;
case 47:return 'eq'
break;
case 48:return 'ne'
break;
case 49:return 'lt'
break;
case 50:return 'le'
break;
case 51:return 'gt'
break;
case 52:return 'ge'
break;
case 53:return 68
break;
case 54:return 69
break;
case 55:return 106
break;
case 56:return 104
break;
case 57:return 107
break;
case 58:return 105
break;
case 59:return 108
break;
case 60:return 109
break;
case 61:return 49
break;
case 62:return 70
break;
case 63:return 71
break;
case 64:return 111
break;
case 65:return 112
break;
case 66:return 67
break;
case 67:return 58
break;
case 68:return 57
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 56;
break;
case 70:return 5;
break;
case 71:
                            excepciones.push(new Excepcion('Léxico', `Patrón desconocido ${yy_.yytext}`, yy_.yylloc.first_line, yy_.yylloc.first_column));
                            console.log(`Error Léxico: ${yy_.yytext} en la linea ${yy_.yylloc.first_line} y columna ${yy_.yylloc.first_column}`);

break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:::)/,/^(?::=)/,/^(?::)/,/^(?:@)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\|)/,/^(?:\$)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:last\b)/,/^(?:namespace\b)/,/^(?:node\b)/,/^(?:parent\b)/,/^(?:position\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:at\b)/,/^(?:as\b)/,/^(?:by\b)/,/^(?:declare\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:let\b)/,/^(?:order\b)/,/^(?:return\b)/,/^(?:then\b)/,/^(?:to\b)/,/^(?:variable\b)/,/^(?:where\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:=)/,/^(?:!=)/,/^(?:\*)/,/^(?:div\b)/,/^(?:mod\b)/,/^(?:\+)/,/^(?:-)/,/^(?:(([a-zñÑA-Z])[a-zA-ZñÑ0-9_-]*))/,/^(?:(([0-9]+)?\.([0-9]+)+))/,/^(?:([0-9]+))/,/^(?:(((")|('))((?:\\((")|('))|(?:(?!((")|('))).))*)((")|('))))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ascendente;
exports.Parser = ascendente.Parser;
exports.parse = function () { return ascendente.parse.apply(ascendente, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
