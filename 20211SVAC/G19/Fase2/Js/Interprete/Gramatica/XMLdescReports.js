/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XMLdescReports = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[2,4],$V3=[2,5,8],$V4=[11,15],$V5=[2,54],$V6=[1,16],$V7=[1,15],$V8=[2,57],$V9=[1,40],$Va=[1,39],$Vb=[1,41],$Vc=[1,48],$Vd=[1,54],$Ve=[1,56],$Vf=[1,55],$Vg=[1,60],$Vh=[1,58],$Vi=[1,59],$Vj=[1,42],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,57],$Vv=[2,9,11,15],$Vw=[2,47],$Vx=[2,24],$Vy=[2,8,13],$Vz=[9,13,16,17,18,21,23,24,25,28,29,30,31,32,33,34,35,36,37,38,39],$VA=[1,75],$VB=[1,76],$VC=[16,21];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"MOBJETOS":4,"EOF":5,"MOBJETO":6,"OTRO_OBJETO":7,"tk_menor":8,"tk_identificador":9,"LATRIBUTOS":10,"tk_mayor":11,"OBJETOS":12,"tk_menorslash":13,"TEXTOS":14,"tk_slash":15,"tk_interrogacion":16,"tk_xml":17,"tk_version":18,"tk_igual":19,"CADENA":20,"tk_encoding":21,"FINERROR":22,"tk_texto":23,"tk_cadena1":24,"tk_cadena2":25,"TEXTO":26,"OTRO_TEXTO":27,"tk_numero":28,"tk_lt":29,"tk_gt":30,"tk_amp":31,"tk_apos":32,"tk_squote":33,"tk_dquote":34,"tk_corchetea":35,"tk_corchetec":36,"tk_llavea":37,"tk_llavec":38,"tk_quot":39,"OBJETO":40,"OTRO_UOBJETO":41,"ATRIBUTOS":42,"ATRIBUTO":43,"OTRO_ATRIBUTO":44,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tk_menor",9:"tk_identificador",11:"tk_mayor",13:"tk_menorslash",15:"tk_slash",16:"tk_interrogacion",17:"tk_xml",18:"tk_version",19:"tk_igual",21:"tk_encoding",23:"tk_texto",24:"tk_cadena1",25:"tk_cadena2",28:"tk_numero",29:"tk_lt",30:"tk_gt",31:"tk_amp",32:"tk_apos",33:"tk_squote",34:"tk_dquote",35:"tk_corchetea",36:"tk_corchetec",37:"tk_llavea",38:"tk_llavec",39:"tk_quot"},
productions_: [0,[3,2],[4,2],[7,2],[7,0],[6,8],[6,8],[6,7],[6,5],[6,11],[6,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[20,1],[20,1],[14,2],[27,2],[27,0],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[12,2],[41,2],[41,0],[40,8],[40,8],[40,7],[40,5],[40,1],[10,1],[10,0],[42,2],[44,2],[44,0],[43,3],[43,3],[43,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 RGxmlDesc.agregarElemento("INICIO -> listaObjetosRaiz","INICIO.val := ListaObjetosRaiz.val");
                            var root = new NodoArbol("INICIO","");
                            root.agregarHijo($$[$0-1][1]);                              
                            console.log(ListaErr.getErrores());
                            console.log("TODO BIEN, TODO CORRECTO :D!! (Version 2)");
                            this.$ = [$$[$0-1][0], root]
                            return this.$;
                            
break;
case 2:
 RGxmlDesc.agregarElemento("ListaObjetosRaiz -> ObjetoRaiz OtroObjetoRaiz","ListaObjetosRaiz.val := ObjetoRaiz.val.concat(OtroObjetoRaiz.val)");
                                nodoAux = new NodoArbol("ListaObjetosRaiz","");                                  
                                nodoAux.agregarHijo($$[$0-1][1]);
                                nodoAux.agregarHijo($$[$0][1]);
                                arr = [$$[$0-1][0]];
                                arr = arr.concat($$[$0][0]); 
                                this.$ = [arr,nodoAux]; 
break;
case 3:
     RGxmlDesc.agregarElemento("OtroObjeto -> ObjetoRaiz OtroObjeto","OtroObjeto.val :=  ObjetoRaiz.val.concat(OtroObjetoRaiz.val)");
                                        nodoAux = new NodoArbol("OtroObjeto","");                                  
                                        nodoAux.agregarHijo($$[$0-1][1]);
                                        nodoAux.agregarHijo($$[$0][1]);
                                        arr = [$$[$0-1][0]];
                                        arr = arr.concat($$[$0][0]); 
                                        this.$ = [arr,nodoAux]; 
break;
case 4:
     RGxmlDesc.agregarElemento("OtroObjeto -> ϵ","OtroObjeto.val := null");
                objeto = new Objeto("","","",1, 1,[],[],0);
                nodoAux = new NodoArbol("OtroObjeto","");
                nodoAux.agregarHijo(new NodoArbol("ϵ",""));
                this.$ = [[objeto],nodoAux]; 
         
break;
case 5:

                RGxmlDesc.agregarElemento(`Objeto -> "<" id atributos ">" objetos "<" / id>`,"Objeto.val := new Objeto(id.val,atributos.val,objetos.val)");
                nodoAux = new NodoArbol("ObjetoRaiz","");
                nodoAux.agregarHijo(new NodoArbol($$[$0-7],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-6],"identificador"));
                nodoAux.agregarHijo($$[$0-5][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-4],"simbolo"));
                nodoAux.agregarHijo($$[$0-3][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-2],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-1],"identificador"));
                nodoAux.agregarHijo(new NodoArbol($$[$0],"simbolo"));
                objeto = new Objeto($$[$0-6],$$[$0-1],'',_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5][0],$$[$0-3][0],1);
                this.$ = [objeto,nodoAux];
        
break;
case 6:

                RGxmlDesc.agregarElemento(`Objeto -> "<" id atributos ">" textos "<" / id>`,"Objeto.val := new Objeto(id.val,atributos.val,textos.val)");
                nodoAux = new NodoArbol("ObjetoRaiz","");
                nodoAux.agregarHijo(new NodoArbol($$[$0-7],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-6],"identificador"));
                nodoAux.agregarHijo($$[$0-5][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-4],"simbolo"));
                nodoAux.agregarHijo($$[$0-3][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-2],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-1],"identificador"));
                nodoAux.agregarHijo(new NodoArbol($$[$0],"simbolo"));
                objeto = new Objeto($$[$0-6],$$[$0-1],$$[$0-3][0],_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5][0],[],1);
                this.$ = [objeto,nodoAux];
        
break;
case 7:
 
                RGxmlDesc.agregarElemento(`Objeto -> "<" id atributos ">" "<" / id>`,"Objeto.val := new Objeto(id.val,atributos.val,null)");
                nodoAux = new NodoArbol("ObjetoRaiz","");
                nodoAux.agregarHijo(new NodoArbol($$[$0-6],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-5],"identificador"));
                nodoAux.agregarHijo($$[$0-4][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-3],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-2],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-1],"identificador"));
                nodoAux.agregarHijo(new NodoArbol($$[$0],"simbolo"));
                objeto = new Objeto($$[$0-5],$$[$0-1],'',_$[$0-6].first_line, _$[$0-6].first_column,$$[$0-4][0],[],1);
                this.$ = [objeto,nodoAux];
        
break;
case 8:

                RGxmlDesc.agregarElemento(`Objeto -> "<" id atributos / id>`,"Objeto.val := new Objeto(id.val,atributos.val,null)");
                nodoAux = new NodoArbol("ObjetoRaiz","");
                nodoAux.agregarHijo(new NodoArbol($$[$0-4],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-3],"identificador"));
                nodoAux.agregarHijo($$[$0-2][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-1],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0],"simbolo"));
                objeto = new Objeto($$[$0-3],$$[$0-3],'',_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2][0],[],2);
                this.$ = [objeto,nodoAux];
        
break;
case 9:

                RGxmlDesc.agregarElemento(`Objeto -> "<" "?" "xml" "version" "=" Cadena "encoding" "igual" Cadena "?" ">"`,"Objeto.val := new Objeto(encoding,null,null)"); 
                nodoAux = new NodoArbol("ObjetoRaiz","");
                nodoAux.agregarHijo(new NodoArbol($$[$0-10],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-9],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-8],"palabra reservada"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-7],"palabra reservada"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-6],"simbolo"));
                nodoAux.agregarHijo($$[$0-5][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-4],"palabra reservada"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-3],"simbolo"));
                nodoAux.agregarHijo($$[$0-2][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-1],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0],"simbolo"));
                objeto = new Objeto("version","version",$$[$0-2][0],_$[$0-10].first_line, _$[$0-10].first_column,[],[],0);
                this.$ = [objeto,nodoAux];
        
break;
case 10:

                nodoAux = new NodoArbol("ObjetoRaiz","");
                nodoAux.agregarHijo(new NodoArbol("Error",""));
                ListaErr.agregarError(new Error(NumeroE, yylineno,this._$.first_column + 1, "Sintactico", "Se esperaba un objeto y se encontro "+ yytext,"XML")); NumeroE++;
                objeto = new Objeto("","",'',_$[$0].first_line, _$[$0].first_column,[],[],0);
                this.$ = [objeto,nodoAux];
        
break;
case 20:
   RGxmlDesc.agregarElemento(`Cadena -> tk_cadena`,"Cadena.val := tk_cadena.val");
                        nodoAux = new NodoArbol($$[$0],"cadena");
                        this.$ = [$$[$0], nodoAux]; 
break;
case 21:
  RGxmlDesc.agregarElemento(`Cadena -> tk_cadena`,"Cadena.val := tk_cadena.val");
                        nodoAux = new NodoArbol($$[$0],"cadena");
                        this.$ = [$$[$0], nodoAux]; 
break;
case 22:
 RGxmlDesc.agregarElemento(`Textos -> Texto OtroTexto`,`Textos.val := Texto.val + " " + OtroTexto.val`);
                           nodoAux = new NodoArbol("Textos","");                                  
                           nodoAux.agregarHijo($$[$0-1][1]);
                           nodoAux.agregarHijo($$[$0][1]);
                           $$[$0-1][0]= $$[$0-1][0] + " " + $$[$0][0]; 
                           this.$ = [$$[$0-1][0],nodoAux]; 
break;
case 23:
 RGxmlDesc.agregarElemento(`OtroTexto -> Texto OtroTexto`,`OtroTexto.val := Texto.val + " " + OtroTexto.val`);
                               nodoAux = new NodoArbol("OtroTexto","");                                  
                               nodoAux.agregarHijo($$[$0-1][1]);
                               nodoAux.agregarHijo($$[$0][1]);
                               $$[$0-1][0]= $$[$0-1][0] + " " + $$[$0][0]; 
                               this.$ = [$$[$0-1][0],nodoAux]; 
break;
case 24:
 RGxmlDesc.agregarElemento(`OtroTexto -> ϵ`,`OtroTexto.val := ""`);
                               nodoAux = new NodoArbol("OtroTexto","");                                  
                               nodoAux.agregarHijo(new NodoArbol(`""`,""));
                               this.$ = ["",nodoAux]; 
break;
case 25: case 26: case 31: case 38: case 39: case 40:
 nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol($$[$0],"texto"));
                                  this.$ = [$$[$0],nodoAux]; 
break;
case 27:
 nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol("<","texto"));
                                  this.$ = ["<",nodoAux]; 
break;
case 28:
 nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol(">","texto"));
                                  this.$ = [">",nodoAux]; 
break;
case 29:
 nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol("&","texto"));
                                  this.$ = ["&",nodoAux]; 
break;
case 30:
 nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol("\'","texto"));
                                  this.$ = ["\'",nodoAux]; 
break;
case 32:
 nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol("interrogracion","texto"));
                                  this.$ = [$$[$0],nodoAux]; 
break;
case 33:
 nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol("comilla doble","texto"));
                                  this.$ = [$$[$0],nodoAux]; 
break;
case 34:
 nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol("corcheteA","texto"));
                                  this.$ = [$$[$0],nodoAux]; 
break;
case 35:
 nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol("corcheteC","texto"));
                                  this.$ = [$$[$0],nodoAux]; 
break;
case 36:
 nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol("Llave abierta","texto"));
                                  this.$ = [$$[$0],nodoAux]; 
break;
case 37:
 nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol("Llave cerrada","texto"));
                                  this.$ = [$$[$0],nodoAux]; 
break;
case 41:
 nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol("&quot;","texto"));
                                  this.$ = ["\"",nodoAux]; 
break;
case 42:
 $$[$0] = `"`+ $$[$0] + `"`;
                                  nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol($$[$0],"texto"));
                                  this.$ = [$$[$0],nodoAux]; 
break;
case 43:
 $$[$0] = `'`+ $$[$0] + `'`;
                                  nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol($$[$0],"texto"));
                                  this.$ = [$$[$0],nodoAux];  
break;
case 44:
 nodoAux = new NodoArbol("TEXTO","");
                                  nodoAux.agregarHijo(new NodoArbol("texto","texto"));
                                  this.$ = [$$[$0],nodoAux];  
break;
case 45:
  RGxmlDesc.agregarElemento("ListaObjetos -> Objeto OtroObjeto","ListaObjetos.val := Objeto.val.concat(OtroObjeto.val)");
                                nodoAux = new NodoArbol("ListaObjetos","");                                  
                                nodoAux.agregarHijo($$[$0-1][1]);
                                nodoAux.agregarHijo($$[$0][1]);
                                arr = [$$[$0-1][0]];
                                arr = arr.concat($$[$0][0]); 
                                this.$ = [arr,nodoAux]; 
break;
case 46:

                                RGxmlDesc.agregarElemento("OtroObjeto -> Objeto OtroObjeto","OtroObjeto.val :=  Objeto.val.concat(OtroObjeto.val)"); 
                                nodoAux = new NodoArbol("OtroObjeto","");                                  
                                nodoAux.agregarHijo($$[$0-1][1]);
                                nodoAux.agregarHijo($$[$0][1]);
                                arr = [$$[$0-1][0]];
                                arr = arr.concat($$[$0][0]); 
                                this.$ = [arr,nodoAux]; 
break;
case 47:
     RGxmlDesc.agregarElemento("OtroObjeto -> ϵ","OtroObjeto.val := null");
                objeto = new Objeto("","","",1, 1,[],[],0);
                nodoAux = new NodoArbol("OtroObjeto","");
                nodoAux.agregarHijo(new NodoArbol("ϵ",""));
                this.$ = [[objeto],nodoAux];
         
break;
case 48:

                RGxmlDesc.agregarElemento(`Objeto -> "<" id atributos ">" objetos "<" / id>`,"Objeto.val := new Objeto(id.val,atributos.val,objetos.val)");
                nodoAux = new NodoArbol("Objeto","");
                nodoAux.agregarHijo(new NodoArbol($$[$0-7],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-6],"identificador"));
                nodoAux.agregarHijo($$[$0-5][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-4],"simbolo"));
                nodoAux.agregarHijo($$[$0-3][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-2],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-1],"identificador"));
                nodoAux.agregarHijo(new NodoArbol($$[$0],"simbolo"));
                objeto = new Objeto($$[$0-6],$$[$0-1],'',_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5][0],$$[$0-3][0],1);
                this.$ = [objeto,nodoAux];
        
break;
case 49:

                RGxmlDesc.agregarElemento(`Objeto -> "<" id atributos ">" textos "<" / id>`,"Objeto.val := new Objeto(id.val,atributos.val,textos.val)");
                nodoAux = new NodoArbol("Objeto","");
                nodoAux.agregarHijo(new NodoArbol($$[$0-7],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-6],"identificador"));
                nodoAux.agregarHijo($$[$0-5][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-4],"simbolo"));
                nodoAux.agregarHijo($$[$0-3][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-2],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-1],"identificador"));
                nodoAux.agregarHijo(new NodoArbol($$[$0],"simbolo"));
                objeto = new Objeto($$[$0-6],$$[$0-1],$$[$0-3][0],_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5][0],[],1);
                this.$ = [objeto,nodoAux];
        
break;
case 50:
 
                RGxmlDesc.agregarElemento(`Objeto -> "<" id atributos ">" "<" / id>`,"Objeto.val := new Objeto(id.val,atributos.val,null)");
                nodoAux = new NodoArbol("Objeto","");
                nodoAux.agregarHijo(new NodoArbol($$[$0-6],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-5],"identificador"));
                nodoAux.agregarHijo($$[$0-4][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-3],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-2],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-1],"identificador"));
                nodoAux.agregarHijo(new NodoArbol($$[$0],"simbolo"));
                objeto = new Objeto($$[$0-5],$$[$0-1],'',_$[$0-6].first_line, _$[$0-6].first_column,$$[$0-4][0],[],1);
                this.$ = [objeto,nodoAux];
        
break;
case 51:

                RGxmlDesc.agregarElemento(`Objeto -> "<" id atributos / id>`,"Objeto.val := new Objeto(id.val,atributos.val,null)");
                nodoAux = new NodoArbol("Objeto","");
                nodoAux.agregarHijo(new NodoArbol($$[$0-4],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0-3],"identificador"));
                nodoAux.agregarHijo($$[$0-2][1]);
                nodoAux.agregarHijo(new NodoArbol($$[$0-1],"simbolo"));
                nodoAux.agregarHijo(new NodoArbol($$[$0],"simbolo"));
                objeto = new Objeto($$[$0-3],$$[$0-3],'',_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2][0],[],2);
                this.$ = [objeto,nodoAux];
         
break;
case 52:

                nodoAux = new NodoArbol("Objeto","");
                nodoAux.agregarHijo(new NodoArbol("Error",""));
                ListaErr.agregarError(new Error(NumeroE, yylineno,this._$.first_column + 1, "Sintactico", "Se esperaba un objeto y se encontro "+ yytext,"XML")); NumeroE++;
                objeto = new Objeto("","",'',_$[$0].first_line, _$[$0].first_column,[],[],0);
                this.$ = [objeto,nodoAux];
        
break;
case 53:
 RGxmlDesc.agregarElemento(`ListaAtributos -> Atributos`,"ListaAtributos.val := Atributos.val");
                          nodoAux = new NodoArbol("ListaAtributos","");
                          nodoAux.agregarHijo($$[$0][1]);
                          this.$ = [$$[$0][0], nodoAux]; 
break;
case 54:
 RGxmlDesc.agregarElemento(`ListaAtributos -> ε`,"ListaAtributos.val := []");
                          nodoAux = new NodoArbol("ListaAtributos","");
                          nodoAux.agregarHijo(new NodoArbol("E","simbolo"));
                          this.$ = [[], nodoAux]; 
break;
case 55:
     RGxmlDesc.agregarElemento("ListaAtributos -> Atributo OtroAtributo","ListaAtributos.val := Atributo.val.concat(OtroAtributo.val)");
                                        nodoAux = new NodoArbol("ListaAtributos","");                                  
                                        nodoAux.agregarHijo($$[$0-1][1]);
                                        nodoAux.agregarHijo($$[$0][1]);
                                        arr = [$$[$0-1][0]];
                                        arr = arr.concat($$[$0][0]); 
                                        this.$ = [arr,nodoAux]; 
break;
case 56:
RGxmlDesc.agregarElemento("OtroAtributo -> Atributo OtroAtributo","OtroAtributo.val :=  Atributo.val.concat(OtroAtributo.val)"); 
                                        nodoAux = new NodoArbol("OtroAtributo","");                                  
                                        nodoAux.agregarHijo($$[$0-1][1]);
                                        nodoAux.agregarHijo($$[$0][1]);
                                        arr = [$$[$0-1][0]];
                                        arr = arr.concat($$[$0][0]); 
                                        this.$ = [arr,nodoAux]; 
break;
case 57:
     RGxmlDesc.agregarElemento("OtroAtributo -> ϵ","OtroAtributo.val := null");
                                        atributo = new Atributo("", "", _$[$0].first_line, _$[$0].first_column);
                                        nodoAux = new NodoArbol("OtroAtributo","");
                                        nodoAux.agregarHijo(new NodoArbol("ϵ",""));
                                        this.$ = [[atributo],nodoAux];    
                                
break;
case 58: case 59:
  RGxmlDesc.agregarElemento(`Atributo -> id "=" Cadena`,"Atributo.val := new Atributo(id.val,cadena.val)");
                                                   nodoAux = new NodoArbol("Atributo","");
                                                   nodoAux.agregarHijo(new NodoArbol($$[$0-2],"identificador"));
                                                   nodoAux.agregarHijo(new NodoArbol($$[$0-1],"simbolo"));
                                                   nodoAux.agregarHijo(new NodoArbol($$[$0],"cadena"));
                                                   atributo = new Atributo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
                                                   this.$ = [atributo,nodoAux]; 
break;
case 60:

        
          nodoAux = new NodoArbol("Atributo","");
          nodoAux.agregarHijo(new NodoArbol("Error",""));
          ListaErr.agregarError(new Error(NumeroE, yylineno, this._$.first_column + 1, "Sintactico", "Se esperaba un atributo y se encontro "+ yytext,"XML")); NumeroE++;
          atributo = null;
          this.$ = [atributo,nodoAux];
          
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,8:$V1},{1:[3]},{5:[1,6]},{2:$V0,5:$V2,6:8,7:7,8:$V1},{9:[1,9],16:[1,10]},o($V3,[2,10]),{1:[2,1]},{5:[2,2]},{2:$V0,5:$V2,6:8,7:11,8:$V1},o($V4,$V5,{10:12,42:13,43:14,2:$V6,9:$V7}),{17:[1,17]},{5:[2,3]},{11:[1,18],15:[1,19]},o($V4,[2,53]),o($V4,$V8,{44:20,43:21,2:$V6,9:$V7}),{19:[1,22]},{5:[1,32],8:[1,25],9:[1,26],11:[1,24],15:[1,27],19:[1,28],22:23,23:[1,29],24:[1,30],25:[1,31]},{18:[1,33]},{2:$V9,8:$Va,9:$Vb,12:34,13:[1,36],14:35,16:$Vc,17:$Vd,18:$Ve,21:$Vf,23:$Vg,24:$Vh,25:$Vi,26:38,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:37},{11:[1,61]},o($V4,[2,55]),o($V4,$V8,{43:21,44:62,2:$V6,9:$V7}),{24:[1,63],25:[1,64]},o($Vv,[2,60]),o($Vv,[2,11]),o($Vv,[2,12]),o($Vv,[2,13]),o($Vv,[2,14]),o($Vv,[2,15]),o($Vv,[2,16]),o($Vv,[2,17]),o($Vv,[2,18]),o($Vv,[2,19]),{19:[1,65]},{13:[1,66]},{13:[1,67]},{9:[1,68]},{2:$V9,8:$Va,13:$Vw,40:70,41:69},{9:$Vb,13:$Vx,16:$Vc,17:$Vd,18:$Ve,21:$Vf,23:$Vg,24:$Vh,25:$Vi,26:72,27:71,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu},{9:[1,73]},o($Vy,[2,52]),o($Vz,[2,25]),o($Vz,[2,26]),o($Vz,[2,27]),o($Vz,[2,28]),o($Vz,[2,29]),o($Vz,[2,30]),o($Vz,[2,31]),o($Vz,[2,32]),o($Vz,[2,33]),o($Vz,[2,34]),o($Vz,[2,35]),o($Vz,[2,36]),o($Vz,[2,37]),o($Vz,[2,38]),o($Vz,[2,39]),o($Vz,[2,40]),o($Vz,[2,41]),o($Vz,[2,42]),o($Vz,[2,43]),o($Vz,[2,44]),o($V3,[2,8]),o($V4,[2,56]),o($Vv,[2,58]),o($Vv,[2,59]),{20:74,24:$VA,25:$VB},{9:[1,77]},{9:[1,78]},{11:[1,79]},{13:[2,45]},{2:$V9,8:$Va,13:$Vw,40:70,41:80},{13:[2,22]},{9:$Vb,13:$Vx,16:$Vc,17:$Vd,18:$Ve,21:$Vf,23:$Vg,24:$Vh,25:$Vi,26:72,27:81,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu},o($V4,$V5,{42:13,43:14,10:82,2:$V6,9:$V7}),{21:[1,83]},o($VC,[2,20]),o($VC,[2,21]),{11:[1,84]},{11:[1,85]},o($V3,[2,7]),{13:[2,46]},{13:[2,23]},{11:[1,86],15:[1,87]},{19:[1,88]},o($V3,[2,5]),o($V3,[2,6]),{2:$V9,8:$Va,9:$Vb,12:89,13:[1,91],14:90,16:$Vc,17:$Vd,18:$Ve,21:$Vf,23:$Vg,24:$Vh,25:$Vi,26:38,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:37},{11:[1,92]},{20:93,24:$VA,25:$VB},{13:[1,94]},{13:[1,95]},{9:[1,96]},o($Vy,[2,51]),{16:[1,97]},{9:[1,98]},{9:[1,99]},{11:[1,100]},{11:[1,101]},{11:[1,102]},{11:[1,103]},o($Vy,[2,50]),o($V3,[2,9]),o($Vy,[2,48]),o($Vy,[2,49])],
defaultActions: {6:[2,1],7:[2,2],11:[2,3],69:[2,45],71:[2,22],80:[2,46],81:[2,23]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

/*var nodoAux = null;
var objeto = null;
var atributo = null; */ 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip commentario content*/
break;
case 4: return 29; 
break;
case 5: return 30; 
break;
case 6: return 31; 
break;
case 7: return 32; 
break;
case 8: return 39; 
break;
case 9: return 28;  
break;
case 10: return 17; 
break;
case 11: return 18; 
break;
case 12: return 21; 
break;
case 13: return 11; 
break;
case 14: return 13; 
break;
case 15: return 8; 
break;
case 16: return 19; 
break;
case 17: return 16; 
break;
case 18: return 15; 
break;
case 19: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 24; 
break;
case 20: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 25; 
break;
case 21: return 9; 
break;
case 22: return 23; 
break;
case 23: return 33; 
break;
case 24: return 34; 
break;
case 25: return 35; 
break;
case 26: return 36; 
break;
case 27: return 37; 
break;
case 28: return 38; 
break;
case 29:/* skip whitespace */
break;
case 30:  /*Los Ignoramos*/   
break;
case 31:  return 5;   
break;
case 32:
        ListaErr.agregarError(new Error(NumeroE, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "Lexico", "El caracter " + yy_.yytext + " no pertenece al lenguaje.","XML")); NumeroE++;
 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:<!--)/i,/^(?:-->)/i,/^(?:.)/i,/^(?:&lt;)/i,/^(?:&gt;)/i,/^(?:&amp;)/i,/^(?:&apos;)/i,/^(?:&quot;)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:xml\b)/i,/^(?:version\b)/i,/^(?:encoding\b)/i,/^(?:>)/i,/^(?:<\/)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:\/)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:([a-zA-ZäëïöüÄËÏÖÜáéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ])[a-zA-Z0-9äëïöüÄËÏÖÜáéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ_]*)/i,/^(?:[a-zA-Z0-9äëïöüÄËÏÖÜáéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ_!@#$%\+\^\'\`\"&\*()/¡:;.,~-]+)/i,/^(?:['])/i,/^(?:["])/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XMLdescReports;
exports.Parser = XMLdescReports.Parser;
exports.parse = function () { return XMLdescReports.parse.apply(XMLdescReports, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}