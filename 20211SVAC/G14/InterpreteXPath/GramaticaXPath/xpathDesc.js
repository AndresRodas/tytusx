/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xpathDesc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,11],$V3=[1,12],$V4=[1,27],$V5=[1,28],$V6=[1,29],$V7=[1,30],$V8=[1,31],$V9=[1,32],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,58],$Vk=[1,64],$Vl=[1,62],$Vm=[1,45],$Vn=[1,59],$Vo=[1,61],$Vp=[1,60],$Vq=[1,44],$Vr=[1,48],$Vs=[1,49],$Vt=[5,43,81],$Vu=[2,94],$Vv=[1,67],$Vw=[5,43,81,100],$Vx=[2,96],$Vy=[1,69],$Vz=[5,43,81,100,101],$VA=[5,13,14,15,16,17,18,43,81,100,101],$VB=[2,98],$VC=[1,80],$VD=[1,79],$VE=[5,13,14,15,16,17,18,27,29,43,81,100,101],$VF=[2,100],$VG=[1,83],$VH=[1,84],$VI=[1,85],$VJ=[5,13,14,15,16,17,18,27,29,43,69,81,96,97,100,101],$VK=[2,102],$VL=[1,87],$VM=[5,13,14,15,16,17,18,27,29,43,69,81,96,97,100,101,102],$VN=[2,106],$VO=[1,94],$VP=[1,93],$VQ=[30,33,47,49,50,51,52,53,54,55,56,59,60,61,62,63,64,69,74,79,80,82,83,84,91,92,93],$VR=[2,104],$VS=[1,97],$VT=[1,98],$VU=[5,13,14,15,16,17,18,27,29,30,33,43,69,81,96,97,100,101,102],$VV=[2,26],$VW=[1,103],$VX=[5,13,14,15,16,17,18,27,29,30,33,42,43,69,81,96,97,100,101,102],$VY=[27,29,30,33,47,49,50,51,52,53,54,55,56,59,60,61,62,63,64,69,74,79,80,82,83,84,91,92,93],$VZ=[2,108],$V_=[69,74,79,82,83,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"EXPRESION_SIMPLE":4,"EOF":5,"EXPRESION_AND":6,"EXPRESION_SIMPLE_P":7,"EXPRESION_COMPARAC":8,"EXPRESION_AND_P":9,"EXPRESION_ADICION":10,"EXPRESION_COMPARAC_P":11,"OPERADORES_LOGICOS":12,"E":13,"NE":14,"LT":15,"LE":16,"GT":17,"GE":18,"EXPRESION_MULTI":19,"EXPRESION_ADICION_P_P":20,"EXPRESION_UNION":21,"EXPRESION_MULTI_P_P":22,"EXPRESION_UNARIA":23,"EXPRESION_UNION_P":24,"RUTA_RELATIVA":25,"SIMBOLO":26,"SUMA":27,"SIMBOLO_P_P":28,"RESTA":29,"DBARRA":30,"PASO":31,"RUTA_RELATIVA_P_P":32,"BARRA":33,"PASO_EJE":34,"POSTFIX":35,"PASO_ADELANTE":36,"LISTA_PREDICADOS_AUX":37,"PASO_ATRAS":38,"LISTA_PREDICADOS":39,"PREDICADO":40,"LISTA_PREDICADOS_P":41,"CORCHETE_ABRE":42,"CORCHETE_CIERRA":43,"EJE_ADELANTE":44,"PRUEBA_NODO":45,"PASO_ADELANTE_ABREV":46,"R_CHILD":47,"ACCESO":48,"R_DESCENDANT":49,"R_ATTRIBUTE":50,"R_SELF":51,"R_DESCENDANT_OR_SELF":52,"R_FOLLOWING_SIBLING":53,"R_FOLLOWING":54,"R_NAMESPACE":55,"ARROBA":56,"EJE_ATRAS":57,"PASO_ATRAS_ABREV":58,"R_PARENT":59,"R_ANCESTOR":60,"R_PRECEDING_SIBLING":61,"R_PRECEDING":62,"R_ANCESTOR_OR_SELF":63,"DPUNTO":64,"NOMBRE_PRUEBA":65,"TIPO_PRUEBA":66,"Q_NAME":67,"WILDCARD":68,"MULTIPLICACION":69,"NOMBRE_PREFIJO":70,"NOMBRE_SIN_PREFIJO":71,"NCNAME":72,"SEPARADOR":73,"IDENTIFICADOR":74,"PRUEBA_TEXTO":75,"PRUEBA_NODE":76,"PRUEBA_POSICION":77,"PRUEBA_ULTIMO":78,"R_LAST":79,"PARENTESIS_ABRE":80,"PARENTESIS_CIERRA":81,"R_TEXT":82,"R_POSITION":83,"R_NODE":84,"EXPRESION_PRIMARIA":85,"POSTFIX_P":86,"LITERAL":87,"EXPRESION_PARENTESIS":88,"EXPRESION_PARENTESIS_P":89,"LITERAL_NUMERO":90,"CADENA":91,"ENTERO":92,"DECIMAL":93,"EXPRESION_ADICION_P":94,"EXPRESION_MULTI_P":95,"R_DIV":96,"R_MOD":97,"SIMBOLO_P":98,"RUTA_RELATIVA_P":99,"R_OR":100,"R_AND":101,"UNION":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"E",14:"NE",15:"LT",16:"LE",17:"GT",18:"GE",27:"SUMA",29:"RESTA",30:"DBARRA",33:"BARRA",42:"CORCHETE_ABRE",43:"CORCHETE_CIERRA",47:"R_CHILD",48:"ACCESO",49:"R_DESCENDANT",50:"R_ATTRIBUTE",51:"R_SELF",52:"R_DESCENDANT_OR_SELF",53:"R_FOLLOWING_SIBLING",54:"R_FOLLOWING",55:"R_NAMESPACE",56:"ARROBA",59:"R_PARENT",60:"R_ANCESTOR",61:"R_PRECEDING_SIBLING",62:"R_PRECEDING",63:"R_ANCESTOR_OR_SELF",64:"DPUNTO",69:"MULTIPLICACION",73:"SEPARADOR",74:"IDENTIFICADOR",79:"R_LAST",80:"PARENTESIS_ABRE",81:"PARENTESIS_CIERRA",82:"R_TEXT",83:"R_POSITION",84:"R_NODE",91:"CADENA",92:"ENTERO",93:"DECIMAL",96:"R_DIV",97:"R_MOD",100:"R_OR",101:"R_AND",102:"UNION"},
productions_: [0,[3,2],[4,2],[6,2],[8,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[10,2],[19,2],[21,2],[23,1],[23,2],[26,2],[26,2],[25,3],[25,3],[25,2],[31,1],[31,1],[34,2],[34,2],[37,1],[37,0],[39,2],[40,3],[36,2],[36,1],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[46,2],[46,1],[38,2],[38,1],[57,2],[57,2],[57,2],[57,2],[57,2],[58,1],[45,1],[45,1],[65,1],[65,1],[68,1],[67,1],[67,1],[70,3],[71,1],[72,1],[66,1],[66,1],[66,1],[66,1],[78,3],[75,3],[77,3],[76,3],[35,2],[85,1],[85,1],[88,2],[87,1],[87,1],[90,1],[90,1],[11,2],[11,2],[11,2],[11,2],[11,2],[11,2],[11,0],[94,2],[94,2],[95,2],[95,2],[95,2],[98,1],[98,1],[99,2],[99,2],[86,4],[86,0],[7,3],[7,0],[9,3],[9,0],[20,2],[20,0],[22,2],[22,0],[24,3],[24,0],[28,2],[28,0],[32,2],[32,0],[41,2],[41,0],[89,1],[89,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 Auxi = []; Auxi = Tokens; Tokens = []; return Auxi; 
break;
}
},
table: [{3:1,4:2,6:3,8:4,10:5,19:6,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},{1:[3]},{5:[1,65]},o($Vt,$Vu,{7:66,100:$Vv}),o($Vw,$Vx,{9:68,101:$Vy}),o($Vz,[2,81],{11:70,13:[1,71],14:[1,72],15:[1,73],16:[1,74],17:[1,75],18:[1,76]}),o($VA,$VB,{20:77,94:78,27:$VC,29:$VD}),o($VE,$VF,{22:81,95:82,69:$VG,96:$VH,97:$VI}),o($VJ,$VK,{24:86,102:$VL}),o($VM,[2,14]),{25:88,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},{31:89,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},{31:90,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},o($VM,$VN,{32:91,99:92,30:$VO,33:$VP}),o($VQ,$VR,{28:95,98:96,27:$VS,29:$VT}),o($VQ,$VR,{98:96,28:99,27:$VS,29:$VT}),o($VU,[2,21]),o($VU,[2,22]),o($VU,$VV,{37:100,39:101,40:102,42:$VW}),o($VU,$VV,{39:101,40:102,37:104,42:$VW}),o($VU,[2,92],{86:105,42:[1,106]}),{45:107,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,82:$Vn,83:$Vo,84:$Vp},o($VX,[2,30]),{45:108,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,82:$Vn,83:$Vo,84:$Vp},o($VX,[2,42]),o($VX,[2,68]),o($VX,[2,69]),{48:[1,109]},{48:[1,110]},{48:[1,111]},{48:[1,112]},{48:[1,113]},{48:[1,114]},{48:[1,115]},{48:[1,116]},{45:117,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,82:$Vn,83:$Vo,84:$Vp},o($VX,[2,40]),{48:[1,118]},{48:[1,119]},{48:[1,120]},{48:[1,121]},{48:[1,122]},o($VX,[2,48]),o($VX,[2,71]),o($VX,[2,72]),{4:125,6:3,8:4,10:5,19:6,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,81:[1,124],82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,89:123,90:43,91:$Vq,92:$Vr,93:$Vs},o($VX,[2,49]),o($VX,[2,50]),o($VX,[2,73]),o($VX,[2,74]),o($VX,[2,51]),o($VX,[2,52]),o($VX,[2,59]),o($VX,[2,60]),o($VX,[2,61]),o($VX,[2,62]),o($VX,[2,54]),o($VX,[2,55]),o($VX,[2,53]),{80:[1,126]},{80:[1,127]},{80:[1,128]},{80:[1,129]},o($VX,[2,57],{73:[1,130]}),o([5,13,14,15,16,17,18,27,29,30,33,42,43,69,73,81,96,97,100,101,102],[2,58]),{1:[2,1]},o($Vt,[2,2]),{6:131,8:4,10:5,19:6,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},o($Vw,[2,3]),{8:132,10:5,19:6,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},o($Vz,[2,4]),{10:133,19:6,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},{10:134,19:6,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},{10:135,19:6,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},{10:136,19:6,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},{10:137,19:6,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},{10:138,19:6,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},o($VA,[2,11]),o($VA,$VB,{94:78,20:139,27:$VC,29:$VD}),{19:140,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},{19:141,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},o($VE,[2,12]),o($VE,$VF,{95:82,22:142,69:$VG,96:$VH,97:$VI}),{21:143,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},{21:144,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},{21:145,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},o($VJ,[2,13]),{23:146,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},o($VM,[2,15]),o($VM,$VN,{99:92,32:147,30:$VO,33:$VP}),o($VM,$VN,{99:92,32:148,30:$VO,33:$VP}),o($VM,[2,20]),o($VM,$VN,{99:92,32:149,30:$VO,33:$VP}),{31:150,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},{31:151,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},o($VQ,[2,16]),o($VQ,$VR,{98:96,28:152,27:$VS,29:$VT}),o($VY,[2,87]),o($VY,[2,88]),o($VQ,[2,17]),o($VU,[2,23]),o($VU,[2,25]),o($VU,$VZ,{41:153,40:154,42:$VW}),{4:155,6:3,8:4,10:5,19:6,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},o($VU,[2,24]),o($VU,[2,67]),{4:156,6:3,8:4,10:5,19:6,21:7,23:8,25:9,26:10,27:$V0,29:$V1,30:$V2,31:13,33:$V3,34:16,35:17,36:18,38:19,44:21,45:36,46:22,47:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:23,58:24,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:46,66:47,67:50,68:51,69:$Vj,70:56,71:57,72:63,74:$Vk,75:52,76:53,77:54,78:55,79:$Vl,80:$Vm,82:$Vn,83:$Vo,84:$Vp,85:20,87:25,88:26,90:43,91:$Vq,92:$Vr,93:$Vs},o($VX,[2,29]),o($VX,[2,41]),o($V_,[2,31]),o($V_,[2,32]),o($V_,[2,33]),o($V_,[2,34]),o($V_,[2,35]),o($V_,[2,36]),o($V_,[2,37]),o($V_,[2,38]),o($VX,[2,39]),o($V_,[2,43]),o($V_,[2,44]),o($V_,[2,45]),o($V_,[2,46]),o($V_,[2,47]),o($VX,[2,70]),o($VX,[2,109]),{81:[1,157]},{81:[1,158]},{81:[1,159]},{81:[1,160]},{81:[1,161]},{72:162,74:$Vk},o($Vt,$Vu,{7:163,100:$Vv}),o($Vw,$Vx,{9:164,101:$Vy}),o($Vz,[2,75]),o($Vz,[2,76]),o($Vz,[2,77]),o($Vz,[2,78]),o($Vz,[2,79]),o($Vz,[2,80]),o($VA,[2,97]),o($VE,[2,82]),o($VE,[2,83]),o($VE,[2,99]),o($VJ,[2,84]),o($VJ,[2,85]),o($VJ,[2,86]),o($VJ,$VK,{24:165,102:$VL}),o($VM,[2,18]),o($VM,[2,19]),o($VM,[2,105]),o($VU,[2,89]),o($VU,[2,90]),o($VQ,[2,103]),o($VU,[2,27]),o($VU,$VZ,{40:154,41:166,42:$VW}),{43:[1,167]},{43:[1,168]},o($VX,[2,110]),o($VX,[2,64]),o($VX,[2,66]),o($VX,[2,65]),o($VX,[2,63]),o($VX,[2,56]),o($Vt,[2,93]),o($Vw,[2,95]),o($VJ,[2,101]),o($VU,[2,107]),o($VX,[2,28]),o($VU,$VZ,{40:154,41:169,42:$VW}),o($VU,[2,91])],
defaultActions: {65:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var Tokens = [];   
    var Auxi = []; 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 82; 
break;
case 2: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 84; 
break;
case 3: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 79; 
break;
case 4: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 83; 
break;
case 5: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 100; 
break;
case 6: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 101; 
break;
case 7: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 96; 
break;
case 8: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 97; 
break;
case 9: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 47; 
break;
case 10: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 52; 
break;
case 11: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 49; 
break;
case 12: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 50; 
break;
case 13: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 51; 
break;
case 14: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 53; 
break;
case 15: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 55; 
break;
case 16: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 54; 
break;
case 17: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 59; 
break;
case 18: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 63; 
break;
case 19: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 60; 
break;
case 20: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 61; 
break;
case 21: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 62; 
break;
case 22: Tokens.push(['paren. a.',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 80; 
break;
case 23: Tokens.push(['paren. c.',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 81; 
break;
case 24: Tokens.push(['corch. a.',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 42; 
break;
case 25: Tokens.push(['corch. c.',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 43; 
break;
case 26: Tokens.push(['menor igual',   yy_.yytext, (yy_.yylineno + 1).toString()]); return 16; 
break;
case 27: Tokens.push(['mayor igual',   yy_.yytext, (yy_.yylineno + 1).toString()]); return 18; 
break;
case 28: Tokens.push(['menor',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 15; 
break;
case 29: Tokens.push(['mayor',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 17; 
break;
case 30: Tokens.push(['igual',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 13; 
break;
case 31: Tokens.push(['distinto',      yy_.yytext, (yy_.yylineno + 1).toString()]); return 14; 
break;
case 32: Tokens.push(['acceso',        yy_.yytext, (yy_.yylineno + 1).toString()]); return 48; 
break;
case 33: Tokens.push(['acceso',        yy_.yytext, (yy_.yylineno + 1).toString()]); return 73; 
break;
case 34: Tokens.push(['arroba',        yy_.yytext, (yy_.yylineno + 1).toString()]); return 56; 
break;
case 35: Tokens.push(['punto',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 'PUNTO'; 
break;
case 36: Tokens.push(['doble_punto',   yy_.yytext, (yy_.yylineno + 1).toString()]); return 64; 
break;
case 37: Tokens.push(['union',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 102; 
break;
case 38: Tokens.push(['multi',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 69; 
break;
case 39: Tokens.push(['doble barra',   yy_.yytext, (yy_.yylineno + 1).toString()]); return 30; 
break;
case 40: Tokens.push(['barra',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 33; 
break;
case 41: Tokens.push(['menos',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 29; 
break;
case 42: Tokens.push(['mas',           yy_.yytext, (yy_.yylineno + 1).toString()]); return 27; 
break;
case 43: Tokens.push(['cadena',        yy_.yytext, (yy_.yylineno + 1).toString()]); return 91; 
break;
case 44: Tokens.push(['caracter',      yy_.yytext, (yy_.yylineno + 1).toString()]); return 'CARACTER'; 
break;
case 45: Tokens.push(['decimal',       yy_.yytext, (yy_.yylineno + 1).toString()]); return 93; 
break;
case 46: Tokens.push(['entero',        yy_.yytext, (yy_.yylineno + 1).toString()]); return 92; 
break;
case 47: Tokens.push(['identificador', yy_.yytext, (yy_.yylineno + 1).toString()]); return 74; 
break;
case 48:return 5;
break;
}
},
rules: [/^(?:\s+)/i,/^(?:text\b)/i,/^(?:node\b)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:attribute\b)/i,/^(?:self\b)/i,/^(?:following-sibling\b)/i,/^(?:namespace\b)/i,/^(?:following\b)/i,/^(?:parent\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:::)/i,/^(?::)/i,/^(?:@)/i,/^(?:\.)/i,/^(?:\.\.)/i,/^(?:\|)/i,/^(?:\*)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:("[^"]*"))/i,/^(?:[\'][^\'\n][\'])/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:[A-Za-z][A-Za-z0-9_]*)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xpathDesc;
exports.Parser = xpathDesc.Parser;
exports.parse = function () { return xpathDesc.parse.apply(xpathDesc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}