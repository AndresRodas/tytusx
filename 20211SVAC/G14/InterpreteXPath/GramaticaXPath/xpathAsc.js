/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xpathAsc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,14],$V2=[1,58],$V3=[1,11],$V4=[1,12],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,31],$Va=[1,32],$Vb=[1,33],$Vc=[1,34],$Vd=[1,35],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[1,41],$Vj=[1,42],$Vk=[1,64],$Vl=[1,62],$Vm=[1,45],$Vn=[1,59],$Vo=[1,61],$Vp=[1,60],$Vq=[1,44],$Vr=[1,48],$Vs=[1,49],$Vt=[1,66],$Vu=[5,7,40,77],$Vv=[1,67],$Vw=[5,7,9,40,77],$Vx=[1,69],$Vy=[1,70],$Vz=[5,7,9,12,13,14,15,16,17,19,20,40,77],$VA=[1,77],$VB=[1,78],$VC=[1,79],$VD=[5,7,9,12,13,14,15,16,17,19,20,22,23,24,40,77],$VE=[1,80],$VF=[5,7,9,12,13,14,15,16,17,19,20,22,23,24,26,40,77],$VG=[1,82],$VH=[1,81],$VI=[5,7,9,12,13,14,15,16,17,19,20,22,23,24,26,29,31,40,77],$VJ=[19,20,22,29,31,44,46,47,48,49,50,51,52,53,56,57,58,59,60,61,70,75,76,78,79,80,85,86,87],$VK=[2,39],$VL=[1,91],$VM=[5,7,9,12,13,14,15,16,17,19,20,22,23,24,26,29,31,39,40,77],$VN=[22,70,75,78,79,80];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"EXPRESION_SIMPLE":4,"EOF":5,"EXPRESION_AND":6,"R_OR":7,"EXPRESION_COMPARAC":8,"R_AND":9,"EXPRESION_ADICION":10,"OPERADORES_LOGICOS":11,"E":12,"NE":13,"LT":14,"LE":15,"GT":16,"GE":17,"EXPRESION_MULTI":18,"RESTA":19,"SUMA":20,"EXPRESION_UNION":21,"MULTIPLICACION":22,"R_DIV":23,"R_MOD":24,"EXPRESION_UNARIA":25,"UNION":26,"RUTA_RELATIVA":27,"SIMBOLO":28,"DBARRA":29,"PASO":30,"BARRA":31,"PASO_EJE":32,"POSTFIX":33,"PASO_ADELANTE":34,"LISTA_PREDICADOS_AUX":35,"PASO_ATRAS":36,"LISTA_PREDICADOS":37,"PREDICADO":38,"CORCHETE_ABRE":39,"CORCHETE_CIERRA":40,"EJE_ADELANTE":41,"PRUEBA_NODO":42,"PASO_ADELANTE_ABREV":43,"R_CHILD":44,"ACCESO":45,"R_DESCENDANT":46,"R_ATTRIBUTE":47,"R_SELF":48,"R_DESCENDANT_OR_SELF":49,"R_FOLLOWING_SIBLING":50,"R_FOLLOWING":51,"R_NAMESPACE":52,"ARROBA":53,"EJE_ATRAS":54,"PASO_ATRAS_ABREV":55,"R_PARENT":56,"R_ANCESTOR":57,"R_PRECEDING_SIBLING":58,"R_PRECEDING":59,"R_ANCESTOR_OR_SELF":60,"DPUNTO":61,"NOMBRE_PRUEBA":62,"TIPO_PRUEBA":63,"Q_NAME":64,"WILDCARD":65,"NOMBRE_PREFIJO":66,"NOMBRE_SIN_PREFIJO":67,"NCNAME":68,"SEPARADOR":69,"IDENTIFICADOR":70,"PRUEBA_TEXTO":71,"PRUEBA_NODE":72,"PRUEBA_POSICION":73,"PRUEBA_ULTIMO":74,"R_LAST":75,"PARENTESIS_ABRE":76,"PARENTESIS_CIERRA":77,"R_TEXT":78,"R_POSITION":79,"R_NODE":80,"EXPRESION_PRIMARIA":81,"LITERAL":82,"EXPRESION_PARENTESIS":83,"LITERAL_NUMERO":84,"CADENA":85,"ENTERO":86,"DECIMAL":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"R_OR",9:"R_AND",12:"E",13:"NE",14:"LT",15:"LE",16:"GT",17:"GE",19:"RESTA",20:"SUMA",22:"MULTIPLICACION",23:"R_DIV",24:"R_MOD",26:"UNION",29:"DBARRA",31:"BARRA",39:"CORCHETE_ABRE",40:"CORCHETE_CIERRA",44:"R_CHILD",45:"ACCESO",46:"R_DESCENDANT",47:"R_ATTRIBUTE",48:"R_SELF",49:"R_DESCENDANT_OR_SELF",50:"R_FOLLOWING_SIBLING",51:"R_FOLLOWING",52:"R_NAMESPACE",53:"ARROBA",56:"R_PARENT",57:"R_ANCESTOR",58:"R_PRECEDING_SIBLING",59:"R_PRECEDING",60:"R_ANCESTOR_OR_SELF",61:"DPUNTO",69:"SEPARADOR",70:"IDENTIFICADOR",75:"R_LAST",76:"PARENTESIS_ABRE",77:"PARENTESIS_CIERRA",78:"R_TEXT",79:"R_POSITION",80:"R_NODE",85:"CADENA",86:"ENTERO",87:"DECIMAL"},
productions_: [0,[3,2],[4,1],[4,3],[6,1],[6,3],[8,1],[8,3],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[10,1],[10,3],[10,3],[18,1],[18,3],[18,3],[18,3],[21,1],[21,3],[25,1],[25,2],[28,1],[28,1],[28,2],[28,2],[27,2],[27,2],[27,1],[27,3],[27,3],[30,1],[30,1],[32,2],[32,2],[35,1],[35,0],[37,1],[37,2],[38,3],[34,2],[34,1],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[43,2],[43,1],[36,2],[36,1],[54,2],[54,2],[54,2],[54,2],[54,2],[55,1],[42,1],[42,1],[62,1],[62,1],[65,1],[64,1],[64,1],[66,3],[67,1],[68,1],[63,1],[63,1],[63,1],[63,1],[74,3],[71,3],[73,3],[72,3],[33,1],[33,2],[81,1],[81,1],[83,2],[83,3],[82,1],[82,1],[84,1],[84,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return [$$[$0-1]]; 
break;
case 2: case 4: case 6: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 17: case 21: case 25: case 26: case 35: case 38: case 40: case 44: case 62: case 63: case 64: case 65: case 66: case 68: case 69: case 71: case 73: case 74: case 75: case 76: case 83: case 84: case 87: case 88:
 this.$ = $$[$0] 
break;
case 3:
 this.$ = new Logica(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0],TipoL.OR) 
break;
case 5:
 this.$ = new Logica(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0],TipoL.AND) 
break;
case 7:
 this.$ = new Relacional(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0],$$[$0-1]) 
break;
case 15:
 this.$ = new Aritmetica(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0],TipoA.RESTA) 
break;
case 16:
 this.$ = new Aritmetica(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0],TipoA.SUMA) 
break;
case 18:
 this.$ =new Aritmetica(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0],TipoA.MULTI) 
break;
case 19:
 this.$ =new Aritmetica(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0],TipoA.DIV) 
break;
case 20:
 this.$ = new Aritmetica(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0],TipoA.MOD) 
break;
case 22:
 this.$ = $$[$0-2] + " " + $$[$0-1] + " " + $$[$0] 
break;
case 23:
 this.$ = $$[$0] ; 
break;
case 24: case 85:
 this.$ = $$[$0-1] + $$[$0] 
break;
case 27: case 28: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52:
 this.$ = $$[$0-1]  +  $$[$0] 
break;
case 29: case 30:
  this.$ = new Consulta(_$[$0-1].first_column,$$[$0-1],$$[$0],null) 
break;
case 31:
  this.$ = $$[$0]  
break;
case 32:
  this.$ = new Consulta(_$[$0-2].first_column,$$[$0-1],$$[$0],$$[$0-2]) 
break;
case 33:
  this.$ = new Consulta(_$[$0-2].first_column,$$[$0-1],$$[$0],$$[$0-2])
break;
case 34:
 this.$ = $$[$0] ; 
                                                                                
break;
case 36:
 
                                                                                        $$[$0-1].predicado = $$[$0]; this.$ = $$[$0-1] // cuerpo
                                                                                
break;
case 37:

                                                                                        $$[$0-1].predicado = $$[$0]; this.$=$$[$0-1]
                                                                                
break;
case 39:
 this.$ = null 
break;
case 41:
 this.$ = $$[$0-1].push($$[$0]) 
break;
case 42:
  this.$=new Predicado(_$[$0-2].first_column,$$[$0-1]) 
break;
case 43:
this.$ = new Cuerpo(_$[$0-1].first_column,
                                                                                                new Funcion(_$[$0-1].first_column,$$[$0-1],TipoF.ACCESO, $$[$0]),
                                                                                                ); 
break;
case 53:
  
                                                                                        this.$ = new Cuerpo(_$[$0-1].first_column,null,$$[$0-1],$$[$0],null);
                                                                                        // @ // id:id   or  id   or  * or funcion() 
                                                                                
break;
case 54:

                                                                                        this.$ = new Cuerpo(_$[$0].first_column,null,null,$$[$0],null);
                                                                                
break;
case 55:
 
                                                                                this.$ = new Cuerpo(_$[$0-1].first_column,
                                                                                                new Funcion(_$[$0-1].first_column,$$[$0-1],TipoF.ACCESO, $$[$0]),
                                                                                                );
                                                                                
                                                                                 /* ancestor::  position() 
                                                                                    ancestor:: id:id
                                                                                    ancestor:: id
                                                                                    ancestor:: *        */ 
break;
case 56:
 
                                                                                  this.$ = new Cuerpo(_$[$0].first_column,null,null,$$[$0],null);
                                                                                
break;
case 57:
 this.$ = $$[$0-1]  +  $$[$0]; this.$ = $$[$0-1] 
break;
case 58: case 59: case 60: case 61:
 this.$ = $$[$0-1]  +  $$[$0];this.$ = $$[$0-1] 
break;
case 67:
  this.$ = new Primitivo(0, _$[$0].first_column, TipoDato.FILTRO, $$[$0]) 
break;
case 70:
 this.$ = new Primitivo(0, _$[$0-2].first_column, TipoDato.VARIABLE, [$$[$0-2],$$[$0-1],$$[$0]])  
break;
case 72:
 this.$ = new Primitivo(0, _$[$0].first_column, TipoDato.VARIABLE, $$[$0])  
break;
case 77:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; this.$ = new Funcion(1,$$[$0-2],TipoF.FUNCION) 
break;
case 78: case 79:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0];this.$ = new Funcion(1,$$[$0-2],TipoF.FUNCION) 
break;
case 80:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0] ;this.$ = new Funcion(1,$$[$0-2],TipoF.FUNCION) 
break;
case 81:
 this.$ = new Cuerpo(_$[$0].first_column,null,null,$$[$0],null); 
break;
case 82:
 this.$ =  new Cuerpo(_$[$0-1].first_column,null,null,$$[$0-1],$$[$0]); 
break;
case 86:
 this.$ =$$[$0-1] 
break;
case 89:
 this.$ = new Primitivo(0, 0, TipoDato.INT, $$[$0]) 
break;
case 90:
 this.$ = new Primitivo(0,_$[$0].first_column, TipoDato.DOUBLE, $$[$0]) 
break;
}
},
table: [{3:1,4:2,6:3,8:4,10:5,18:6,19:$V0,20:$V1,21:7,22:$V2,25:8,27:9,28:10,29:$V3,30:13,31:$V4,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},{1:[3]},{5:[1,65],7:$Vt},o($Vu,[2,2],{9:$Vv}),o($Vw,[2,4]),o($Vw,[2,6],{11:68,12:[1,71],13:[1,72],14:[1,73],15:[1,74],16:[1,75],17:[1,76],19:$Vx,20:$Vy}),o($Vz,[2,14],{22:$VA,23:$VB,24:$VC}),o($VD,[2,17],{26:$VE}),o($VF,[2,21]),o($VF,[2,23],{29:$VG,31:$VH}),{19:[1,85],20:[1,84],22:$V2,27:83,29:$V3,30:13,31:$V4,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},{22:$V2,30:86,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},{22:$V2,30:87,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},o($VI,[2,31]),o($VJ,[2,25]),o($VJ,[2,26]),o($VI,[2,34]),o($VI,[2,35]),o($VI,$VK,{35:88,37:89,38:90,39:$VL}),o($VI,$VK,{37:89,38:90,35:92,39:$VL}),o($VI,[2,81],{38:90,37:93,39:$VL}),{22:$V2,42:94,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,78:$Vn,79:$Vo,80:$Vp},o($VM,[2,44]),{22:$V2,42:95,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,78:$Vn,79:$Vo,80:$Vp},o($VM,[2,56]),o($VM,[2,83]),o($VM,[2,84]),{45:[1,96]},{45:[1,97]},{45:[1,98]},{45:[1,99]},{45:[1,100]},{45:[1,101]},{45:[1,102]},{45:[1,103]},{22:$V2,42:104,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,78:$Vn,79:$Vo,80:$Vp},o($VM,[2,54]),{45:[1,105]},{45:[1,106]},{45:[1,107]},{45:[1,108]},{45:[1,109]},o($VM,[2,62]),o($VM,[2,87]),o($VM,[2,88]),{4:111,6:3,8:4,10:5,18:6,19:$V0,20:$V1,21:7,22:$V2,25:8,27:9,28:10,29:$V3,30:13,31:$V4,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,77:[1,110],78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},o($VM,[2,63]),o($VM,[2,64]),o($VM,[2,89]),o($VM,[2,90]),o($VM,[2,65]),o($VM,[2,66]),o($VM,[2,73]),o($VM,[2,74]),o($VM,[2,75]),o($VM,[2,76]),o($VM,[2,68]),o($VM,[2,69]),o($VM,[2,67]),{76:[1,112]},{76:[1,113]},{76:[1,114]},{76:[1,115]},o($VM,[2,71],{69:[1,116]}),o([5,7,9,12,13,14,15,16,17,19,20,22,23,24,26,29,31,39,40,69,77],[2,72]),{1:[2,1]},{6:117,8:4,10:5,18:6,19:$V0,20:$V1,21:7,22:$V2,25:8,27:9,28:10,29:$V3,30:13,31:$V4,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},{8:118,10:5,18:6,19:$V0,20:$V1,21:7,22:$V2,25:8,27:9,28:10,29:$V3,30:13,31:$V4,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},{10:119,18:6,19:$V0,20:$V1,21:7,22:$V2,25:8,27:9,28:10,29:$V3,30:13,31:$V4,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},{18:120,19:$V0,20:$V1,21:7,22:$V2,25:8,27:9,28:10,29:$V3,30:13,31:$V4,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},{18:121,19:$V0,20:$V1,21:7,22:$V2,25:8,27:9,28:10,29:$V3,30:13,31:$V4,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},o($VJ,[2,8]),o($VJ,[2,9]),o($VJ,[2,10]),o($VJ,[2,11]),o($VJ,[2,12]),o($VJ,[2,13]),{19:$V0,20:$V1,21:122,22:$V2,25:8,27:9,28:10,29:$V3,30:13,31:$V4,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},{19:$V0,20:$V1,21:123,22:$V2,25:8,27:9,28:10,29:$V3,30:13,31:$V4,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},{19:$V0,20:$V1,21:124,22:$V2,25:8,27:9,28:10,29:$V3,30:13,31:$V4,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},{19:$V0,20:$V1,22:$V2,25:125,27:9,28:10,29:$V3,30:13,31:$V4,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},{22:$V2,30:126,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},{22:$V2,30:127,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},o($VF,[2,24],{29:$VG,31:$VH}),o($VJ,[2,27]),o($VJ,[2,28]),o($VI,[2,29]),o($VI,[2,30]),o($VI,[2,36]),o($VI,[2,38],{38:128,39:$VL}),o($VM,[2,40]),{4:129,6:3,8:4,10:5,18:6,19:$V0,20:$V1,21:7,22:$V2,25:8,27:9,28:10,29:$V3,30:13,31:$V4,32:16,33:17,34:18,36:19,41:21,42:36,43:22,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:23,55:24,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj,62:46,63:47,64:50,65:51,66:56,67:57,68:63,70:$Vk,71:52,72:53,73:54,74:55,75:$Vl,76:$Vm,78:$Vn,79:$Vo,80:$Vp,81:20,82:25,83:26,84:43,85:$Vq,86:$Vr,87:$Vs},o($VI,[2,37]),o($VI,[2,82],{38:128,39:$VL}),o($VM,[2,43]),o($VM,[2,55]),o($VN,[2,45]),o($VN,[2,46]),o($VN,[2,47]),o($VN,[2,48]),o($VN,[2,49]),o($VN,[2,50]),o($VN,[2,51]),o($VN,[2,52]),o($VM,[2,53]),o($VN,[2,57]),o($VN,[2,58]),o($VN,[2,59]),o($VN,[2,60]),o($VN,[2,61]),o($VM,[2,85]),{7:$Vt,77:[1,130]},{77:[1,131]},{77:[1,132]},{77:[1,133]},{77:[1,134]},{68:135,70:$Vk},o($Vu,[2,3],{9:$Vv}),o($Vw,[2,5]),o($Vw,[2,7],{19:$Vx,20:$Vy}),o($Vz,[2,15],{22:$VA,23:$VB,24:$VC}),o($Vz,[2,16],{22:$VA,23:$VB,24:$VC}),o($VD,[2,18],{26:$VE}),o($VD,[2,19],{26:$VE}),o($VD,[2,20],{26:$VE}),o($VF,[2,22]),o($VI,[2,32]),o($VI,[2,33]),o($VM,[2,41]),{7:$Vt,40:[1,136]},o($VM,[2,86]),o($VM,[2,78]),o($VM,[2,80]),o($VM,[2,79]),o($VM,[2,77]),o($VM,[2,70]),o($VM,[2,42])],
defaultActions: {65:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Valor }  = require('../Instrucciones/Valor');
    const { Aritmetica, TipoA} = require('../Expresiones/Aritmetica')
    const { Primitivo } = require('../Expresiones/Primitivo')
    const { TipoDato } = require ('../../InterpreteXML/TablaSimbolo/TipoDato')
    const { Relacional } = require ('../Expresiones/Relacional')
    const { Logica, TipoL} = require('../Expresiones/Logica')
    const { Funcion, TipoF } = require ('../Instrucciones/Funcion')
    const { Ruta } = require ('../Instrucciones/Ruta')

    const { Consulta } = require('../Instrucciones/Consulta')
    const { Cuerpo } = require('../Instrucciones/Cuerpo')
    const { Predicado } = require('../Instrucciones/Predicado')

    var Auxi = []; 
    var instr = ""
    var Tokens =[]
    var cvivar = ""
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 78; 
break;
case 2: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 80; 
break;
case 3: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 75; 
break;
case 4: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 79; 
break;
case 5: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 7; 
break;
case 6: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 9; 
break;
case 7: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 23; 
break;
case 8: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 24; 
break;
case 9: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 'R_EQ'; 
break;
case 10: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 'R_NE'; 
break;
case 11: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 'R_LT'; 
break;
case 12: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 'R_LE'; 
break;
case 13: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 'R_GT'; 
break;
case 14: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 'R_GE'; 
break;
case 15: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 44; 
break;
case 16: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 49; 
break;
case 17: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 46; 
break;
case 18: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 47; 
break;
case 19: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 48; 
break;
case 20: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 50; 
break;
case 21: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 52; 
break;
case 22: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 51; 
break;
case 23: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 56; 
break;
case 24: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 60; 
break;
case 25: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 57; 
break;
case 26: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 58; 
break;
case 27: Tokens.push(['reservada',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 59; 
break;
case 28: Tokens.push(['paren. a.',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 76; 
break;
case 29: Tokens.push(['paren. c.',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 77; 
break;
case 30: Tokens.push(['corch. a.',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 39; 
break;
case 31: Tokens.push(['corch. c.',     yy_.yytext, (yy_.yylineno + 1).toString()]); return 40; 
break;
case 32: Tokens.push(['menor igual',   yy_.yytext, (yy_.yylineno + 1).toString()]); return 15; 
break;
case 33: Tokens.push(['mayor igual',   yy_.yytext, (yy_.yylineno + 1).toString()]); return 17; 
break;
case 34: Tokens.push(['menor',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 14; 
break;
case 35: Tokens.push(['mayor',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 16; 
break;
case 36: Tokens.push(['igual',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 12; 
break;
case 37: Tokens.push(['distinto',      yy_.yytext, (yy_.yylineno + 1).toString()]); return 13; 
break;
case 38: Tokens.push(['acceso',        yy_.yytext, (yy_.yylineno + 1).toString()]); return 45; 
break;
case 39: Tokens.push(['acceso',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 69; 
break;
case 40: Tokens.push(['arroba',        yy_.yytext, (yy_.yylineno + 1).toString()]); return 53; 
break;
case 41: Tokens.push(['doble_punto',   yy_.yytext, (yy_.yylineno + 1).toString()]); return 61; 
break;
case 42: Tokens.push(['punto',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 'PUNTO'; 
break;
case 43: Tokens.push(['union',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 26; 
break;
case 44: Tokens.push(['multi',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 22; 
break;
case 45: Tokens.push(['doble barra',   yy_.yytext, (yy_.yylineno + 1).toString()]); return 29; 
break;
case 46: Tokens.push(['barra',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 31; 
break;
case 47: Tokens.push(['menos',         yy_.yytext, (yy_.yylineno + 1).toString()]); return 19; 
break;
case 48: Tokens.push(['mas',           yy_.yytext, (yy_.yylineno + 1).toString()]); return 20; 
break;
case 49: Tokens.push(['cadena',        yy_.yytext, (yy_.yylineno + 1).toString()]); return 85; 
break;
case 50: Tokens.push(['caracter',      yy_.yytext, (yy_.yylineno + 1).toString()]); return 'CARACTER'; 
break;
case 51: Tokens.push(['decimal',       yy_.yytext, (yy_.yylineno + 1).toString()]); return 87; 
break;
case 52: Tokens.push(['entero',        yy_.yytext, (yy_.yylineno + 1).toString()]); return 86; 
break;
case 53: Tokens.push(['identificador', yy_.yytext, (yy_.yylineno + 1).toString()]); return 70; 
break;
case 54:return 5;
break;
}
},
rules: [/^(?:\s+)/i,/^(?:text\b)/i,/^(?:node\b)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:eq\b)/i,/^(?:ne\b)/i,/^(?:lt\b)/i,/^(?:le\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:attribute\b)/i,/^(?:self\b)/i,/^(?:following-sibling\b)/i,/^(?:namespace\b)/i,/^(?:following\b)/i,/^(?:parent\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:::)/i,/^(?::)/i,/^(?:@)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:\|)/i,/^(?:\*)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:("[^"]*"))/i,/^(?:[\'][^\'\n][\'])/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:[A-Za-z][A-Za-z0-9_]*)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xpathAsc;
exports.Parser = xpathAsc.Parser;
exports.parse = function () { return xpathAsc.parse.apply(xpathAsc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}