/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,9],$V5=[1,8],$V6=[1,7],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,15],$Vc=[1,16],$Vd=[1,18],$Ve=[1,20],$Vf=[5,6],$Vg=[1,23],$Vh=[1,24],$Vi=[1,25],$Vj=[1,26],$Vk=[1,27],$Vl=[1,28],$Vm=[1,29],$Vn=[1,30],$Vo=[1,31],$Vp=[1,32],$Vq=[1,33],$Vr=[1,34],$Vs=[1,35],$Vt=[1,36],$Vu=[1,37],$Vv=[1,38],$Vw=[5,6,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,26,40,41,43],$Vx=[5,6,8,9,26,40,41,43],$Vy=[5,6,8,9,10,11,12,14,15,26,40,41,43],$Vz=[5,6,8,9,10,11,12,14,15,16,17,18,19,20,22,23,24,26,40,41,43],$VA=[40,41],$VB=[5,6,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,26,40,41,42,43];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"consultas":4,"EOF":5,"SOR":6,"expresion":7,"DSLASH":8,"SLASH":9,"AXE":10,"AND":11,"OR":12,"NOT":13,"ASIG":14,"NEQUAL":15,"GT":16,"GTE":17,"LT":18,"LTE":19,"MOD":20,"DIV":21,"TIMES":22,"PLUS":23,"MINUS":24,"LPAREN":25,"RPAREN":26,"DOUBLELITERAL":27,"INTEGERLITERAL":28,"STRINGLITERAL":29,"CHARLITERAL":30,"nodo":31,"DOT":32,"DDOT":33,"AT":34,"predicado":35,"IDENTIFIER":36,"cors":37,"func":38,"args":39,"PAREN":40,"COMA":41,"LCOR":42,"RCOR":43,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SOR",8:"DSLASH",9:"SLASH",10:"AXE",11:"AND",12:"OR",13:"NOT",14:"ASIG",15:"NEQUAL",16:"GT",17:"GTE",18:"LT",19:"LTE",20:"MOD",21:"DIV",22:"TIMES",23:"PLUS",24:"MINUS",25:"LPAREN",26:"RPAREN",27:"DOUBLELITERAL",28:"INTEGERLITERAL",29:"STRINGLITERAL",30:"CHARLITERAL",32:"DOT",33:"DDOT",34:"AT",36:"IDENTIFIER",40:"PAREN",41:"COMA",42:"LCOR",43:"RCOR"},
productions_: [0,[3,2],[4,3],[4,1],[7,2],[7,2],[7,3],[7,3],[7,3],[7,3],[7,3],[7,2],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,2],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,1],[7,1],[7,1],[31,2],[31,2],[31,1],[35,2],[35,2],[35,1],[38,3],[38,2],[39,3],[39,1],[37,4],[37,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5:
 var lista = []; lista.push($$[$0].pop()); this.$ = lista; 
break;
case 6: case 7:
 $$[$0-2].push($$[$0].pop()); this.$ = $$[$0-2]; 
break;
case 8:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.AXE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 9:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 10:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 11:
 this.$ = new Operacion($$[$0],$$[$0],Operador.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 12:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 13:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 14:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 15:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 16:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 17:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 18:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MOD, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 19:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 20:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 21:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 22:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 23:
 this.$ = $$[$0-1] 
break;
case 24:
 this.$ = new Operacion($$[$0],$$[$0],Operador.MENOS_UNARIO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 25:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.POR_WILDCARD, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 26:
 this.$ = new Operacion($$[$0],$$[$0],Operador.POR, _$[$0].first_line, _$[$0].first_column); 
break;
case 27:
 this.$ = new Operacion($$[$0],$$[$0],Operador.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 28:
 this.$ = new Operacion($$[$0],$$[$0],Operador.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 29: case 30:
 this.$ = new Operacion($$[$0],$$[$0],Operador.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 31:
 var lista = []; lista.push(new Nodo($$[$0], false)); this.$ = lista; 
break;
case 32:
 this.$ = new Operacion($$[$0],$$[$0],Operador.DOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 33:
 this.$ = new Operacion($$[$0],$$[$0],Operador.DOUBLE_DOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 34:
 this.$ = new Operacion(null,null,Operador.DOT, _$[$0].first_line, _$[$0].first_column); 
break;
case 35:
 this.$ = new Operacion(null,null,Operador.DOUBLE_DOT, _$[$0].first_line, _$[$0].first_column); 
break;
case 36:
 setConsola('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
                                                      lista_errores.push(new RError(this._$.first_column, this._$.first_line, "Sintáctico", "No se esperaba " + yytext));                                               
                                                    
break;
case 38: case 39: case 42:
 this.$ = $$[$0]; 
break;
case 48:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{2:$V0,3:1,4:2,7:3,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{1:[3]},{5:[1,21],6:[1,22]},o($Vf,[2,3],{8:$Vg,9:$Vh,10:$Vi,11:$Vj,12:$Vk,14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),{2:$V0,7:39,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:40,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:41,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:42,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:43,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},o($Vw,[2,26]),o($Vw,[2,27]),o($Vw,[2,28]),o($Vw,[2,29]),o($Vw,[2,30]),o($Vw,[2,31]),o($Vw,[2,34],{35:19,31:44,34:$Vd,36:$Ve}),o($Vw,[2,35],{35:19,31:45,34:$Vd,36:$Ve}),o($Vw,[2,36]),{22:[1,46],35:47,36:$Ve},o($Vw,[2,39]),o($Vw,[2,42],{37:48,38:49,25:[1,51],42:[1,50]}),{1:[2,1]},{2:$V0,7:52,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:53,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:54,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:55,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:56,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:57,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:58,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:59,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:60,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:61,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:62,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:63,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:64,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:65,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},o($Vw,[2,25],{31:14,35:19,7:66,2:$V0,13:$V3,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,32:$Vb,33:$Vc,34:$Vd,36:$Ve}),{2:$V0,7:67,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:68,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},o($Vx,[2,4],{10:$Vi,11:$Vj,12:$Vk,14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o($Vx,[2,5],{10:$Vi,11:$Vj,12:$Vk,14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o($Vw,[2,11]),{8:$Vg,9:$Vh,10:$Vi,11:$Vj,12:$Vk,14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,26:[1,69]},o($Vw,[2,24]),o($Vw,[2,32]),o($Vw,[2,33]),o($Vw,[2,37]),o($Vw,[2,38]),o($Vw,[2,40],{42:[1,70]}),o($Vw,[2,41]),{2:$V0,7:71,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{2:$V0,7:74,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,26:[1,73],27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve,39:72},o($Vf,[2,2],{8:$Vg,9:$Vh,10:$Vi,11:$Vj,12:$Vk,14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o($Vx,[2,6],{10:$Vi,11:$Vj,12:$Vk,14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o($Vx,[2,7],{10:$Vi,11:$Vj,12:$Vk,14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o([5,6,8,9,10,26,40,41,43],[2,8],{11:$Vj,12:$Vk,14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o([5,6,8,9,10,11,12,26,40,41,43],[2,9],{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o([5,6,8,9,10,12,26,40,41,43],[2,10],{11:$Vj,14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o($Vy,[2,12],{16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o($Vy,[2,13],{16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o($Vy,[2,14],{20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o($Vy,[2,15],{20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o($Vy,[2,16],{20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o($Vy,[2,17],{20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),o($Vz,[2,18],{21:$Vs}),o($Vw,[2,19]),o($Vz,[2,20],{21:$Vs}),o($Vz,[2,21],{21:$Vs}),o($Vz,[2,22],{21:$Vs}),o($Vw,[2,23]),{2:$V0,7:75,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},{8:$Vg,9:$Vh,10:$Vi,11:$Vj,12:$Vk,14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,43:[1,76]},{40:[1,77],41:[1,78]},o($Vw,[2,44]),o($VA,[2,46],{8:$Vg,9:$Vh,10:$Vi,11:$Vj,12:$Vk,14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv}),{8:$Vg,9:$Vh,10:$Vi,11:$Vj,12:$Vk,14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,43:[1,79]},o($VB,[2,48]),o($Vw,[2,43]),{2:$V0,7:80,8:$V1,9:$V2,13:$V3,22:$V4,24:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:14,32:$Vb,33:$Vc,34:$Vd,35:19,36:$Ve},o($VB,[2,47]),o($VA,[2,45],{8:$Vg,9:$Vh,10:$Vi,11:$Vj,12:$Vk,14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv})],
defaultActions: {21:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 'PRINT';
break;
case 2:return 'NULL';
break;
case 3:return 'TRUE';
break;
case 4:return 'FALSE';
break;
case 5:return 23;
break;
case 6:return 24;
break;
case 7:return 22;
break;
case 8:return 8;
break;
case 9:return 9;
break;
case 10:return 21;
break;
case 11:return 33;
break;
case 12:return 32;
break;
case 13:return 34;
break;
case 14:return 20;
break;
case 15:return 19;
break;
case 16:return 17;
break;
case 17:return 18;
break;
case 18:return 16;
break;
case 19:return 14;
break;
case 20:return 'EQUAL';
break;
case 21:return 15;
break;
case 22:return 11;
break;
case 23:return 6;
break;
case 24:return 12;
break;
case 25:return 13;
break;
case 26:return 41;
break;
case 27:return 'SEMICOLON';
break;
case 28:return 10
break;
case 29:return 25;
break;
case 30:return 26;
break;
case 31:return 42;
break;
case 32:return 43;
break;
case 33:return 27;
break;
case 34:return 28;
break;
case 35:return 36;
break;
case 36:return 29;
break;
case 37:return 30;
break;
case 38:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                        setConsola('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                        lista_errores.push(new RError(yy_.yylloc.first_column, yy_.yylloc.first_line, "Léxico", "El carácter "+yy_.yytext+" no es válido."));
                                    
break;
case 39:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:print\b)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:div\b)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:@)/i,/^(?:mod\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:and\b)/i,/^(?:\|)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?:::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[A-ZA-Z_][A-ZA-Z0-9_\-Ñ]*)/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}