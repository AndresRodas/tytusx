/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XPath_GramaticaAsc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,16],$V2=[1,7],$V3=[1,9],$V4=[1,8],$V5=[1,15],$V6=[1,14],$V7=[1,12],$V8=[1,13],$V9=[5,6],$Va=[5,6,12,16,20,43,44,45,46,47,48,49,50,51,52,53,54,56],$Vb=[2,39],$Vc=[1,26],$Vd=[1,31],$Ve=[1,34],$Vf=[1,35],$Vg=[1,36],$Vh=[1,37],$Vi=[1,38],$Vj=[1,39],$Vk=[1,40],$Vl=[1,41],$Vm=[1,42],$Vn=[1,43],$Vo=[1,44],$Vp=[1,45],$Vq=[1,46],$Vr=[1,58],$Vs=[1,59],$Vt=[1,60],$Vu=[1,62],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[16,20,43,44,45,46,47,48,49,50,51,52,53,54,56],$VN=[1,99],$VO=[1,102],$VP=[1,100],$VQ=[1,101],$VR=[16,43,44,46,47,48,49,50,51,52,53,56],$VS=[16,46,47,48,49,50,51,52,53,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"LISTACONSULTAS":4,"EOF":5,"andSelect":6,"CONSULTA":7,"identifier":8,"LISTANODOS":9,"MASTIPOS":10,"NODO":11,"diag":12,"TIPONODO":13,"corA":14,"EXPRESION":15,"corC":16,"AXES":17,"attr":18,"PREDICATE":19,"asterisco":20,"dot":21,"FUNCIONES":22,"ancestor":23,"dospuntos":24,"NODETEST":25,"ancestorSelf":26,"attribute":27,"child":28,"descendant":29,"descendantSelf":30,"following":31,"followingSib":32,"namespace":33,"parent":34,"preced":35,"precedSib":36,"self":37,"textFunc":38,"nodeFunc":39,"LISTAEXPRESIONES":40,"PRIMITIVA":41,"OPERACION":42,"mas":43,"menos":44,"div":45,"lte":46,"lt":47,"gte":48,"gt":49,"igual":50,"nequal":51,"or":52,"and":53,"mod":54,"parA":55,"parC":56,"DoubleLiteral":57,"IntegerLiteral":58,"cadena":59,"cadena2":60,"lastFunc":61,"positionFunc":62,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"andSelect",8:"identifier",12:"diag",14:"corA",16:"corC",18:"attr",20:"asterisco",21:"dot",23:"ancestor",24:"dospuntos",26:"ancestorSelf",27:"attribute",28:"child",29:"descendant",30:"descendantSelf",31:"following",32:"followingSib",33:"namespace",34:"parent",35:"preced",36:"precedSib",37:"self",38:"textFunc",39:"nodeFunc",43:"mas",44:"menos",45:"div",46:"lte",47:"lt",48:"gte",49:"gt",50:"igual",51:"nequal",52:"or",53:"and",54:"mod",55:"parA",56:"parC",57:"DoubleLiteral",58:"IntegerLiteral",59:"cadena",60:"cadena2",61:"lastFunc",62:"positionFunc"},
productions_: [0,[3,2],[4,3],[4,1],[7,1],[7,2],[7,2],[7,1],[7,1],[9,2],[9,1],[11,2],[11,3],[11,2],[11,3],[13,1],[13,4],[13,1],[13,1],[10,3],[10,3],[10,2],[10,3],[10,2],[10,1],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[19,3],[19,0],[25,2],[25,2],[25,2],[25,2],[40,2],[40,1],[15,1],[15,1],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[41,1],[41,1],[41,1],[41,1],[41,1],[41,2],[41,2],[41,1],[41,2],[41,1],[22,1],[22,1],[22,1],[22,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2:
 $$[$0-2].push(new Consulta($$[$0],_$[$0].first_line, _$[$0].first_column)); this.$ = $$[$0-2]; 
break;
case 3:
 this.$ = [new Consulta($$[$0], _$[$0].first_line, _$[$0].first_column)];
break;
case 4:
 this.$ = [new Nodo($$[$0], TipoNodo.IDENTIFIER, _$[$0].first_line, _$[$0].first_column)]
break;
case 5:
this.$ = [new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column)]; this.$ = this.$.concat($$[$0]); 
break;
case 6:
 this.$ = [$$[$0-1]]; this.$ = this.$.concat($$[$0])
break;
case 7: case 47: case 74: case 75:
 this.$ = $$[$0];
break;
case 8:
 this.$ = [$$[$0]];
break;
case 9:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 10:
 this.$ = [$$[$0]]; 
break;
case 11:
 
                if(this.$ != null){
                        $$[$0].fromRoot = true; this.$ = $$[$0];
                }
        
break;
case 12:
 
                if(this.$ != null){
                        $$[$0].fromRoot = false; this.$ = $$[$0];
                }
        
break;
case 13:
 console.log('Entra a error sintactico de one diag');
            errores.default.agregarError('sintactico', 'Token inesperado \'' + yytext + '\'', _$[$0-1].first_line, _$[$0-1].first_column); 
            this.$ = new Nodo($$[$0], TipoNodo.NODOERROR, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 14:
 console.log('Entra a error sintactico de two diags');
            errores.default.agregarError('sintactico', 'Token inesperado \'' + yytext + '\'', _$[$0-2].first_line, _$[$0-2].first_column); 
            this.$ = new Nodo($$[$0], TipoNodo.NODOERROR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 15:
 this.$ = new Nodo($$[$0], TipoNodo.IDENTIFIER, _$[$0].first_line, _$[$0].first_column); 
break;
case 16:
 this.$ = new Nodo($$[$0-3], TipoNodo.IDENTIFIER, _$[$0-3].first_line, _$[$0-3].first_column, new Predicate($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column));
break;
case 17: case 18: case 46: case 72: case 73:
 this.$ = $$[$0]; 
break;
case 19: case 20:
 this.$ = new Nodo($$[$0-1], TipoNodo.ATRIBUTO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 21:
 this.$ = new Nodo($$[$0-1], TipoNodo.DOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 22:
 this.$ = new Nodo($$[$0-2]+$$[$0-1], TipoNodo.DOTDOT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 23:
  this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 24:
 this.$ = new Nodo($$[$0], TipoNodo.FUNCION, _$[$0].first_line, _$[$0].first_column);
break;
case 25:
 this.$ = new Nodo($$[$0-2], TipoNodo.AXIS, _$[$0-2].first_line, _$[$0-2].first_column, undefined, TipoAxis.ANCESTOR, $$[$0])
break;
case 26:
 this.$ = new Nodo($$[$0-2], TipoNodo.AXIS, _$[$0-2].first_line, _$[$0-2].first_column, undefined, TipoAxis.ANCESTORORSELF, $$[$0])
break;
case 27:
 this.$ =new Nodo($$[$0-2], TipoNodo.AXIS, _$[$0-2].first_line, _$[$0-2].first_column, undefined, TipoAxis.ATTRIBUTE, $$[$0])
break;
case 28:
 this.$ = new Nodo($$[$0-2], TipoNodo.AXIS, _$[$0-2].first_line, _$[$0-2].first_column, undefined, TipoAxis.CHILD, $$[$0])
break;
case 29:
 this.$ = new Nodo($$[$0-2], TipoNodo.AXIS, _$[$0-2].first_line, _$[$0-2].first_column, undefined, TipoAxis.DESCENDANT, $$[$0])
break;
case 30:
 this.$ = new Nodo($$[$0-2], TipoNodo.AXIS, _$[$0-2].first_line, _$[$0-2].first_column, undefined, TipoAxis.DESCENDANTORSELF, $$[$0])
break;
case 31:
 this.$ = new Nodo($$[$0-2], TipoNodo.AXIS, _$[$0-2].first_line, _$[$0-2].first_column, undefined, TipoAxis.FOLLOWING, $$[$0])
break;
case 32:
 this.$ = new Nodo($$[$0-2], TipoNodo.AXIS, _$[$0-2].first_line, _$[$0-2].first_column, undefined, TipoAxis.FOLLOWINGSIBLING, $$[$0])
break;
case 33:
 this.$ = new Nodo($$[$0-2], TipoNodo.AXIS, _$[$0-2].first_line, _$[$0-2].first_column, undefined, TipoAxis.NAMESPACE, $$[$0])
break;
case 34:
 this.$ = new Nodo($$[$0-2], TipoNodo.AXIS, _$[$0-2].first_line, _$[$0-2].first_column, undefined, TipoAxis.PARENT, $$[$0])
break;
case 35:
 this.$ = new Nodo($$[$0-2], TipoNodo.AXIS, _$[$0-2].first_line, _$[$0-2].first_column, undefined, TipoAxis.PRECEDING, $$[$0])
break;
case 36:
 this.$ = new Nodo($$[$0-2], TipoNodo.AXIS, _$[$0-2].first_line, _$[$0-2].first_column, undefined, TipoAxis.PRECEDINGSIBLING, $$[$0])
break;
case 37:
 this.$ = new Nodo($$[$0-2], TipoNodo.AXIS, _$[$0-2].first_line, _$[$0-2].first_column, undefined, TipoAxis.SELF, $$[$0])
break;
case 38:
 this.$ = new Predicate($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 39:
 this.$ = [];
break;
case 40:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);                                
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column);
                        }
                
break;
case 41:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.FUNCION, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column);
                        }
                
break;
case 42:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.FUNCION, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.FUNCION, _$[$0-1].first_line, _$[$0-1].first_column);
                        }
                
break;
case 43:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column);
                        }
                
break;
case 44:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 45:
 this.$ =  [$$[$0]] 
break;
case 48:
 this.$ = new Operacion(TipoOperacion.MULTIPLICACION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 49:
 this.$ = new Operacion(TipoOperacion.SUMA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 50:
 this.$ = new Operacion(TipoOperacion.RESTA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 51:
 this.$ = new Operacion(TipoOperacion.DIVISION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 52:
 this.$ = new Operacion(TipoOperacion.MENORIGUALQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 53:
 this.$ = new Operacion(TipoOperacion.MENORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 54:
 this.$ = new Operacion(TipoOperacion.MAYORIGUALQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 55:
 this.$ = new Operacion(TipoOperacion.MAYORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 56:
 this.$ = new Operacion(TipoOperacion.IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 57:
 this.$ = new Operacion(TipoOperacion.DIFERENTEQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 58:
 this.$ = new Operacion(TipoOperacion.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 59:
 this.$ = new Operacion(TipoOperacion.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 60:
 this.$ = new Operacion(TipoOperacion.MOD, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 61:
 this.$ = new Operacion(TipoOperacion.PAR, $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 62:
 this.$ = new Primitiva($$[$0], TipoPrim.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 63:
 this.$ = new Primitiva($$[$0], TipoPrim.INTEGER, _$[$0].first_line, _$[$0].first_column); 
break;
case 64: case 65:
 this.$ = new Primitiva($$[$0], TipoPrim.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 66:
 this.$ = new Primitiva($$[$0], TipoPrim.IDENTIFIER, _$[$0].first_line, _$[$0].first_column); 
break;
case 67: case 68:
 this.$ = new Primitiva($$[$0], TipoPrim.ATRIBUTO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 69:
 this.$ = new Primitiva($$[$0], TipoPrim.DOT, _$[$0].first_line, _$[$0].first_column);
break;
case 70:
 
                this.$ = [new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column)]; 
                this.$ = this.$.concat($$[$0]); 
                this.$ = new Primitiva(this.$, TipoPrim.CONSULTA, _$[$0-1].first_line, _$[$0-1].first_column);
                
break;
case 71:
 this.$ = new Primitiva($$[$0], TipoPrim.FUNCION, _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{3:1,4:2,7:3,8:$V0,9:6,10:5,11:11,12:$V1,18:$V2,20:$V3,21:$V4,22:10,38:$V5,39:$V6,61:$V7,62:$V8},{1:[3]},{5:[1,17],6:[1,18]},o($V9,[2,3]),o($V9,[2,4],{11:11,9:19,12:$V1}),o($V9,[2,8],{11:11,9:20,12:$V1}),o($V9,[2,7],{11:21,12:$V1}),{8:[1,22],20:[1,23]},o($Va,$Vb,{19:24,14:$Vc,21:[1,25]}),o($Va,$Vb,{19:27,14:$Vc}),o($Va,[2,24]),o($Va,[2,10]),o($Va,[2,72]),o($Va,[2,73]),o($Va,[2,74]),o($Va,[2,75]),{2:[1,30],8:$Vd,10:32,12:[1,29],13:28,17:33,18:$V2,20:$V3,21:$V4,22:10,23:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vi,30:$Vj,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$V5,39:$V6,61:$V7,62:$V8},{1:[2,1]},{7:47,8:$V0,9:6,10:5,11:11,12:$V1,18:$V2,20:$V3,21:$V4,22:10,38:$V5,39:$V6,61:$V7,62:$V8},o($V9,[2,5],{11:21,12:$V1}),o($V9,[2,6],{11:21,12:$V1}),o($Va,[2,9]),o($Va,$Vb,{19:48,14:$Vc}),o($Va,$Vb,{19:49,14:$Vc}),o($Va,[2,21]),o($Va,$Vb,{19:50,14:$Vc}),{8:$Vr,15:51,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},o($Va,[2,23]),o($Va,[2,11]),{2:[1,64],8:$Vd,10:32,13:63,17:33,18:$V2,20:$V3,21:$V4,22:10,23:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vi,30:$Vj,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$V5,39:$V6,61:$V7,62:$V8},o($Va,[2,13]),o($Va,[2,15],{14:[1,65]}),o($Va,[2,17]),o($Va,[2,18]),{24:[1,66]},{24:[1,67]},{24:[1,68]},{24:[1,69]},{24:[1,70]},{24:[1,71]},{24:[1,72]},{24:[1,73]},{24:[1,74]},{24:[1,75]},{24:[1,76]},{24:[1,77]},{24:[1,78]},o($V9,[2,2]),o($Va,[2,19]),o($Va,[2,20]),o($Va,[2,22]),{16:[1,79],20:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL},o($VM,[2,46]),o($VM,[2,47]),o($VM,[2,62]),o($VM,[2,63]),o($VM,[2,64]),o($VM,[2,65]),o($VM,[2,66],{11:11,9:93,12:$V1}),{8:[1,94],20:[1,95]},o($VM,[2,69]),o($VM,[2,71]),{8:$Vr,15:96,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},o($Va,[2,12]),o($Va,[2,14]),{8:$Vr,15:97,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},{8:$VN,20:$VO,25:98,38:$VP,39:$VQ},{8:$VN,20:$VO,25:103,38:$VP,39:$VQ},{8:$VN,20:$VO,25:104,38:$VP,39:$VQ},{8:$VN,20:$VO,25:105,38:$VP,39:$VQ},{8:$VN,20:$VO,25:106,38:$VP,39:$VQ},{8:$VN,20:$VO,25:107,38:$VP,39:$VQ},{8:$VN,20:$VO,25:108,38:$VP,39:$VQ},{8:$VN,20:$VO,25:109,38:$VP,39:$VQ},{8:$VN,20:$VO,25:110,38:$VP,39:$VQ},{8:$VN,20:$VO,25:111,38:$VP,39:$VQ},{8:$VN,20:$VO,25:112,38:$VP,39:$VQ},{8:$VN,20:$VO,25:113,38:$VP,39:$VQ},{8:$VN,20:$VO,25:114,38:$VP,39:$VQ},o($Va,[2,38]),{8:$Vr,15:115,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},{8:$Vr,15:116,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},{8:$Vr,15:117,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},{8:$Vr,15:118,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},{8:$Vr,15:119,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},{8:$Vr,15:120,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},{8:$Vr,15:121,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},{8:$Vr,15:122,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},{8:$Vr,15:123,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},{8:$Vr,15:124,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},{8:$Vr,15:125,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},{8:$Vr,15:126,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},{8:$Vr,15:127,18:$Vs,21:$Vt,22:61,38:$V5,39:$V6,41:52,42:53,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$V7,62:$V8},o($VM,[2,70],{11:21,12:$V1}),o($VM,[2,67]),o($VM,[2,68]),{20:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,56:[1,128]},{16:[1,129],20:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL},o($Va,[2,25]),o($Va,$Vb,{19:130,14:$Vc}),o($Va,$Vb,{19:131,14:$Vc}),o($Va,$Vb,{19:132,14:$Vc}),o($Va,$Vb,{19:133,14:$Vc}),o($Va,[2,26]),o($Va,[2,27]),o($Va,[2,28]),o($Va,[2,29]),o($Va,[2,30]),o($Va,[2,31]),o($Va,[2,32]),o($Va,[2,33]),o($Va,[2,34]),o($Va,[2,35]),o($Va,[2,36]),o($Va,[2,37]),o($VM,[2,48]),o($VR,[2,49],{20:$Vz,45:$VC,54:$VL}),o($VR,[2,50],{20:$Vz,45:$VC,54:$VL}),o($VM,[2,51]),o($VS,[2,52],{20:$Vz,43:$VA,44:$VB,45:$VC,54:$VL}),o($VS,[2,53],{20:$Vz,43:$VA,44:$VB,45:$VC,54:$VL}),o($VS,[2,54],{20:$Vz,43:$VA,44:$VB,45:$VC,54:$VL}),o($VS,[2,55],{20:$Vz,43:$VA,44:$VB,45:$VC,54:$VL}),o($VS,[2,56],{20:$Vz,43:$VA,44:$VB,45:$VC,54:$VL}),o($VS,[2,57],{20:$Vz,43:$VA,44:$VB,45:$VC,54:$VL}),o([16,52,56],[2,58],{20:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,53:$VK,54:$VL}),o([16,52,53,56],[2,59],{20:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,54:$VL}),o($VM,[2,60]),o($VM,[2,61]),o($Va,[2,16]),o($Va,[2,40]),o($Va,[2,41]),o($Va,[2,42]),o($Va,[2,43])],
defaultActions: {17:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const Nodo = require("./AST/nodo_arbol");
    //var raiz;

    const {Primitiva} = require("../Expresiones/Primitiva");
    const {Operacion} = require("../Expresiones/Operacion");
    const {Consulta} = require("../XPath/Consulta");
    const {Nodo} = require("../XPath/Nodo");
    const {Predicate} = require("../XPath/Predicate");
    const {TipoPrim} = require("../Expresiones/Primitiva")
    const {TipoOperacion} = require("../Expresiones/Operacion");
    const {TipoNodo} = require("../XPath/Nodo");
    const {TipoAxis} = require("../XPath/Nodo")

    const errores = require('../Global/ListaError');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 50;
break;
case 2:return 12;
break;
case 3:return "dot";
break;
case 4:return "attr";
break;
case 5:return "corA";
break;
case 6:return "corC";
break;
case 7:return "andSelect";
break;
case 8:return "dospuntos";
break;
case 9:return "parA";
break;
case 10:return "parC";
break;
case 11:return 20;
break;
case 12:return "mas";
break;
case 13:return "menos";
break;
case 14:return "div";
break;
case 15:return 46;
break;
case 16:return "gte";
break;
case 17:return 47;
break;
case 18:return 49;
break;
case 19:return "nequal";
break;
case 20:return "or";
break;
case 21:return "and";
break;
case 22:return "mod";
break;
case 23:return "ancestorSelf";
break;
case 24:return "ancestor";
break;
case 25:return "attribute";
break;
case 26:return "child";
break;
case 27:return "descendantSelf";
break;
case 28:return "descendant";
break;
case 29:return "followingSib";
break;
case 30:return "following";
break;
case 31:return "namespace";
break;
case 32:return "parent";
break;
case 33:return "precedSib";
break;
case 34:return "preced";
break;
case 35:return "self";
break;
case 36:return "lastFunc";
break;
case 37:return "positionFunc";
break;
case 38:return "nodeFunc";
break;
case 39:return "textFunc";
break;
case 40:return 57;
break;
case 41:return 58;
break;
case 42:return 8;
break;
case 43:return 59;
break;
case 44:return 60;
break;
case 45:
                                        console.log(errores.default);
                                        errores.default.agregarError('lexico', 'Simbolo inesperado ' + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column);
                                    
break;
case 46:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:=)/,/^(?:\/)/,/^(?:\.)/,/^(?:@)/,/^(?:\[)/,/^(?:\])/,/^(?:\|)/,/^(?:::)/,/^(?:\()/,/^(?:\))/,/^(?:\*)/,/^(?:\+)/,/^(?:-)/,/^(?:div\b)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:last\(\))/,/^(?:position\(\))/,/^(?:node\(\))/,/^(?:text\(\))/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ.-]*)/,/^(?:("((\\([\'\"\\]))|([^\"\\]+))*"))/,/^(?:('((\\([\'\"\\]))|([^\'\\]))*'))/,/^(?:.)/,/^(?:$)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XPath_GramaticaAsc;
exports.Parser = XPath_GramaticaAsc.Parser;
exports.parse = function () { return XPath_GramaticaAsc.parse.apply(XPath_GramaticaAsc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}