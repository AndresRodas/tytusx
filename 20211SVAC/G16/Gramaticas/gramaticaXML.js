/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaXML = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,26],$V2=[2,5,7],$V3=[1,29],$V4=[1,30],$V5=[1,36],$V6=[1,35],$V7=[1,60],$V8=[1,49],$V9=[1,54],$Va=[1,52],$Vb=[1,50],$Vc=[1,58],$Vd=[1,53],$Ve=[1,51],$Vf=[1,55],$Vg=[1,48],$Vh=[1,56],$Vi=[1,57],$Vj=[1,59],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[2,15,22,24],$Vq=[1,75],$Vr=[1,86],$Vs=[1,78],$Vt=[1,76],$Vu=[1,73],$Vv=[1,79],$Vw=[1,77],$Vx=[1,70],$Vy=[1,74],$Vz=[1,71],$VA=[1,72],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[7,8,9,10,11,12,13,17,22,24,28,29,30,31,32,33,34,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INIT":4,"EOF":5,"VERSION":6,"eInicio":7,"inter":8,"xml":9,"version":10,"igual":11,"CADENA":12,"encoding":13,"FORMATO":14,"eFin":15,"OP":16,"utf":17,"ascii":18,"iso":19,"NODOS":20,"NODO":21,"ID":22,"ATRIBUTOS":23,"barra":24,"TEXTO":25,"ATRIBUTO":26,"CHAR":27,"integer":28,"double":29,"CARACTER":30,"mayorque":31,"menorque":32,"apostrofe":33,"comilla":34,"ampersand":35,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"eInicio",8:"inter",9:"xml",10:"version",11:"igual",12:"CADENA",13:"encoding",15:"eFin",17:"utf",18:"ascii",19:"iso",22:"ID",24:"barra",27:"CHAR",28:"integer",29:"double",30:"CARACTER",31:"mayorque",32:"menorque",33:"apostrofe",34:"comilla",35:"ampersand"},
productions_: [0,[3,2],[4,1],[6,12],[6,2],[14,1],[14,1],[14,1],[14,2],[16,1],[16,0],[20,2],[20,1],[21,9],[21,9],[21,8],[21,5],[21,8],[21,8],[21,7],[21,4],[21,2],[23,2],[23,1],[26,3],[26,3],[26,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                        //ESTADO 1 ES PARA TS
                        if(Estado.Estado.cambio==1){
                          Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("S -> INIT EOF", "S.val := INIT.val"));
                          this.$=$$[$0-1];
                          return {list:this.$,encoding:encoding};
                        }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                          let NodoS = new Nodo.default("S", "");
                          NodoS.AgregarHijo($$[$0-1]);
                          this.$=NodoS;
                          return {list:this.$,encoding:encoding};
                        }
                    
break;
case 2:

                //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("INIT -> VERSION", "INIT.val := VERSION.val"));
                  this.$=$$[$0]
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  this.$=new Nodo.default("INIT", "INIT -> VERSION");
                  this.$.AgregarHijo($$[$0]);
                }
              
break;
case 3:

                //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("VERSION -> eInicio inter xml version igual CADENA encoding igual FORMATO inter eFin OP", "VERSION.val := CADENA.lexval + FORMATO.lexval + OP.val"));
                  this.$=new Raiz.default("INICIO");
                  let a=new Raiz.default("VERSION");
                  a.agregarHijo($$[$0-8]);
                  this.$.agregarHijo(a);
                  this.$.agregarHijo($$[$0-3]);
                  this.$.agregarHijo($$[$0]);
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  let NodoVersion = new Nodo.default("VERSION", "VERSION -> eInicio inter xml version igual CADENA encoding igual FORMATO inter eFin OP");
                  NodoVersion.AgregarHijo(new Nodo.default($$[$0-11],""));
                  NodoVersion.AgregarHijo(new Nodo.default($$[$0-10],""));
                  NodoVersion.AgregarHijo(new Nodo.default($$[$0-9],""));
                  NodoVersion.AgregarHijo(new Nodo.default($$[$0-8],""));
                  NodoVersion.AgregarHijo(new Nodo.default($$[$0-7],""));
                  NodoVersion.AgregarHijo(new Nodo.default("Version:", $$[$0-6]));
                  NodoVersion.AgregarHijo(new Nodo.default($$[$0-5],""));
                  NodoVersion.AgregarHijo(new Nodo.default($$[$0-4],""));
                  NodoVersion.AgregarHijo($$[$0-3]);
                  NodoVersion.AgregarHijo(new Nodo.default($$[$0-2],""));
                  NodoVersion.AgregarHijo(new Nodo.default($$[$0-1],""));
                  NodoVersion.AgregarHijo($$[$0]);
                  this.$ = NodoVersion;
                }
              
break;
case 4:

        ErrorL.Errores.add(new nodoError.Error("Sintáctico","Se esperaba una línea de código de inicialización en lugar de: "+yytext,_$[$0-1].first_line, _$[$0-1].first_column,"XML"));
  
break;
case 5:

                  //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("FORMATO -> utf", "FORMATO.val := utf.lexval"));
                  this.$=new Raiz.default("FORMATO")
                  this.$.agregarHijo($$[$0]);
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  this.$ = new Nodo.default("FORMATO", "FORMATO -> utf");
                  this.$.AgregarHijo(new Nodo.default($$[$0],""));
                }
                encoding="utf"
    
break;
case 6:

                    //ESTADO 1 ES PARA TS
                  if(Estado.Estado.cambio==1){
                    Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("FORMATO -> ascii", "FORMATO.val := ascii.lexval"));
                    this.$=new Raiz.default("FORMATO")
                    this.$.agregarHijo($$[$0]);
                  }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                    this.$ = new Nodo.default("FORMATO", "FORMATO -> ascii");
                    this.$.AgregarHijo(new Nodo.default($$[$0],""));
                  }
                  encoding="ascii"
                
break;
case 7:

                    //ESTADO 1 ES PARA TS
                  if(Estado.Estado.cambio==1){
                    Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("FORMATO -> iso", "FORMATO.val := iso.lexval"));
                    this.$=new Raiz.default("FORMATO")
                    this.$.agregarHijo($$[$0]);
                  }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                    this.$ = new Nodo.default("FORMATO", "FORMATO -> iso");
                    this.$.AgregarHijo(new Nodo.default($$[$0],""));
                  }
                  encoding="iso"
                
break;
case 8:

                //ESTADO 1 ES PARA TS
 ErrorL.Errores.add(new nodoError.Error("Sintáctico","Formato desconocido: "+yytext,_$[$0-1].first_line, _$[$0-1].first_column,"XML"));
              
break;
case 9:

                    //ESTADO 1 ES PARA TS
                  if(Estado.Estado.cambio==1){
                    Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("OP -> NODOS", "OP.val := NODOS.val"));
                    this.$=new Raiz.default("L_ELEMENTOS");
                    this.$.agregarHijo($$[$0]);
                  }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                    this.$=new Nodo.default("OP", "OP -> NODOS");
                    this.$.AgregarHijo($$[$0])
                  }
                
break;
case 10:

                    //ESTADO 1 ES PARA TS
                  if(Estado.Estado.cambio==1){
                    this.$=[]
                  }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                    
                  }
                
break;
case 11:

                    //ESTADO 1 ES PARA TS
                  if(Estado.Estado.cambio==1){
                    Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("NODOS -> NODOS NODO", "NODOS.val := NODOS1.val + NODO.val"));
                    let p12=new Raiz.default("L_ELEMENTOS");
                    p12.agregarHijo($$[$0-1]);
                    p12.agregarHijo($$[$0]);
                    this.$=p12;
                  }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                    let lnodo = new Nodo.default("NODOS","NODOS -> NODOS NODO");
                    lnodo.AgregarHijo($$[$0-1]);
                    lnodo.AgregarHijo($$[$0]);
                    this.$=lnodo;
                  }
                
break;
case 12:

                    //ESTADO 1 ES PARA TS
                  if(Estado.Estado.cambio==1){
                    Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("NODOS -> NODO", "NODOS.val := NODO.val"));
                    this.$= new Raiz.default("ELEMENTO");
                    this.$.agregarHijo($$[$0])
                  }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                    this.$ = new Nodo.default("NODOS", "NODOS -> NODO");
                    this.$.AgregarHijo($$[$0])
                  }
                
break;
case 13:

                //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("eInicio ID ATRIBUTOS eFin NODOS eInicio barra ID eFin", "NODO.val := ID1.lexval + ATRIBUTOS.val + NODOS.val + ID2.lexval"));
                  let elemento=new Objeto.default($$[$0-7],$$[$0-1],"",$$[$0-6],$$[$0-4],false,_$[$0-8].first_line, _$[$0-8].first_column);
                  let p4=new Raiz.default("ELEMENTO");
                  p4.agregarHijo(elemento);
                  this.$= p4;
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  let n1 = new Nodo.default("NODO","eInicio ID ATRIBUTOS eFin NODOS eInicio barra ID eFin");
                  n1.AgregarHijo(new Nodo.default($$[$0-8],""));
                  n1.AgregarHijo(new Nodo.default($$[$0-7],""));
                  n1.AgregarHijo($$[$0-6]);
                  n1.AgregarHijo(new Nodo.default($$[$0-5],""));
                  n1.AgregarHijo($$[$0-4]);
                  n1.AgregarHijo(new Nodo.default($$[$0-3],""));
                  n1.AgregarHijo(new Nodo.default($$[$0-2],""));
                  n1.AgregarHijo(new Nodo.default($$[$0-1],""));
                  n1.AgregarHijo(new Nodo.default($$[$0],""));
                  this.$=n1;
                }
  
break;
case 14:

                //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("NODO -> eInicio ID ATRIBUTOS eFin TEXTO eInicio barra ID eFin", "NODO.val := ID1.lexval + ATRIBUTOS.val + TEXTO.val + ID2.lexval"));
                  let elemento1=new Objeto.default($$[$0-7],$$[$0-1],$$[$0-4],$$[$0-6],null,false,_$[$0-8].first_line, _$[$0-8].first_column) ;
                  let p5=new Raiz.default("ELEMENTO");
                  p5.agregarHijo(elemento1);
                  this.$= p5;
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  let n2 = new Nodo.default("NODO","NODO -> eInicio ID ATRIBUTOS eFin TEXTO eInicio barra ID eFin");
                  n2.AgregarHijo(new Nodo.default($$[$0-8],""));
                  n2.AgregarHijo(new Nodo.default($$[$0-7],""));
                  n2.AgregarHijo($$[$0-6]);
                  n2.AgregarHijo(new Nodo.default($$[$0-5],""));
                  n2.AgregarHijo($$[$0-4]);
                  n2.AgregarHijo(new Nodo.default($$[$0-3],""));
                  n2.AgregarHijo(new Nodo.default($$[$0-2],""));
                  n2.AgregarHijo(new Nodo.default($$[$0-1],""));
                  n2.AgregarHijo(new Nodo.default($$[$0],""));
                  this.$=n2;
                }
              
break;
case 15:

                //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("NODO -> eInicio ID ATRIBUTOS eFin eInicio barra ID eFin", "NODO.val := ID1.lexval + ATRIBUTOS.val + ID2.lexval"));
                  let elemento2=new Objeto.default($$[$0-6],$$[$0-1],"",$$[$0-5],null,false,_$[$0-7].first_line, _$[$0-7].first_column)
                  let p6=new Raiz.default("ELEMENTO");
                  p6.agregarHijo(elemento2);
                  this.$= p6;
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  let n3 = new Nodo.default("NODO","NODO -> eInicio ID ATRIBUTOS eFin eInicio barra ID eFin");
                  n3.AgregarHijo(new Nodo.default($$[$0-7],""));
                  n3.AgregarHijo(new Nodo.default($$[$0-6],""));
                  n3.AgregarHijo($$[$0-5]);
                  n3.AgregarHijo(new Nodo.default($$[$0-4],""));
                  n3.AgregarHijo(new Nodo.default($$[$0-3],""));
                  n3.AgregarHijo(new Nodo.default($$[$0-2],""));
                  n3.AgregarHijo(new Nodo.default($$[$0-1],""));
                  n3.AgregarHijo(new Nodo.default($$[$0],""));
                  this.$=n3;
                }
              
break;
case 16:

                //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("NODO -> eInicio ID ATRIBUTOS barra eFin", "NODO.val := ID.lexval + ATRIBUTOS.val"));
                  let elemento3=new Objeto.default($$[$0-3],"",texto,$$[$0-2],null,true,_$[$0-4].first_line, _$[$0-4].first_column);
                  let p7=new Raiz.default("ELEMENTO");
                  p7.agregarHijo(elemento3);
                  this.$= p7;
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  let n4 = new Nodo.default("NODO","NODO -> eInicio ID ATRIBUTOS barra eFin");
                  n4.AgregarHijo(new Nodo.default($$[$0-4],""));
                  n4.AgregarHijo(new Nodo.default($$[$0-3],""));
                  n4.AgregarHijo($$[$0-2]);
                  n4.AgregarHijo(new Nodo.default($$[$0-1],""));
                  n4.AgregarHijo(new Nodo.default($$[$0],""));
                  this.$=n4;
                }
              
break;
case 17:

              //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("NODO -> eInicio ID eFin NODOS eInicio barra ID eFin", "NODO.val := ID1.lexval + NODOS.val + ID2.lexval"));
                  let elemento4=new Objeto.default($$[$0-6],$$[$0-1],"",null,$$[$0-4],false,_$[$0-7].first_line, _$[$0-7].first_column);
                  let p8=new Raiz.default("ELEMENTO");
                  p8.agregarHijo(elemento4)
                  this.$= p8;
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  let n5 = new Nodo.default("NODO","NODO -> eInicio ID eFin NODOS eInicio barra ID eFin");
                  n5.AgregarHijo(new Nodo.default($$[$0-7],""));
                  n5.AgregarHijo(new Nodo.default($$[$0-6],""));
                  n5.AgregarHijo(new Nodo.default($$[$0-5],""));
                  n5.AgregarHijo($$[$0-4]);
                  n5.AgregarHijo(new Nodo.default($$[$0-3],""));
                  n5.AgregarHijo(new Nodo.default($$[$0-2],""));
                  n5.AgregarHijo(new Nodo.default($$[$0-1],""));
                  n5.AgregarHijo(new Nodo.default($$[$0],""));
                  this.$=n5;
                }
            
break;
case 18:

                //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("NODO -> eInicio ID eFin TEXTO eInicio barra ID eFin", "NODO.val := ID1.lexval + TEXTO.val + ID2.lexval"));
                  let elemento5=new Objeto.default($$[$0-6],$$[$0-1],$$[$0-4],null,null,false,_$[$0-7].first_line, _$[$0-7].first_column) ;
                  let p9=new Raiz.default("ELEMENTO");
                  p9.agregarHijo(elemento5);
                  this.$= p9;
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  let n6 = new Nodo.default("NODO","NODO -> eInicio ID eFin TEXTO eInicio barra ID eFin");
                  n6.AgregarHijo(new Nodo.default($$[$0-7],""));
                  n6.AgregarHijo(new Nodo.default($$[$0-6],""));
                  n6.AgregarHijo(new Nodo.default($$[$0-5],""));
                  n6.AgregarHijo($$[$0-4]);
                  n6.AgregarHijo(new Nodo.default($$[$0-3],""));
                  n6.AgregarHijo(new Nodo.default($$[$0-2],""));
                  n6.AgregarHijo(new Nodo.default($$[$0-1],""));
                  n6.AgregarHijo(new Nodo.default($$[$0],""));
                  this.$=n6;
                }
              
break;
case 19:

                //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("NODO -> eInicio ID  eFin eInicio barra ID eFin", "NODO.val := ID1.lexval + ID2.lexval"));
                  let elemento6=new Objeto.default($$[$0-5],$$[$0-1],texto,null,null,false,_$[$0-6].first_line, _$[$0-6].first_column);
                  let p10=new Raiz.default("ELEMENTO");
                  p10.agregarHijo(elemento6);
                  this.$= p10;
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  let n7 = new Nodo.default("NODO","NODO -> eInicio ID  eFin eInicio barra ID eFin");
                  n7.AgregarHijo(new Nodo.default($$[$0-6], ""));
                  n7.AgregarHijo(new Nodo.default($$[$0-5], ""));
                  n7.AgregarHijo(new Nodo.default($$[$0-4], ""));
                  n7.AgregarHijo(new Nodo.default($$[$0-3], ""));
                  n7.AgregarHijo(new Nodo.default($$[$0-2], ""));
                  n7.AgregarHijo(new Nodo.default($$[$0-1], ""));
                  n7.AgregarHijo(new Nodo.default($$[$0], ""));
                  this.$=n7;
                }
              
break;
case 20:

                //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("NODO -> eInicio ID barra eFin", "NODO.val := ID.lexval"));
                  let elemento7=new Objeto.default($$[$0-2],"",texto,null,null,true,_$[$0-3].first_line, _$[$0-3].first_column);
                  let p11=new Raiz.default("ELEMENTO");
                  p11.agregarHijo(elemento7);
                  this.$= p11;
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  let n8 = new Nodo.default("NODO","NODO -> eInicio ID barra eFin");
                  n8.AgregarHijo(new Nodo.default($$[$0-3],""));
                  n8.AgregarHijo(new Nodo.default($$[$0-2],""));
                  n8.AgregarHijo(new Nodo.default($$[$0-1],""));
                  n8.AgregarHijo(new Nodo.default($$[$0],""));
                  this.$=n8;
                }
    
break;
case 21:

              ErrorL.Errores.add(new nodoError.Error("Sintáctico","Caracter inesperado, verifique las etiquetas de apertura y cierre: "+yytext,_$[$0-1].first_line, _$[$0-1].first_column,"XML"));
              
break;
case 22:

                //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("ATRIBUTOS -> ATRIBUTOS ATRIBUTO ", "ATRIBUTOS.val := ATRIBUTOS1.val + ATRIBUTO.val"));
                  let p3=new Raiz.default("L_ATRIBUTOS");
                  p3.agregarHijo($$[$0-1]);
                  p3.agregarHijo($$[$0]);
                  this.$=p3;
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  let nodoatr = new Nodo.default("ATRIBUTOS","ATRIBUTOS -> ATRIBUTOS ATRIBUTO ");
                  nodoatr.AgregarHijo($$[$0-1]);
                  nodoatr.AgregarHijo($$[$0]);
                  this.$=nodoatr;
                }else{//PARA REPORTE GRAMATICAL

                }
              
break;
case 23:

                //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("ATRIBUTOS -> ATRIBUTO", "ATRIBUTOS.val := ATRIBUTOS.val"));
                  this.$= new Raiz.default("ATRIBUTO");
                  this.$.agregarHijo($$[$0]);
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  this.$=new Nodo.default("ATRIBUTOS", "ATRIBUTOS -> ATRIBUTO");
                  this.$.AgregarHijo($$[$0]);
                }
              
break;
case 24:

                //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("ATRIBUTO -> ID IGUAL CADENA", "ATRIBUTO.val := ID.lexval + igual.lexval + CADENA.lexval"));
                  let atributo=new Atributo.default($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                  let p2=new Raiz.default("ATRIBUTO");
                  p2.agregarHijo(atributo);
                  this.$= p2;
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  let atid = new Nodo.default("ATRIBUTO", "ATRIBUTO -> ID IGUAL CADENA");
                  atid.AgregarHijo(new Nodo.default($$[$0-2], ""));
                  atid.AgregarHijo(new Nodo.default($$[$0-1], ""));
                  atid.AgregarHijo(new Nodo. default($$[$0], ""));
                  this.$=atid;
                }
              
break;
case 25:

                //ESTADO 1 ES PARA TS
                if(Estado.Estado.cambio==1){
                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("ATRIBUTO -> ID IGUAL CHAR", "ATRIBUTO.val := ID.lexval + igual.lexval + CHAR.lexval"));
                  let atributo2=new Atributo.default($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                  let p1=new Raiz.default("ATRIBUTO");
                  p1.agregarHijo(atributo2);
                  this.$= p1;
                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                  let atch = new Nodo.default("ATRIBUTO", "ATRIBUTO -> ID IGUAL CHAR");
                  atch.AgregarHijo(new Nodo.default($$[$0-2], ""));
                  atch.AgregarHijo(new Nodo.default($$[$0-1], ""));
                  atch.AgregarHijo(new Nodo. default($$[$0], ""));
                  this.$=atch;
                }
              
break;
case 26:


                  ErrorL.Errores.add(new nodoError.Error("Sintáctico","Se esperaba el valor de un atributo: "+yytext,_$[$0-1].first_line, _$[$0-1].first_column,"XML"));

              
break;
case 27:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO ID", "TEXTO.val:= TEXTO1.val + ID.lexval"));
                                  this.$=$$[$0-1]+" "+$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto = new Nodo.default("TEXTO", "TEXTO -> TEXTO ID");
                                  nodoTexto.AgregarHijo($$[$0-1]);
                                  nodoTexto.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto;
                                }

                              
break;
case 28:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO INTEGER", "TEXTO.val:= TEXTO1.val + INTEGER.lexval"));
                                  this.$=$$[$0-1]+" "+$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto1 = new Nodo.default("TEXTO", "TEXTO -> TEXTO INTEGER");
                                  nodoTexto1.AgregarHijo($$[$0-1]);
                                  nodoTexto1.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto1;
                                }
                              
break;
case 29:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO DOBLE", "TEXTO.val:= TEXTO1.val + DOBLE.lexval"));
                                  this.$=$$[$0-1]+" "+$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto2 = new Nodo.default("TEXTO", "TEXTO -> TEXTO DOBLE");
                                  nodoTexto2.AgregarHijo($$[$0-1]);
                                  nodoTexto2.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto2;
                                }
                              
break;
case 30:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO CADENA", "TEXTO.val:= TEXTO1.val + CADENA.lexval"));
                                  this.$=$$[$0-1]+" "+$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto3 = new Nodo.default("TEXTO", "TEXTO -> TEXTO CADENA");
                                  nodoTexto3.AgregarHijo($$[$0-1]);
                                  nodoTexto3.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto3;
                                }
                              
break;
case 31:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO BARRA", "TEXTO.val:= TEXTO1.val + BARRA.lexval"));
                                  this.$=$$[$0-1]+" "+$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto4 = new Nodo.default("TEXTO", "TEXTO -> TEXTO BARRA");
                                  nodoTexto4.AgregarHijo($$[$0-1]);
                                  nodoTexto4.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto4;
                                }else{//PARA REPORTE GRAMATICAL

                                }
                              
break;
case 32:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO INTER", "TEXTO.val:= TEXTO1.val + INTER.lexval"));
                                  this.$=$$[$0-1]+" "+$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto5 = new Nodo.default("TEXTO", "TEXTO -> TEXTO INTER");
                                  nodoTexto5.AgregarHijo($$[$0-1]);
                                  nodoTexto5.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto5;
                                }else{//PARA REPORTE GRAMATICAL

                                }
                              
break;
case 33:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO IGUAL", "TEXTO.val:= TEXTO1.val + IGUAL.lexval"));
                                  this.$=$$[$0-1]+" "+$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto6 = new Nodo.default("TEXTO", "TEXTO -> TEXTO IGUAL");
                                  nodoTexto6.AgregarHijo($$[$0-1]);
                                  nodoTexto6.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto6;
                                }
                              
break;
case 34:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO UTF", "TEXTO.val:= TEXTO1.val + UTF.lexval"));
                                  this.$=$$[$0-1]+" "+$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto7 = new Nodo.default("Texto", "TEXTO -> TEXTO UTF");
                                  nodoTexto7.AgregarHijo($$[$0-1]);
                                  nodoTexto7.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto7;
                                }
                              
break;
case 35:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO VERSION", "TEXTO.val:= TEXTO1.val + VERSION.lexval"));
                                  this.$=$$[$0-1]+" "+$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto8 = new Nodo.default("TEXTO", "TEXTO -> TEXTO VERSION");
                                  nodoTexto8.AgregarHijo($$[$0-1]);
                                  nodoTexto8.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto8;
                                }
                              
break;
case 36:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO ENCODING", "TEXTO.val:= TEXTO1.val + ENCODING.lexval"));
                                  this.$=$$[$0-1]+" "+$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto9 = new Nodo.default("TEXTO", "TEXTO -> TEXTO ENCODING");
                                  nodoTexto9.AgregarHijo($$[$0-1]);
                                  nodoTexto9.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto9;
                                }
                              
break;
case 37:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO CARACTER", "TEXTO.val:= TEXTO1.val + CARACTER.lexval"));
                                 this.$=$$[$0-1]+" "+$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto10 = new Nodo.default("TEXTO", "TEXTO -> TEXTO CARACTER");
                                  nodoTexto10.AgregarHijo($$[$0-1]);
                                  nodoTexto10.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto10;
                                }
                              
break;
case 38:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO MAYORQUE", "TEXTO.val:= TEXTO1.val + MAYORQUE.lexval"));
                                  this.$=$$[$0-1]+" "+">"
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto11 = new Nodo.default("TEXTO", "TEXTO -> TEXTO MAYORQUE");
                                  nodoTexto11.AgregarHijo($$[$0-1]);
                                  nodoTexto11.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto11;
                                }
                              
break;
case 39:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO MENORQUE", "TEXTO.val:= TEXTO1.val + MENORQUE.lexval"));
                                  this.$=$$[$0-1]+" "+"<"
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto12 = new Nodo.default("TEXTO", "TEXTO -> TEXTO MENORQUE");
                                  nodoTexto12.AgregarHijo($$[$0-1]);
                                  nodoTexto12.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto12;
                                }
                              
break;
case 40:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO APOSTROFE", "TEXTO.val:= TEXTO1.val + APOSTROFE.lexval"));
                                  this.$=$$[$0-1]+" "+"'"
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto13 = new Nodo.default("TEXTO", "TEXTO -> TEXTO APOSTROFE");
                                  nodoTexto13.AgregarHijo($$[$0-1]);
                                  nodoTexto13.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto13;
                                }
                              
break;
case 41:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO COMILLA", "TEXTO.val:= TEXTO1.val + COMILLA.lexval"));
                                  this.$=$$[$0-1]+" "+"\""
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto14 = new Nodo.default("TEXTO", "TEXTO -> TEXTO COMILLA");
                                  nodoTexto14.AgregarHijo($$[$0-1]);
                                  nodoTexto14.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto14;
                                }
                              
break;
case 42:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO AMPERSAND", "TEXTO.val:= TEXTO1.val + AMPERSAND.lexval"));
                                  this.$=$$[$0-1]+" "+"&"
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto15 = new Nodo.default("TEXTO", "TEXTO -> TEXTO AMPERSAND");
                                  nodoTexto15.AgregarHijo($$[$0-1]);
                                  nodoTexto15.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto15;
                                }
                              
break;
case 43:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> TEXTO XML", "TEXTO.val:= TEXTO1.val + XML.lexval"));
                                  this.$=$$[$0-1]+" "+$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  let nodoTexto16 = new Nodo.default("TEXTO", "TEXTO -> TEXTO XML");
                                  nodoTexto16.AgregarHijo($$[$0-1]);
                                  nodoTexto16.AgregarHijo(new Nodo.default($$[$0],""));
                                  this.$= nodoTexto16;
                                }
                              
break;
case 44:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> MAYORQUE", "TEXTO.val := MAYORQUE.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> MAYORQUE");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 45:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> MENORQUE", "TEXTO.val := MENORQUE.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> MENORQUE");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 46:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> APOSTROFE", "TEXTO.val := APOSTROFE.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> APOSTROFE");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 47:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> COMILLA", "TEXTO.val := COMILLA.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> COMILLA");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 48:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> AMPERSAND", "TEXTO.val := AMPERSAND.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> AMPERSAND");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 49:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> BARRA", "TEXTO.val := BARRA.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> BARRA");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 50:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> INTER", "TEXTO.val := INTER.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> INTER");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 51:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> IGUAL", "TEXTO.val := IGUAL.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> IGUAL");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 52:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> UTF", "TEXTO.val := UTF.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> UTF");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 53:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> VERSION", "TEXTO.val := VERSION.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> VERSION");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 54:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> ENCODING", "TEXTO.val := ENCODING.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> ENCODING");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 55:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> XML", "TEXTO.val := XML.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> XML");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 56:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> ID", "TEXTO.val := ID.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> ID");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 57:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> INTEGER", "TEXTO.val := INTEGER.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> INTEGER");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                                }
                              
break;
case 58:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> DOBLE", "TEXTO.val := DOBLE.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> DOBLE");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                }
                              
break;
case 59:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> CADENA", "TEXTO.val := CADENA.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> CADENA");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                }
                              
break;
case 60:

                                //ESTADO 1 ES PARA TS
                                if(Estado.Estado.cambio==1){
                                  Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> CARACTER", "TEXTO.val := CARACTER.lexval"));
                                  this.$=$$[$0]
                                }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                  this.$=new Nodo.default("TEXTO","TEXTO -> CARACTER");
                                  this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                }
                              
break;
case 61:


                                  ErrorL.Errores.add(new nodoError.Error("Sintáctico","Se esperaba un texto válido: "+yytext,_$[$0-1].first_line, _$[$0-1].first_column,"XML"));

                  
break;
}
},
table: [{2:[1,5],3:1,4:2,6:3,7:[1,4]},{1:[3]},{5:[1,6]},{5:[2,2]},{8:[1,7]},{5:[1,8]},{1:[2,1]},{9:[1,9]},{5:[2,4]},{10:[1,10]},{11:[1,11]},{12:[1,12]},{13:[1,13]},{11:[1,14]},{2:[1,19],14:15,17:[1,16],18:[1,17],19:[1,18]},{8:[1,20]},{8:[2,5]},{8:[2,6]},{8:[2,7]},{5:[1,21]},{15:[1,22]},{8:[2,8]},{2:$V0,5:[2,10],7:$V1,16:23,20:24,21:25},{5:[2,3]},{2:$V0,5:[2,9],7:$V1,21:28},o($V2,[2,12]),{22:$V3},{15:$V4},o($V2,[2,11]),{2:$V5,15:[1,32],22:$V6,23:31,24:[1,33],26:34},o($V2,[2,21]),{2:$V5,15:[1,37],22:$V6,24:[1,38],26:39},{2:$V7,7:[1,42],8:$V8,9:$V9,10:$Va,11:$Vb,12:$Vc,13:$Vd,17:$Ve,20:40,21:25,22:$Vf,24:$Vg,25:41,28:$Vh,29:$Vi,30:$Vj,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo},{15:[1,61]},o($Vp,[2,23]),{11:[1,62]},{15:[1,63]},{2:$V7,7:[1,66],8:$V8,9:$V9,10:$Va,11:$Vb,12:$Vc,13:$Vd,17:$Ve,20:64,21:25,22:$Vf,24:$Vg,25:65,28:$Vh,29:$Vi,30:$Vj,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo},{15:[1,67]},o($Vp,[2,22]),{2:$V0,7:[1,68],21:28},{7:[1,69],8:$Vq,9:$Vr,10:$Vs,11:$Vt,12:$Vu,13:$Vv,17:$Vw,22:$Vx,24:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG},{22:$V3,24:[1,87]},o($VH,[2,44]),o($VH,[2,45]),o($VH,[2,46]),o($VH,[2,47]),o($VH,[2,48]),o($VH,[2,49]),o($VH,[2,50]),o($VH,[2,51]),o($VH,[2,52]),o($VH,[2,53]),o($VH,[2,54]),o($VH,[2,55]),o($VH,[2,56]),o($VH,[2,57]),o($VH,[2,58]),o($VH,[2,59]),o($VH,[2,60]),{7:[1,88],15:$V4},o($V2,[2,20]),{12:[1,89],27:[1,90]},o($Vp,[2,26]),{2:$V0,7:[1,91],21:28},{7:[1,92],8:$Vq,9:$Vr,10:$Vs,11:$Vt,12:$Vu,13:$Vv,17:$Vw,22:$Vx,24:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG},{22:$V3,24:[1,93]},o($V2,[2,16]),{22:$V3,24:[1,94]},{24:[1,95]},o($VH,[2,27]),o($VH,[2,28]),o($VH,[2,29]),o($VH,[2,30]),o($VH,[2,31]),o($VH,[2,32]),o($VH,[2,33]),o($VH,[2,34]),o($VH,[2,35]),o($VH,[2,36]),o($VH,[2,37]),o($VH,[2,38]),o($VH,[2,39]),o($VH,[2,40]),o($VH,[2,41]),o($VH,[2,42]),o($VH,[2,43]),{22:[1,96]},o($VH,[2,61]),o($Vp,[2,24]),o($Vp,[2,25]),{22:$V3,24:[1,97]},{24:[1,98]},{22:[1,99]},{22:[1,100]},{22:[1,101]},{15:[1,102]},{22:[1,103]},{22:[1,104]},{15:[1,105]},{15:[1,106]},{15:[1,107]},o($V2,[2,19]),{15:[1,108]},{15:[1,109]},o($V2,[2,15]),o($V2,[2,17]),o($V2,[2,18]),o($V2,[2,13]),o($V2,[2,14])],
defaultActions: {3:[2,2],6:[2,1],8:[2,4],16:[2,5],17:[2,6],18:[2,7],21:[2,8],23:[2,3]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const Estado=require('../app/Clases/Models/Estado.js')
  const Gram = require('../app/Clases/Models/ListaGramatica.js')
  var NodoGram = require('../app/Clases/Models/NodoGramatica.js')
  var Atributo=require("../app/Clases/Models/Atributo.js")
  var Objeto=require("../app/Clases/Models/Objeto.js")
  var Raiz=require("../app/Clases/Models/Raiz.js")
  var nodoError=require("../app/Clases/Models/Errores.js")
  var ErrorL=require("../app/Clases/Models/ListaError.js")
  var Nodo=require("../app/Clases/Models/Nodo.js")
  texto=""
  encoding="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:this.begin("Comentario"); 
break;
case 2:
break;
case 3: this.popState();
break;
case 4:return 10
break;
case 5:return 13
break;
case 6:return 9
break;
case 7:return 32
break;
case 8:return 31
break;
case 9:return 35
break;
case 10:return 33
break;
case 11:return 34
break;
case 12:return 17
break;
case 13:return 18
break;
case 14:return 19
break;
case 15:return 7
break;
case 16:return 15
break;
case 17:return 24
break;
case 18:return 8
break;
case 19:return 11
break;
case 20:return 22;
break;
case 21:return 28;
break;
case 22:return 29;
break;
case 23:return 12;
break;
case 24:return 27;
break;
case 25:return 30
break;
case 26:return 5;
break;
case 27: ErrorL.Errores.add(new nodoError.Error("Léxico","Caracter "+yy_.yytext+
" no reconocido",yy_.yylineno,yy_.yylloc.first_column,"XML")) 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:<!--)/i,/^(?:[^"-->"]+)/i,/^(?:-->)/i,/^(?:version\b)/i,/^(?:encoding\b)/i,/^(?:xml\b)/i,/^(?:&lt;)/i,/^(?:&gt;)/i,/^(?:&amp;)/i,/^(?:&apos;)/i,/^(?:&quot;)/i,/^(?:"UTF-8")/i,/^(?:"ASCII")/i,/^(?:"ISO-8859-1")/i,/^(?:<)/i,/^(?:>)/i,/^(?:\/)/i,/^(?:\?)/i,/^(?:=)/i,/^(?:([a-zA-Z]|_)+(_|\.|-|:|á|é|í|ó||ñ|Á|É|Í|Ó|Ú|[0-9A-Za-z])*)/i,/^(?:[0-9]+)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[\"]([^\"\n]|(\\")|(\\'))*[\"])/i,/^(?:[\'][^\'\n]*[\'])/i,/^(?:[^<>&]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"Comentario":{"rules":[2,3],"inclusive":false},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaXML;
exports.Parser = gramaticaXML.Parser;
exports.parse = function () { return gramaticaXML.parse.apply(gramaticaXML, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}