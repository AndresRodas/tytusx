/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XPathDESC = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,7],$V5=[1,10],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,19],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,26],$Vk=[1,27],$Vl=[1,28],$Vm=[1,29],$Vn=[1,30],$Vo=[1,31],$Vp=[1,32],$Vq=[1,33],$Vr=[1,34],$Vs=[1,35],$Vt=[1,36],$Vu=[1,37],$Vv=[1,38],$Vw=[5,19,22,25,31,32,33,34,35,36,37,38,39,40,41,42,52,53,54,55,56,57,58,59,60,61,62,63,64],$Vx=[2,17],$Vy=[1,47],$Vz=[1,48],$VA=[1,49],$VB=[1,50],$VC=[5,18,19,22,25,31,32,33,34,35,36,37,38,39,40,41,42,52,53,54,55,56,57,58,59,60,61,62,63,64],$VD=[5,6,8,17,18,19,22,25,31,32,33,34,35,36,37,38,39,40,41,42,52,53,54,55,56,57,58,59,60,61,62,63,64],$VE=[5,19,22,52,53,54,55,56,57,58,59,60,61,62,63,64],$VF=[2,48],$VG=[1,68],$VH=[1,69],$VI=[1,57],$VJ=[1,55],$VK=[1,56],$VL=[1,58],$VM=[1,59],$VN=[1,60],$VO=[1,61],$VP=[1,62],$VQ=[1,63],$VR=[1,64],$VS=[1,65],$VT=[1,66],$VU=[1,67],$VV=[5,18,19,22,52,53,54,55,56,57,58,59,60,61,62,63,64],$VW=[1,79],$VX=[1,77],$VY=[1,78],$VZ=[5,17,18,19,22,52,53,54,55,56,57,58,59,60,61,62,63,64],$V_=[1,82],$V$=[1,83],$V01=[5,17,18,19,22,31,32,33,34,35,36,37,38,39,40,41,42,52,53,54,55,56,57,58,59,60,61,62,63,64],$V11=[2,74],$V21=[1,137],$V31=[1,138],$V41=[5,6,8,17,19,22,25,31,32,33,34,35,36,37,38,39,40,41,42,52,53,54,55,56,57,58,59,60,61,62,63,64],$V51=[2,20],$V61=[1,142],$V71=[5,6,8,17,18,19,22,25,31,32,33,34,35,36,37,38,39,40,41,42],$V81=[2,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INICIO":4,"EOF":5,"diagonal":6,"LDIAGONAL":7,"dobled":8,"id":9,"LID":10,"punto":11,"INICIOP":12,"doblep":13,"EXPRESION":14,"EJES":15,"PREDICADO":16,"barra":17,"corizq":18,"corder":19,"LPREDICADO":20,"parizq":21,"parder":22,"EXPRESIONP":23,"arroba":24,"por":25,"FUNCIONES":26,"cadena":27,"decimal":28,"entero":29,"cadenas":30,"mas":31,"menos":32,"div":33,"mod":34,"or":35,"and":36,"igual":37,"dif":38,"menor":39,"mayor":40,"menori":41,"mayori":42,"FUNCION":43,"rlast":44,"rposition":45,"rnode":46,"rtext":47,"EJE":48,"dospuntos":49,"CONTENIDO":50,"EJESP":51,"rancestros":52,"rancestro":53,"ratributo":54,"rchild":55,"rdescenos":56,"rdescen":57,"rseguidorh":58,"rseguidor":59,"rnombres":60,"rparent":61,"rprecedings":62,"rpreceding":63,"rself":64,"LIDCONTENIDO":65,"LPORCONTENIDO":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"diagonal",8:"dobled",9:"id",11:"punto",13:"doblep",17:"barra",18:"corizq",19:"corder",21:"parizq",22:"parder",24:"arroba",25:"por",27:"cadena",28:"decimal",29:"entero",30:"cadenas",31:"mas",32:"menos",33:"div",34:"mod",35:"or",36:"and",37:"igual",38:"dif",39:"menor",40:"mayor",41:"menori",42:"mayori",44:"rlast",45:"rposition",46:"rnode",47:"rtext",49:"dospuntos",52:"rancestros",53:"rancestro",54:"ratributo",55:"rchild",56:"rdescenos",57:"rdescen",58:"rseguidorh",59:"rseguidor",60:"rnombres",61:"rparent",62:"rprecedings",63:"rpreceding",64:"rself"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[4,2],[4,2],[7,2],[7,2],[7,2],[7,2],[7,2],[10,1],[10,2],[12,2],[12,2],[12,3],[12,0],[16,4],[20,4],[20,0],[14,4],[14,3],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,0],[26,3],[43,1],[43,1],[43,1],[43,1],[15,5],[51,5],[51,0],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[50,2],[50,2],[50,1],[50,1],[50,0],[65,2],[65,1],[65,0],[66,1],[66,1],[66,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$=$$[$0-1]; return this.$; 
break;
case 2: case 14:
 this.$=new NodoAST.default("/"); this.$.AgregarHijo($$[$0]); 
break;
case 3: case 15:
 this.$=new NodoAST.default("//"); this.$.AgregarHijo($$[$0]); 
break;
case 4: case 7: case 23: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 70:
 this.$=new NodoAST.default($$[$0-1]); this.$.AgregarHijo($$[$0]); 
break;
case 5: case 10:
 this.$=new NodoAST.default("."); this.$.AgregarHijo($$[$0]); 
break;
case 6: case 11:
 this.$=new NodoAST.default(".."); this.$.AgregarHijo($$[$0]); 
break;
case 8: case 9: case 13: case 24: case 32:
 this.$=$$[$0-1]; this.$.AgregarHijo($$[$0]); 
break;
case 12: case 50: case 51: case 52: case 53: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 72: case 73: case 76: case 78: case 79:
 this.$=$$[$0]; 
break;
case 16:
 this.$=new NodoAST.default("|"); this.$.AgregarHijo($$[$0-1]); this.$.AgregarHijo($$[$0]); 
break;
case 17: case 20: case 48: case 56: case 74: case 75: case 77: case 80:
  
break;
case 18: case 19: case 21:
 this.$=$$[$0-2]; this.$.AgregarHijo($$[$0]); 
break;
case 22: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47:
 this.$=new NodoAST.default($$[$0-2]); this.$.AgregarHijo($$[$0-1]); this.$.AgregarHijo($$[$0]); 
break;
case 49:
 this.$=new NodoAST.default($$[$0-2]); 
break;
case 54: case 55:
 this.$=new NodoAST.default($$[$0-4]); this.$.AgregarHijo($$[$0-1]); this.$.AgregarHijo($$[$0]); 
break;
case 71:
 this.$=new NodoAST.default($$[$0-1]+$$[$0]); 
break;
}
},
table: [{3:1,4:2,6:$V0,8:$V1,9:$V2,11:$V3,13:$V4},{1:[3]},{5:[1,8]},{4:23,6:$V0,7:9,8:$V1,9:$V5,11:$V6,13:$V7,14:11,15:12,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:24,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv},{4:23,6:$V0,7:43,8:$V1,9:$V5,11:$V6,13:$V7,14:11,15:12,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:24,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv},o($Vw,$Vx,{10:44,12:45,16:46,6:$Vy,8:$Vz,17:$VA,18:$VB}),o($VC,$Vx,{12:51,6:$Vy,8:$Vz,17:$VA}),o($VC,$Vx,{12:52,6:$Vy,8:$Vz,17:$VA}),{1:[2,1]},o($VD,[2,2]),o($VE,$VF,{12:45,16:46,10:53,23:54,6:$VG,8:$VH,17:$VA,18:$VB,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($Vw,$Vx,{12:45,16:46,10:70,6:$Vy,8:$Vz,17:$VA,18:$VB}),o($VC,$Vx,{12:71,6:$Vy,8:$Vz,17:$VA}),o($VV,$Vx,{12:72,23:73,6:$VG,8:$VH,17:$VA,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VV,$Vx,{12:74,23:75,6:$VG,8:$VH,17:$VA,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:76,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:80,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},o($VZ,$VF,{23:81,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:84,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:85,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:86,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:87,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:88,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:89,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),{49:[1,90]},{21:[1,91]},{49:[2,57]},{49:[2,58]},{49:[2,59]},{49:[2,60]},{49:[2,61]},{49:[2,62]},{49:[2,63]},{49:[2,64]},{49:[2,65]},{49:[2,66]},{49:[2,67]},{49:[2,68]},{49:[2,69]},{21:[2,50]},{21:[2,51]},{21:[2,52]},{21:[2,53]},o($VD,[2,3]),o($VD,[2,4]),o($VD,[2,12]),o($VC,$Vx,{12:92,6:$Vy,8:$Vz,17:$VA}),{4:23,6:$V0,7:93,8:$V1,9:$V5,11:$V6,13:$V7,14:11,15:12,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:24,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv},{4:23,6:$V0,7:94,8:$V1,9:$V5,11:$V6,13:$V7,14:11,15:12,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:24,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv},{4:95,6:$V0,8:$V1,9:$V2,11:$V3,13:$V4},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:96,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},o($VD,[2,5]),o($VD,[2,6]),o($VD,[2,7]),o($VD,[2,30]),{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:97,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:98,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:99,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:100,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:101,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:102,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:103,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:104,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:105,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:106,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:107,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:108,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:109,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,7:93,8:$V1,9:$V5,11:$V6,13:$V7,14:110,15:12,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:24,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv},{4:23,6:$V0,7:94,8:$V1,9:$V5,11:$V6,13:$V7,14:111,15:12,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:24,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv},o($VD,[2,8]),o($VD,[2,9]),o($VD,[2,10]),o($VD,[2,28]),o($VD,[2,11]),o($VD,[2,29]),{22:[1,112]},o($VV,$VF,{12:51,23:73,6:$VG,8:$VH,17:$VA,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VV,$VF,{12:52,23:75,6:$VG,8:$VH,17:$VA,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VE,$VF,{10:44,12:45,16:46,23:54,6:$VG,8:$VH,17:$VA,18:$VB,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:113,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VD,[2,23]),{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:114,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:115,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},o($VD,[2,24]),o($VD,[2,25]),o($VD,[2,26]),o($VD,[2,27]),o($VD,[2,31]),o($VD,[2,32]),{49:[1,116]},{22:[1,117]},o($VD,[2,13]),o($VD,[2,14]),o($VD,[2,15]),o($VC,$Vx,{12:118,6:$Vy,8:$Vz,17:$VA}),{19:[1,119]},o($VZ,$VF,{23:120,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:121,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:122,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:123,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:124,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:125,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:126,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:127,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:128,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:129,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:130,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:131,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:132,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VE,$VF,{12:45,16:46,10:70,23:133,6:$VG,8:$VH,17:$VA,18:$VB,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VE,$VF,{12:45,16:46,10:70,23:134,6:$VG,8:$VH,17:$VA,18:$VB,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:135,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VD,[2,22]),o($VZ,$VF,{23:133,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,$VF,{23:134,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($V01,$V11,{4:23,43:25,50:136,26:139,14:140,6:$V0,8:$V1,9:$V21,11:$VX,13:$VY,21:$V8,24:$V9,25:$V31,27:$Vb,28:$Vc,29:$Vd,30:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi}),o($VD,[2,49]),o($VD,[2,16]),o($V41,$V51,{20:141,18:$V61}),o($VD,[2,33]),o($VD,[2,34]),o($VD,[2,35]),o($VD,[2,36]),o($VD,[2,37]),o($VD,[2,38]),o($VD,[2,39]),o($VD,[2,40]),o($VD,[2,41]),o($VD,[2,42]),o($VD,[2,43]),o($VD,[2,44]),o($VD,[2,45]),o($VD,[2,46]),o($VD,[2,47]),o($VD,[2,21]),o($V71,$V81,{51:143,48:144,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv}),o($VE,[2,77],{10:44,12:45,23:54,65:145,16:147,6:$VG,8:$VH,17:$VA,18:$VB,21:[1,146],25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,[2,80],{23:81,66:148,6:[1,149],8:[1,150],25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VZ,[2,72],{23:84,6:$V_,8:$V$,25:$VI,31:$VJ,32:$VK,33:$VL,34:$VM,35:$VN,36:$VO,37:$VP,38:$VQ,39:$VR,40:$VS,41:$VT,42:$VU}),o($VD,[2,73]),o($VD,[2,18]),{4:23,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,14:151,21:$V8,24:$V9,25:$Va,26:18,27:$Vb,28:$Vc,29:$Vd,30:$Ve,43:25,44:$Vf,45:$Vg,46:$Vh,47:$Vi},o($VD,[2,54]),{49:[1,152]},o($VD,[2,70]),{22:[1,153]},o($VC,[2,76],{12:92,6:$Vy,8:$Vz,17:$VA}),o($VD,[2,71]),o($V01,[2,78],{26:18,4:23,43:25,14:114,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,21:$V8,24:$V9,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi}),o($V01,[2,79],{26:18,4:23,43:25,14:115,6:$V0,8:$V1,9:$VW,11:$VX,13:$VY,21:$V8,24:$V9,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi}),{19:[1,154]},{49:[1,155]},o($VD,[2,75]),o($V41,$V51,{20:156,18:$V61}),o($V01,$V11,{4:23,43:25,26:139,14:140,50:157,6:$V0,8:$V1,9:$V21,11:$VX,13:$VY,21:$V8,24:$V9,25:$V31,27:$Vb,28:$Vc,29:$Vd,30:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi}),o($VD,[2,19]),o($V71,$V81,{48:144,51:158,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv}),o($VD,[2,55])],
defaultActions: {8:[2,1],26:[2,57],27:[2,58],28:[2,59],29:[2,60],30:[2,61],31:[2,62],32:[2,63],33:[2,64],34:[2,65],35:[2,66],36:[2,67],37:[2,68],38:[2,69],39:[2,50],40:[2,51],41:[2,52],42:[2,53]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var NodoAST = require("../app/Clases/Models/NodoAST.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 8;
break;
case 1:return 6;
break;
case 2:return 13;
break;
case 3:return 11;
break;
case 4:return 24;
break;
case 5:return 17;
break;
case 6:return 31;
break;
case 7:return 32;
break;
case 8:return 25;
break;
case 9:return 33;
break;
case 10:return 37;
break;
case 11:return 38;
break;
case 12:return 41;
break;
case 13:return 39;
break;
case 14:return 42;
break;
case 15:return 40;
break;
case 16:return 35;
break;
case 17:return 36;
break;
case 18:return 34;
break;
case 19:return 18;
break;
case 20:return 19;
break;
case 21:return 21;
break;
case 22:return 22;
break;
case 23:return 49;
break;
case 24:return 46;
break;
case 25:return 47;
break;
case 26:return 44;
break;
case 27:return 45;
break;
case 28:return 52;
break;
case 29:return 53;
break;
case 30:return 54;
break;
case 31:return 55;
break;
case 32:return 56;
break;
case 33:return 57;
break;
case 34:return 58;
break;
case 35:return 59;
break;
case 36:return 60;
break;
case 37:return 61;
break;
case 38:return 62;
break;
case 39:return 63;
break;
case 40:return 64;
break;
case 41:/*Se ignoran*/
break;
case 42:return 27;
break;
case 43:return 30;
break;
case 44:return 28;
break;
case 45:return 29;
break;
case 46:return 9;
break;
case 47:return 5;
break;
case 48: console.log("Error léxico") 
break;
}
},
rules: [/^(?:\/\/)/,/^(?:\/)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:@)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mon\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:[ \n\r\t]+)/,/^(?:[\']([^\n])*[\'])/,/^(?:[\"]([^\n\"])*[\"])/,/^(?:[-]?[0-9]+[.][0-9]+)/,/^(?:[-]?[0-9]+)/,/^(?:([a-zA-Z]|_)+(_|\.|-|:|Á|É|Í|Ó|Ú|á|é|í|ó|ú|ñ|Ñ|[0-9A-Za-z])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XPathDESC;
exports.Parser = XPathDESC.Parser;
exports.parse = function () { return XPathDESC.parse.apply(XPathDESC, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}