/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,19],$V2=[1,20],$V3=[1,8],$V4=[1,18],$V5=[1,17],$V6=[1,15],$V7=[1,9],$V8=[5,15,36,37,40,41,45,48,74,76,77,85,113],$V9=[5,85],$Va=[5,15,40,41,74,77,85],$Vb=[1,40],$Vc=[1,41],$Vd=[1,31],$Ve=[1,37],$Vf=[1,43],$Vg=[1,44],$Vh=[1,42],$Vi=[1,45],$Vj=[1,36],$Vk=[1,35],$Vl=[1,38],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[1,61],$VB=[1,62],$VC=[1,63],$VD=[5,15,40,41,48,74,76,77,85],$VE=[1,80],$VF=[1,74],$VG=[1,78],$VH=[1,73],$VI=[1,76],$VJ=[1,77],$VK=[1,75],$VL=[1,79],$VM=[5,15,36,37,40,41,45,48,74,76,77,85,113,126,127,128,129,130,131,132,133,134,135,136,137,138],$VN=[5,15,36,37,40,41,43,45,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,76,77,85,113,126,127,128,129,130,131,132,133,134,135,136,137,138],$VO=[1,83],$VP=[1,93],$VQ=[1,94],$VR=[1,103],$VS=[1,84],$VT=[1,85],$VU=[1,86],$VV=[1,87],$VW=[1,88],$VX=[1,89],$VY=[1,90],$VZ=[1,91],$V_=[1,92],$V$=[1,95],$V01=[1,96],$V11=[1,97],$V21=[1,98],$V31=[1,99],$V41=[1,100],$V51=[1,101],$V61=[1,102],$V71=[1,106],$V81=[1,113],$V91=[1,111],$Va1=[1,112],$Vb1=[1,109],$Vc1=[5,15,23,24,36,37,40,41,43,45,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,76,77,85,96,113,126,127,128,129,130,131,132,133,134,135,136,137,138],$Vd1=[1,123],$Ve1=[1,124],$Vf1=[5,15,40,48,74,76,77,85],$Vg1=[1,136],$Vh1=[1,137],$Vi1=[1,127],$Vj1=[1,128],$Vk1=[1,129],$Vl1=[1,130],$Vm1=[1,131],$Vn1=[1,132],$Vo1=[1,133],$Vp1=[1,134],$Vq1=[1,135],$Vr1=[1,138],$Vs1=[1,139],$Vt1=[1,140],$Vu1=[1,141],$Vv1=[1,142],$Vw1=[1,143],$Vx1=[1,144],$Vy1=[1,145],$Vz1=[5,15,23,24,37,39,40,41,43,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,76,77,85],$VA1=[2,77],$VB1=[1,152],$VC1=[1,182],$VD1=[1,210],$VE1=[1,229],$VF1=[1,228],$VG1=[1,231],$VH1=[1,215],$VI1=[1,230],$VJ1=[1,242],$VK1=[1,213],$VL1=[1,238],$VM1=[1,239],$VN1=[1,240],$VO1=[1,241],$VP1=[1,245],$VQ1=[1,248],$VR1=[1,247],$VS1=[1,246],$VT1=[1,234],$VU1=[1,233],$VV1=[1,232],$VW1=[1,217],$VX1=[1,216],$VY1=[1,222],$VZ1=[1,223],$V_1=[1,243],$V$1=[1,219],$V02=[1,237],$V12=[1,218],$V22=[1,220],$V32=[1,221],$V42=[1,224],$V52=[1,225],$V62=[1,226],$V72=[1,227],$V82=[1,235],$V92=[1,236],$Va2=[1,244],$Vb2=[1,249],$Vc2=[1,250],$Vd2=[1,251],$Ve2=[1,252],$Vf2=[1,253],$Vg2=[1,254],$Vh2=[1,255],$Vi2=[1,256],$Vj2=[1,257],$Vk2=[1,258],$Vl2=[5,15,23,24,36,37,40,41,43,48,52,53,57,58,59,61,62,63,64,65,66,67,68,74,76,77,85,96,113,126,127,128,129,130,131,132,133,134,135,136,137,138],$Vm2=[5,15,23,24,36,37,40,41,43,48,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,74,76,77,85,96,113,126,127,128,129,130,131,132,133,134,135,136,137,138],$Vn2=[5,15,23,24,36,37,40,48,57,58,74,76,77,85,96,113,126,127,128,129,130,131,132,133,134,135,136,137,138],$Vo2=[5,15,23,24,36,37,40,48,74,76,77,85,96,113,126,127,128,129,130,131,132,133,134,135,136,137,138],$Vp2=[5,15,23,24,36,37,40,41,43,48,57,58,59,61,62,63,64,65,66,67,68,74,76,77,85,96,113,126,127,128,129,130,131,132,133,134,135,136,137,138],$Vq2=[1,265],$Vr2=[1,279],$Vs2=[1,280],$Vt2=[1,281],$Vu2=[1,282],$Vv2=[1,283],$Vw2=[1,284],$Vx2=[5,15,23,24,37,39,40,41,43,48,52,53,57,58,59,61,62,63,64,65,66,67,68,74,76,77,85],$Vy2=[5,15,23,24,37,39,40,41,43,48,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,74,76,77,85],$Vz2=[5,15,23,24,37,39,40,48,57,58,74,76,77,85],$VA2=[5,15,23,24,37,39,40,41,43,48,57,58,59,61,62,63,64,65,66,67,68,74,76,77,85],$VB2=[1,287],$VC2=[1,293],$VD2=[1,308],$VE2=[1,307],$VF2=[1,310],$VG2=[1,294],$VH2=[1,309],$VI2=[1,321],$VJ2=[1,317],$VK2=[1,318],$VL2=[1,319],$VM2=[1,320],$VN2=[1,324],$VO2=[1,327],$VP2=[1,326],$VQ2=[1,325],$VR2=[1,313],$VS2=[1,312],$VT2=[1,311],$VU2=[1,296],$VV2=[1,295],$VW2=[1,301],$VX2=[1,302],$VY2=[1,322],$VZ2=[1,298],$V_2=[1,316],$V$2=[1,297],$V03=[1,299],$V13=[1,300],$V23=[1,303],$V33=[1,304],$V43=[1,305],$V53=[1,306],$V63=[1,314],$V73=[1,315],$V83=[1,323],$V93=[1,328],$Va3=[1,329],$Vb3=[1,330],$Vc3=[1,331],$Vd3=[1,332],$Ve3=[1,333],$Vf3=[1,334],$Vg3=[1,335],$Vh3=[1,336],$Vi3=[1,337],$Vj3=[21,23,41,42,43,45,47,51,52,53,54,55,56,57,58,59,61,62,70,71,72,73,81,82,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],$Vk3=[2,164],$Vl3=[5,15,36,37,40,41,45,48,74,76,77,85,97,113,126,127,128,129,130,131,132,133,134,135,136,137,138],$Vm3=[5,15,36,37,40,41,48,74,76,77,85,126,127,128,129,130,131,132,133,134,135,136,137,138],$Vn3=[1,346],$Vo3=[23,24,40],$Vp3=[2,37],$Vq3=[1,347],$Vr3=[21,23,41,42,43,47,51,52,53,54,55,56,57,58,59,61,62,70,71,72,73,81,82,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],$Vs3=[23,48],$Vt3=[1,367],$Vu3=[36,37,40],$Vv3=[5,15,23,40,48,74,76,77,85],$Vw3=[5,15,23,40,41,48,74,76,77,85],$Vx3=[1,416],$Vy3=[1,414],$Vz3=[1,412],$VA3=[1,413],$VB3=[1,415],$VC3=[1,417],$VD3=[23,24,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"COMIENZO":4,"EOF":5,"XPATH":6,"XQUERY":7,"SENTENCIAS":8,"DECLARACIONES":9,"FORS":10,"LETS":11,"IFS":12,"ETIQUETAS":13,"RETURN":14,"rfor":15,"variable":16,"rin":17,"CONSULTAR":18,"rat":19,"LOOP":20,"parizq":21,"ORDENAMIENTO":22,"parder":23,"coma":24,"FUNCIONCITAS":25,"rdata":26,"EXP":27,"rupper":28,"CONDICION":29,"rlower":30,"rnumber":31,"rstring":32,"rsubstring":33,"WHERE":34,"ORDER":35,"rwhere":36,"rorder":37,"rby":38,"rto":39,"rreturn":40,"menor":41,"id":42,"mayor":43,"CONTENT":44,"diagonal":45,"ATRIBUTOS":46,"llaveizq":47,"llaveder":48,"TEXTO":49,"LLAMADOS":50,"dospuntos":51,"mas":52,"menos":53,"por":54,"div":55,"mod":56,"or":57,"and":58,"igual":59,"dif":60,"menori":61,"mayori":62,"req":63,"rne":64,"rlt":65,"rle":66,"rgt":67,"rge":68,"resta":69,"rdecimal":70,"rentero":71,"cadena":72,"cadenas":73,"rif":74,"rthen":75,"relse":76,"rlet":77,"ASIGNACIONES":78,"TIPOS":79,"rinteger":80,"inter":81,"decimal":82,"rboolean":83,"rfloat":84,"rdeclare":85,"rfunction":86,"PARAMETROS":87,"ras":88,"rxs":89,"puntocoma":90,"integer":91,"float":92,"double":93,"barra":94,"dolar":95,"corder":96,"corizq":97,"CARACTER":98,"punto":99,"dosp":100,"difer":101,"for":102,"in":103,"where":104,"order":105,"by":106,"return":107,"if":108,"then":109,"else":110,"L_CONTENIDO":111,"CONTENIDO":112,"dobled":113,"PREDICADO":114,"FUNCIONES":115,"EXPRESION":116,"EJES":117,"arroba":118,"FUNCION":119,"rlast":120,"rposition":121,"rnode":122,"rtext":123,"EJE":124,"CONTEJES":125,"rancestros":126,"rancestro":127,"ratributo":128,"rchild":129,"rdescenos":130,"rdescen":131,"rseguidorh":132,"rseguidor":133,"rnombres":134,"rparent":135,"rprecedings":136,"rpreceding":137,"rself":138,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"rfor",16:"variable",17:"rin",19:"rat",21:"parizq",23:"parder",24:"coma",26:"rdata",28:"rupper",30:"rlower",31:"rnumber",32:"rstring",33:"rsubstring",36:"rwhere",37:"rorder",38:"rby",39:"rto",40:"rreturn",41:"menor",42:"id",43:"mayor",45:"diagonal",46:"ATRIBUTOS",47:"llaveizq",48:"llaveder",51:"dospuntos",52:"mas",53:"menos",54:"por",55:"div",56:"mod",57:"or",58:"and",59:"igual",60:"dif",61:"menori",62:"mayori",63:"req",64:"rne",65:"rlt",66:"rle",67:"rgt",68:"rge",69:"resta",70:"rdecimal",71:"rentero",72:"cadena",73:"cadenas",74:"rif",75:"rthen",76:"relse",77:"rlet",80:"rinteger",81:"inter",82:"decimal",83:"rboolean",84:"rfloat",85:"rdeclare",86:"rfunction",88:"ras",89:"rxs",90:"puntocoma",91:"integer",92:"float",93:"double",94:"barra",95:"dolar",96:"corder",97:"corizq",98:"CARACTER",99:"punto",100:"dosp",101:"difer",102:"for",103:"in",104:"where",105:"order",106:"by",107:"return",108:"if",109:"then",110:"else",113:"dobled",118:"arroba",120:"rlast",121:"rposition",122:"rnode",123:"rtext",126:"rancestros",127:"rancestro",128:"ratributo",129:"rchild",130:"rdescenos",131:"rdescen",132:"rseguidorh",133:"rseguidor",134:"rnombres",135:"rparent",136:"rprecedings",137:"rpreceding",138:"rself"},
productions_: [0,[3,2],[4,1],[4,1],[7,2],[7,2],[7,1],[7,1],[8,2],[8,2],[8,2],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[10,5],[10,7],[10,3],[20,7],[20,5],[25,4],[25,4],[25,4],[25,2],[25,2],[25,8],[18,3],[18,2],[18,2],[18,1],[34,2],[35,3],[22,3],[22,3],[22,1],[14,1],[14,2],[14,2],[14,2],[13,8],[13,9],[44,4],[44,2],[44,3],[44,1],[27,1],[27,1],[27,1],[50,6],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,2],[29,3],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3],[29,1],[12,8],[12,6],[11,5],[11,2],[78,1],[78,3],[78,3],[78,1],[78,1],[79,2],[79,2],[79,2],[79,2],[79,2],[79,2],[9,16],[9,15],[9,15],[9,14],[87,7],[87,5],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,2],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[6,2],[6,1],[111,2],[111,2],[112,1],[112,2],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,2],[114,4],[114,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,8],[116,2],[116,2],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[115,3],[119,1],[119,1],[119,1],[119,1],[117,5],[117,4],[125,1],[125,2],[125,2],[125,1],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 3: case 13: case 14: case 15: case 16: case 17: case 147: case 148: case 149: case 150: case 151: case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165: case 166: case 167: case 168: case 169: case 170: case 171: case 172: case 173: case 174: case 175: case 176: case 177: case 178: case 179: case 180: case 181: case 182: case 183: case 184: case 185: case 186: case 187: case 188: case 189: case 190: case 191:
this.$=$$[$0]
break;
case 4:

                                                                       // Listita.Listita.add($$[$0]);
                                                                        $$[$0-1].push($$[$0]);
                                                                      
break;
case 5:

                                                                     //   Listita.Listita.add($$[$0]);
                                                                        $$[$0-1].push($$[$0]);
                                                                      
break;
case 6:

                                                                       // Listita.Listita.add($$[$0]);
                                                                        this.$=[$$[$0]];
                                                                      
break;
case 7:


                                                                        this.$=[$$[$0]];

                                                                      
break;
case 8: case 9: case 10: case 11:

                                                                         this.$=new Sentencia.Sentencia($$[$0],$$[$0-1],"Instrucción");
                                                                      
break;
case 12:

                                                                        this.$=new Sentencia.Sentencia($$[$0],$$[$0-1],"Instrucción");
                                                                      
break;
case 18:

                                                                        this.$=new For.For($$[$0-3],"",$$[$0-1],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                      
break;
case 19:

                                                                        this.$=new For.For($$[$0-5],$$[$0-3],$$[$0-1],$$[$0],_$[$0-6].first_line, _$[$0-6].first_column);
                                                                      
break;
case 20:

                                                                        this.$=new For.For("","",$$[$0-1],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                      
break;
case 21:

                                                                       this.$=new Loop.Loop($$[$0-6],$$[$0-3],_$[$0-6].first_line, _$[$0-6].first_column,$$[$0]);
                                                                      
break;
case 22:

                                                                       this.$=new Loop.Loop($$[$0-4],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column,null);

                                                                      
break;
case 23: case 24: case 25:

                                                                        this.$=new Funcioncita.Funcioncita($$[$0-1],null,null,_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 26: case 27:

                                                                        this.$=new Funcioncita.Funcioncita($$[$0],null,null,_$[$0-1].first_line, _$[$0-1].first_column);
                                                                      
break;
case 28:

                                                                        this.$=new Funcioncita.Funcioncita($$[$0-5],$$[$0-3],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);
                                                                      
break;
case 29:
 this.$=new Padre.default("INSTRUCCIONES","");
                                                                  this.$.AgregarHijo($$[$0-2]);
                                                                  this.$.AgregarHijo($$[$0-1]);
                                                                  this.$.AgregarHijo($$[$0]);
                                                                
break;
case 30: case 31:
 this.$=new Padre.default("INSTRUCCIONES","");
                                                                  this.$.AgregarHijo($$[$0-1]);
                                                                  this.$.AgregarHijo($$[$0]);
                                                                
break;
case 32:
 this.$=$$[$0];
break;
case 33:

                                                                  this.$=new Where.Where($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
                                                                
break;
case 34:

                                                                  this.$=new OrderBy.OrderBy($$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                
break;
case 35:

                                                                    $$[$0-2].push($$[$0]);
                                                                    this.$=$$[$0-2];
                                                                 
break;
case 36:

                                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.TO,$$[$0-2],$$[$0])
                                                                  
break;
case 37:

                                                                    this.$=[$$[$0]]

                                                                
break;
case 38:

                                                                  this.$=new Return.Return("nothing",_$[$0].first_line, _$[$0].first_column);
                                                                
break;
case 39: case 40: case 41:

                                                                  this.$=new Return.Return($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
                                                                
break;
case 42:

                                                                  this.$=new Objeto.default($$[$0-6],$$[$0-1],"",null,$$[$0-4],false,_$[$0-7].first_line, _$[$0-7].first_column);
                                                                
break;
case 43:

                                                                  this.$=new Objeto.default($$[$0-7],$$[$0-1],"",$$[$0-6],$$[$0-4],false,_$[$0-8].first_line, _$[$0-8].first_column);
                                                                
break;
case 44:

                                                     this.$=new Contenido.Contenido("",$$[$0-1],$$[$0-3]);
                                                   
break;
case 45:

                                                     this.$=new Contenido.Contenido($$[$0],null,$$[$0-1]);
                                                   
break;
case 46:

                                                     this.$=new Contenido.Contenido("",$$[$0-1],null);
                                                   
break;
case 47:

                                                     this.$=new Contenido.Contenido($$[$0],null,null);
                                                   
break;
case 48: case 49: case 50:

                                                      this.$=$$[$0]
                                                   
break;
case 51:

                                                              this.$=new Llamado.Llamado($$[$0-5],$$[$0-3],$$[$0-1]);
                                                            
break;
case 52:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.SUMA,$$[$0-2],$$[$0]);
                                                   
break;
case 53:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.RESTA,$$[$0-2],$$[$0]);
                                                   
break;
case 54:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MULTIPLICACION,$$[$0-2],$$[$0]);
                                                   
break;
case 55:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.DIVISION,$$[$0-2],$$[$0]);
                                                   
break;
case 56:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MODAL,$$[$0-2],$$[$0]);
                                                   
break;
case 57:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.OR,$$[$0-2],$$[$0]);
                                                   
break;
case 58:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.AND,$$[$0-2],$$[$0]);
                                                   
break;
case 59:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.IGUAL,$$[$0-2],$$[$0]);
                                                   
break;
case 60:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.DIFERENTE,$$[$0-2],$$[$0]);
                                                   
break;
case 61:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MENOR,$$[$0-2],$$[$0]);
                                                   
break;
case 62:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MAYOR,$$[$0-2],$$[$0]);
                                                   
break;
case 63:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MENORI,$$[$0-2],$$[$0]);
                                                   
break;
case 64:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MAYORI,$$[$0-2],$$[$0]);
                                                   
break;
case 65:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.IGUALU,$$[$0-2],$$[$0]);
                                                   
break;
case 66:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.DIFERENTEU,$$[$0-2],$$[$0]);
                                                   
break;
case 67:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MENORU,$$[$0-2],$$[$0]);
                                                   
break;
case 68:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MENORIU,$$[$0-2],$$[$0]);
                                                   
break;
case 69:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MAYORU,$$[$0-2],$$[$0]);
                                                   
break;
case 70:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MAYORIU,$$[$0-2],$$[$0]);
                                                   
break;
case 71:

                                                    this.$=new Operador.Operador(Tipo.Tipo.DECIMAL,$$[$0-1]+$$[$0],null);
                                                   
break;
case 72:

                                                    this.$=new Operador.Operador(Tipo.Tipo.INTEGER,$$[$0-1]+$$[$0],null);
                                                   
break;
case 73:

                                                    this.$=$$[$0-1];
                                                   
break;
case 74: case 78:
 this.$=new Operador.Operador(Tipo.Tipo.STRING,$$[$0],null); 
break;
case 75:
 this.$=new Operador.Operador(Tipo.Tipo.DECIMAL,$$[$0],null); 
break;
case 76:
 this.$=new Operador.Operador(Tipo.Tipo.INTEGER,$$[$0],null);
break;
case 77:
 this.$=new Operador.Operador(Tipo.Tipo.ID,$$[$0],null); 
break;
case 79:

                                                     this.$=new Operador.Operador(Tipo.Tipo.VARIABLE,$$[$0-2],$$[$0]);
                                                   
break;
case 80:
 this.$=new Operador.Operador(Tipo.Tipo.VARIABLE,$$[$0],null); 
break;
case 81:

                                                                      this.$=new If.If($$[$0-5],$$[$0-2],$$[$0],_$[$0-7].first_line, _$[$0-7].first_column);
                                                                    
break;
case 82:

                                                                      this.$=new If.If($$[$0-3],$$[$0],null,_$[$0-5].first_line, _$[$0-5].first_column);
                                                                    
break;
case 83:

                                                 this.$=new Declaracion.Declaracion($$[$0-3],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column,"Instrucción");
                                                
break;
case 84:

                                                 this.$=new Declaracion.Declaracion($$[$0],null,_$[$0-1].first_line, _$[$0-1].first_column,"Instrucción");
                                                
break;
case 85: case 88: case 89:

                                                  this.$=$$[$0];
                                                
break;
case 86: case 87:

                                                  this.$=$$[$0-1];
                                                
break;
case 90:

                        this.$=Tipo.Tipo.INTEGER;
                      
break;
case 91:

                        this.$=Tipo.Tipo.DECIMAL;
                      
break;
case 92:


                        this.$=Tipo.Tipo.STRING;
                      
break;
case 93:


                        this.$=Tipo.Tipo.BOOLEAN;
                      
break;
case 94:


                        this.$=Tipo.Tipo.DATA;
                      
break;
case 95:


                        this.$=Tipo.Tipo.FLOAT;
                      
break;
case 96:

                                                                                                                                this.$=new Funcion.default($$[$0-13],$$[$0-11],$$[$0-9],$$[$0-4],$$[$0-2],_$[$0-15].first_line, _$[$0-15].first_column,"Instrucción");
                                                                                                                              
break;
case 97:

                                                                                                                                this.$=new Funcion.default($$[$0-12],$$[$0-10],null,$$[$0-4],$$[$0-2],_$[$0-14].first_line, _$[$0-14].first_column,"Instrucción");
                                                                                                                              
break;
case 98:

                                                                                                                                this.$=new Funcion.default($$[$0-12],$$[$0-10],$$[$0-8],$$[$0-3],null,_$[$0-14].first_line, _$[$0-14].first_column,"Instrucción");
                                                                                                                              
break;
case 99:

                                                                                                                                this.$=new Funcion.default($$[$0-11],$$[$0-9],null,$$[$0-3],null,_$[$0-13].first_line, _$[$0-13].first_column,"Instrucción");
                                                                                                                              
break;
case 100:

                                                        this.$=new Parametros.Parametros($$[$0-6],$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column,$$[$0]);
                                                      
break;
case 101:

                                                        this.$=new Parametros.Parametros($$[$0-4],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column,null);
                                                      
break;
case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146:
this.$=$$[$0-1]+" "+$$[$0]
break;
case 192:

                                                                  this.$=new Padre.default("XPATH","");
                                                                  this.$.AgregarHijo($$[$0-1]);
                                                                  this.$.AgregarHijo($$[$0]);
                                                               
break;
case 193:

                                                                  this.$=new Padre.default("XPATH","");
                                                                  this.$.AgregarHijo($$[$0]);
                                                               
break;
case 194: case 195:

                                                                 this.$=new Padre.default("L_CONTENIDO",$$[$0-1]);
                                                                 this.$.AgregarHijo($$[$0]);
                                                               
break;
case 196:

                                                                 this.$=new Padre.default("CONTENIDO","");
                                                                 this.$.AgregarHijo($$[$0]);

                                                               
break;
case 197:
 this.$=new Padre.default("CONTENIDO","");
                                                                 this.$.AgregarHijo($$[$0-1]);
                                                                 this.$.AgregarHijo($$[$0]);
                                                               
break;
case 198: case 199: case 200: case 201: case 202: case 203:
 this.$=new Padre.default("CONTENIDO","");
                                                                 this.$.AgregarHijo($$[$0]);
                                                               
break;
case 204:

                                                                  this.$=new Padre.default("CONTENIDO","");
                                                                  this.$.AgregarHijo($$[$0-1]+$$[$0])
                                                                
break;
case 205:

                                                                this.$=new Padre.default("PREDICADO","");
                                                                this.$.AgregarHijo($$[$0-3]);
                                                                this.$.AgregarHijo($$[$0-1]);
                                                              
break;
case 206:

                                                                this.$=new Padre.default("PREDICADO","");
                                                                this.$.AgregarHijo($$[$0-1]);
                                                              
break;
case 207:
 this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.SUMA,$$[$0-2],$$[$0]));
                                                              
break;
case 208:
 this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.RESTA,$$[$0-2],$$[$0]));
                                                              
break;
case 209:
 this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.MULTIPLICACION,$$[$0-2],$$[$0]));
                                                              
break;
case 210:
 this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.DIVISION,$$[$0-2],$$[$0]));
                                                              
break;
case 211:
 this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.MODAL,$$[$0-2],$$[$0]));
                                                              
break;
case 212:
 this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.OR,$$[$0-2],$$[$0]));
                                                              
break;
case 213:
 this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.AND,$$[$0-2],$$[$0]));
                                                              
break;
case 214:
 this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.IGUAL,$$[$0-2],$$[$0]));
                                                              
break;
case 215:
 this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.DIFERENTE,$$[$0-2],$$[$0]));
                                                              
break;
case 216:
 this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.MENOR,$$[$0-2],$$[$0]));
                                                              
break;
case 217:
 this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.MAYOR,$$[$0-2],$$[$0]));
                                                              
break;
case 218:
 this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.MENORI,$$[$0-2],$$[$0]));
                                                              
break;
case 219:
 this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.MAYORI,$$[$0-2],$$[$0]));
                                                              
break;
case 220:

                                                                this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.IGUALU,$$[$0-2],$$[$0]));
                                                              
break;
case 221:

                                                                this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.DIFERENTEU,$$[$0-2],$$[$0]));
                                                              
break;
case 222:

                                                                this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.MENORU,$$[$0-2],$$[$0]));
                                                              
break;
case 223:

                                                                this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.MENORIU,$$[$0-2],$$[$0]));
                                                              
break;
case 224:

                                                                this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.MAYORU,$$[$0-2],$$[$0]));
                                                              
break;
case 225:

                                                                this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.MAYORIU,$$[$0-2],$$[$0]));
                                                              
break;
case 226:

                                                                this.$=$$[$0-1];
                                                              
break;
case 227:

                                                                this.$=new Padre.default("EXPRESION","");
                                                                this.$.AgregarHijo(new Operacion.Operacion(tipoOperacion.Operador.DIVISION,$$[$0-2],$$[$0]));
                                                              
break;
case 228:

                                                                this.$=new Padre.default("FUNCIONCITAS",$$[$0-7]);
                                                                this.$.AgregarHijo(new Funcioncita.Funcioncita($$[$0-5],$$[$0-3],$$[$0-1]));
                                                              
break;
case 229: case 230:
 this.$=new Padre.default("EXPRESION",$$[$0-1]+$$[$0]); 
break;
case 231: case 232: case 233: case 234: case 235: case 236: case 237: case 238:
 this.$=new Padre.default("EXPRESION",$$[$0]); 
break;
case 239:
 this.$=$$[$0-2] 
break;
case 240: case 241: case 242: case 243:
 this.$=new Padre.default("FUNCION",$$[$0]); 
break;
case 244:

                                            this.$=new Padre.default("EJES",null)
                                            this.$.AgregarHijo($$[$0-4]);
                                            this.$.AgregarHijo($$[$0-3]);
                                            this.$.AgregarHijo($$[$0]);
                                          
break;
case 245:

                                            this.$=new Padre.default("EJE","");
                                            this.$=AgregarHijo($$[$0-3]);
                                            this.$.AgregarHijo($$[$0]);
                                          
break;
case 246:
 this.$=new Padre.default($$[$0],""); 
break;
case 247:
 this.$=new Padre.default($$[$0-1],"");
                              this.$.AgregarHijo($$[$0]);
                            
break;
case 248:

                              this.$ = new Padre.default("CONT_EJES","")
                              this.$.AgregarHijo($$[$0-1]);
                              this.$.AgregarHijo($$[$0]);
                            
break;
case 249:
 this.$=$$[$0] 
break;
case 250: case 251: case 252: case 253: case 254: case 255: case 256: case 257: case 258: case 259: case 260: case 261: case 262:

                      this.$=new Padre.default("EJE",$$[$0]);
                    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:6,9:7,10:10,11:11,12:12,13:14,14:13,15:$V0,40:$V1,41:$V2,45:$V3,74:$V4,77:$V5,85:$V6,111:5,113:$V7},{1:[3]},{5:[1,21]},{5:[2,2],45:$V3,111:22,113:$V7},{5:[2,3],8:23,9:24,10:10,11:11,12:12,13:14,14:13,15:$V0,40:$V1,41:$V2,74:$V4,77:$V5,85:$V6},o($V8,[2,193]),o($V9,[2,6],{10:25,11:26,12:27,13:28,14:29,15:$V0,40:$V1,41:$V2,74:$V4,77:$V5}),o($Va,[2,7]),{21:$Vb,33:$Vc,42:$Vd,54:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$Vj,100:$Vk,112:30,115:32,116:33,117:34,118:$Vl,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp,124:46,126:$Vq,127:$Vr,128:$Vs,129:$Vt,130:$Vu,131:$Vv,132:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC},{21:$Vb,33:$Vc,42:$Vd,54:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$Vj,100:$Vk,112:64,115:32,116:33,117:34,118:$Vl,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp,124:46,126:$Vq,127:$Vr,128:$Vs,129:$Vt,130:$Vu,131:$Vv,132:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC},o($VD,[2,13]),o($VD,[2,14]),o($VD,[2,15]),o($VD,[2,16]),o($VD,[2,17]),{86:[1,65]},{16:[1,66],20:67},{16:[1,68]},{21:[1,69]},o([5,15,40,48,76,77,85],[2,38],{13:70,12:71,29:72,16:$VE,21:$VF,41:$V2,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$V4}),{42:[1,81]},{1:[2,1]},o($V8,[2,192]),o($V9,[2,4],{10:25,11:26,12:27,13:28,14:29,15:$V0,40:$V1,41:$V2,74:$V4,77:$V5}),o($Va,[2,5]),o($VD,[2,8]),o($VD,[2,9]),o($VD,[2,10]),o($VD,[2,11]),o($VD,[2,12]),o($VM,[2,194]),o($VN,[2,196],{114:82,97:$VO}),o($VN,[2,198]),o([5,15,36,37,40,48,74,76,77,85,113,126,127,128,129,130,131,132,133,134,135,136,137,138],[2,199],{41:$VP,43:$VQ,45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31,66:$V41,67:$V51,68:$V61}),o($V8,[2,200],{124:104,126:$Vq,127:$Vr,128:$Vs,129:$Vt,130:$Vu,131:$Vv,132:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC}),o($VN,[2,201]),o($VN,[2,202]),o($VM,[2,203]),{42:$V71,54:[1,105]},{21:[1,107]},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:108,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:[1,114]},o($Vc1,[2,232]),o($Vc1,[2,233]),o($Vc1,[2,234]),o($Vc1,[2,238]),{51:[1,115]},{21:[2,240]},{21:[2,241]},{21:[2,242]},{21:[2,243]},{51:[2,250]},{51:[2,251]},{51:[2,252]},{51:[2,253]},{51:[2,254]},{51:[2,255]},{51:[2,256]},{51:[2,257]},{51:[2,258]},{51:[2,259]},{51:[2,260]},{51:[2,261]},{51:[2,262]},o($VM,[2,195]),{42:[1,116]},{17:[1,117],19:[1,118]},{14:122,18:119,34:120,35:121,36:$Vd1,37:$Ve1,40:$V1},o($VD,[2,84],{51:[1,125]}),{16:$VE,21:$VF,29:126,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},o($VD,[2,39]),o($VD,[2,40]),o($Vf1,[2,41],{41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1}),{70:[1,146],71:[1,147]},{16:$VE,21:$VF,29:148,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},o($Vz1,[2,74]),o($Vz1,[2,75]),o($Vz1,[2,76]),o($Vz1,$VA1),o($Vz1,[2,78]),o($Vz1,[2,80],{45:[1,149]}),{43:[1,150],46:[1,151]},o($VM,[2,197],{97:$VB1}),{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:153,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:154,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:155,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:156,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:157,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:158,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:159,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:160,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:161,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:162,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:163,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:164,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:165,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:166,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:167,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:168,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:169,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:170,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:171,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:172,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:173,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{51:[1,174]},o($VN,[2,204]),o($Vc1,[2,229]),{23:[1,175]},{23:[1,176],41:$VP,43:$VQ,45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31,66:$V41,67:$V51,68:$V61},{42:$V71,54:[1,177]},o($Vc1,[2,231]),o($Vc1,[2,235]),o($Vc1,[2,236]),o($Vc1,[2,237]),{42:[1,178]},{51:[1,179]},{51:[1,180]},{6:181,21:$VC1,45:$V3,111:5,113:$V7},{16:[1,183]},o($VD,[2,20]),{14:185,35:184,37:$Ve1,40:$V1},{14:186,40:$V1},o($VD,[2,32]),{16:$VE,21:$VF,29:187,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{38:[1,188]},{59:[1,189]},{23:[1,190],41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1},{16:$VE,21:$VF,29:191,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:192,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:193,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:194,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:195,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:196,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:197,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:198,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:199,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:200,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:201,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:202,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:203,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:204,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:205,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:206,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:207,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:208,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:209,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},o($Vz1,[2,71]),o($Vz1,[2,72]),{23:$VD1,41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1},{42:[1,211]},{21:$VE1,23:$VF1,41:$VG1,42:$VH1,43:$VI1,44:212,45:$VJ1,47:$VK1,49:214,51:$VL1,52:$VM1,53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,61:$VU1,62:$VV1,70:$VW1,71:$VX1,72:$VY1,73:$VZ1,81:$V_1,82:$V$1,90:$V02,91:$V12,92:$V22,93:$V32,94:$V42,95:$V52,96:$V62,97:$V72,98:$V82,99:$V92,100:$Va2,101:$Vb2,102:$Vc2,103:$Vd2,104:$Ve2,105:$Vf2,106:$Vg2,107:$Vh2,108:$Vi2,109:$Vj2,110:$Vk2},{43:[1,259]},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:260,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{41:$VP,43:$VQ,45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31,66:$V41,67:$V51,68:$V61,96:[1,261]},o($Vl2,[2,207],{45:$VR,54:$VU,55:$VV,56:$VW,60:$V_}),o($Vl2,[2,208],{45:$VR,54:$VU,55:$VV,56:$VW,60:$V_}),o($Vm2,[2,209],{45:$VR,60:$V_}),o($Vm2,[2,210],{45:$VR,60:$V_}),o($Vm2,[2,211],{45:$VR,60:$V_}),o($Vn2,[2,212],{41:$VP,43:$VQ,45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31,66:$V41,67:$V51,68:$V61}),o($Vn2,[2,213],{41:$VP,43:$VQ,45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31,66:$V41,67:$V51,68:$V61}),o([5,15,23,24,36,37,40,48,57,58,59,74,76,77,85,96,113,126,127,128,129,130,131,132,133,134,135,136,137,138],[2,214],{41:$VP,43:$VQ,45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31,66:$V41,67:$V51,68:$V61}),o($Vo2,[2,215],{41:$VP,43:$VQ,45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31,66:$V41,67:$V51,68:$V61}),o($Vp2,[2,216],{45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,60:$V_}),o($Vp2,[2,217],{45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,60:$V_}),o($Vp2,[2,218],{45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,60:$V_}),o($Vp2,[2,219],{45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,60:$V_}),o($Vp2,[2,220],{45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,60:$V_}),o($Vp2,[2,221],{45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,60:$V_}),o($Vp2,[2,222],{45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,60:$V_}),o($Vp2,[2,223],{45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,60:$V_}),o($Vp2,[2,224],{45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,60:$V_}),o($Vp2,[2,225],{45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,60:$V_}),o($Vo2,[2,227],{41:$VP,43:$VQ,45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31,66:$V41,67:$V51,68:$V61}),{51:[1,262]},o($Vc1,[2,239]),o($Vc1,[2,226]),o($Vc1,[2,230]),{24:[1,263]},{42:$Vq2,45:$V3,111:266,113:$V7,125:264},{42:[1,267]},{14:122,18:268,34:120,35:121,36:$Vd1,37:$Ve1,40:$V1,45:$V3,111:22,113:$V7},{16:$VE,21:$VF,22:269,29:270,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{17:[1,271]},{14:272,40:$V1},o($VD,[2,30]),o($VD,[2,31]),o([37,40],[2,33],{41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1}),{16:$VE,21:$VF,22:273,29:270,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{6:275,16:$VE,21:[1,276],25:278,26:$Vr2,28:$Vs2,29:277,30:$Vt2,31:$Vu2,32:$Vv2,33:$Vw2,42:$VG,45:$V3,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,78:274,111:5,113:$V7},{75:[1,285]},o($Vx2,[2,52],{54:$Vk1,55:$Vl1,56:$Vm1,60:$Vq1}),o($Vx2,[2,53],{54:$Vk1,55:$Vl1,56:$Vm1,60:$Vq1}),o($Vy2,[2,54],{60:$Vq1}),o($Vy2,[2,55],{60:$Vq1}),o($Vy2,[2,56],{60:$Vq1}),o($Vz2,[2,57],{41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1}),o($Vz2,[2,58],{41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1}),o([5,15,23,24,37,39,40,48,57,58,59,74,76,77,85],[2,59],{41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1}),o([5,15,23,24,37,39,40,48,74,76,77,85],[2,60],{41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1}),o($VA2,[2,61],{52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,60:$Vq1}),o($VA2,[2,62],{52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,60:$Vq1}),o($VA2,[2,63],{52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,60:$Vq1}),o($VA2,[2,64],{52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,60:$Vq1}),o($VA2,[2,65],{52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,60:$Vq1}),o($VA2,[2,66],{52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,60:$Vq1}),o($VA2,[2,67],{52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,60:$Vq1}),o($VA2,[2,68],{52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,60:$Vq1}),o($VA2,[2,69],{52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,60:$Vq1}),o($VA2,[2,70],{52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,60:$Vq1}),o($Vz1,[2,73]),o($Vz1,[2,79]),{21:$VE1,23:$VF1,41:[1,286],42:$VH1,43:$VI1,45:$VJ1,47:$VB2,49:288,51:$VL1,52:$VM1,53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,61:$VU1,62:$VV1,70:$VW1,71:$VX1,72:$VY1,73:$VZ1,81:$V_1,82:$V$1,90:$V02,91:$V12,92:$V22,93:$V32,94:$V42,95:$V52,96:$V62,97:$V72,98:$V82,99:$V92,100:$Va2,101:$Vb2,102:$Vc2,103:$Vd2,104:$Ve2,105:$Vf2,106:$Vg2,107:$Vh2,108:$Vi2,109:$Vj2,110:$Vk2},{16:$VE,21:$VF,25:291,26:$Vr2,27:289,28:$Vs2,29:290,30:$Vt2,31:$Vu2,32:$Vv2,33:$Vw2,42:$VC2,50:292,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{21:$VD2,23:$VE2,41:$VF2,42:$VG2,43:$VH2,45:$VI2,47:[2,47],51:$VJ2,52:$VK2,53:$VL2,54:$VM2,55:$VN2,56:$VO2,57:$VP2,58:$VQ2,59:$VR2,61:$VS2,62:$VT2,70:$VU2,71:$VV2,72:$VW2,73:$VX2,81:$VY2,82:$VZ2,90:$V_2,91:$V$2,92:$V03,93:$V13,94:$V23,95:$V33,96:$V43,97:$V53,98:$V63,99:$V73,100:$V83,101:$V93,102:$Va3,103:$Vb3,104:$Vc3,105:$Vd3,106:$Ve3,107:$Vf3,108:$Vg3,109:$Vh3,110:$Vi3},o($Vj3,[2,147]),o($Vj3,[2,148]),o($Vj3,[2,149]),o($Vj3,[2,151]),o($Vj3,[2,152]),o($Vj3,[2,153]),o($Vj3,[2,154]),o($Vj3,[2,155]),o($Vj3,[2,156]),o($Vj3,[2,157]),o($Vj3,[2,158]),o($Vj3,[2,159]),o($Vj3,[2,160]),o($Vj3,[2,161]),o($Vj3,[2,162]),o($Vj3,[2,163]),o($Vj3,$Vk3),o($Vj3,[2,165]),o($Vj3,[2,166]),o($Vj3,[2,167]),o($Vj3,[2,168]),o($Vj3,[2,169]),o($Vj3,[2,170]),o($Vj3,[2,171]),o($Vj3,[2,172]),o($Vj3,[2,173]),o($Vj3,[2,174]),o($Vj3,[2,175]),o($Vj3,[2,176]),o($Vj3,[2,177]),o($Vj3,[2,178]),o($Vj3,[2,179]),o($Vj3,[2,180]),o($Vj3,[2,181]),o($Vj3,[2,182]),o($Vj3,[2,183]),o($Vj3,[2,184]),o($Vj3,[2,185]),o($Vj3,[2,186]),o($Vj3,[2,187]),o($Vj3,[2,188]),o($Vj3,[2,189]),o($Vj3,[2,190]),o($Vj3,[2,191]),{21:$VE1,23:$VF1,41:$VG1,42:$VH1,43:$VI1,44:338,45:$VJ1,47:$VK1,49:214,51:$VL1,52:$VM1,53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,61:$VU1,62:$VV1,70:$VW1,71:$VX1,72:$VY1,73:$VZ1,81:$V_1,82:$V$1,90:$V02,91:$V12,92:$V22,93:$V32,94:$V42,95:$V52,96:$V62,97:$V72,98:$V82,99:$V92,100:$Va2,101:$Vb2,102:$Vc2,103:$Vd2,104:$Ve2,105:$Vf2,106:$Vg2,107:$Vh2,108:$Vi2,109:$Vj2,110:$Vk2},{41:$VP,43:$VQ,45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31,66:$V41,67:$V51,68:$V61,96:[1,339]},o($Vl3,[2,206]),{42:$Vq2,45:$V3,111:266,113:$V7,125:340},{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:341,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},o($Vm3,[2,245],{111:342,45:$V3,113:$V7}),o($VM,[2,246],{114:343,97:$VO}),o($VM,[2,249]),{21:[1,344]},o($VD,[2,18]),{23:[1,345],24:$Vn3},o($Vo3,$Vp3,{39:$Vq3,41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1}),{6:348,45:$V3,111:5,113:$V7},o($VD,[2,29]),{24:$Vn3,40:[2,34]},o($VD,[2,83]),o($VD,[2,85],{111:22,45:$V3,113:$V7}),{16:$VE,21:$VF,22:349,25:350,26:$Vr2,28:$Vs2,29:351,30:$Vt2,31:$Vu2,32:$Vv2,33:$Vw2,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},o($Vf1,[2,88],{41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1}),o($VD,[2,89]),{21:[1,352]},{21:[1,353]},{21:[1,354]},{16:$VE,21:$VF,29:355,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:356,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{21:[1,357]},{8:358,10:10,11:11,12:12,13:14,14:13,15:$V0,40:$V1,41:$V2,74:$V4,77:$V5},o($Vr3,$Vk3,{45:[1,359]}),{16:$VE,21:$VF,25:291,26:$Vr2,27:360,28:$Vs2,29:290,30:$Vt2,31:$Vu2,32:$Vv2,33:$Vw2,42:$VC2,50:292,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{21:$VD2,23:$VE2,41:$VF2,42:$VG2,43:$VH2,45:$VI2,47:[2,45],51:$VJ2,52:$VK2,53:$VL2,54:$VM2,55:$VN2,56:$VO2,57:$VP2,58:$VQ2,59:$VR2,61:$VS2,62:$VT2,70:$VU2,71:$VV2,72:$VW2,73:$VX2,81:$VY2,82:$VZ2,90:$V_2,91:$V$2,92:$V03,93:$V13,94:$V23,95:$V33,96:$V43,97:$V53,98:$V63,99:$V73,100:$V83,101:$V93,102:$Va3,103:$Vb3,104:$Vc3,105:$Vd3,106:$Ve3,107:$Vf3,108:$Vg3,109:$Vh3,110:$Vi3},{48:[1,361]},o($Vs3,[2,48],{41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1}),o($Vs3,[2,49]),o($Vs3,[2,50]),o([23,41,43,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],$VA1,{51:[1,362]}),o($Vj3,[2,102]),o($Vj3,[2,103]),o($Vj3,[2,104]),o($Vj3,[2,106]),o($Vj3,[2,107]),o($Vj3,[2,108]),o($Vj3,[2,109]),o($Vj3,[2,110]),o($Vj3,[2,111]),o($Vj3,[2,112]),o($Vj3,[2,113]),o($Vj3,[2,114]),o($Vj3,[2,115]),o($Vj3,[2,116]),o($Vj3,[2,117]),o($Vj3,[2,118]),o($Vj3,[2,119]),o($Vj3,[2,120]),o($Vj3,[2,121]),o($Vj3,[2,122]),o($Vj3,[2,123]),o($Vj3,[2,124]),o($Vj3,[2,125]),o($Vj3,[2,126]),o($Vj3,[2,127]),o($Vj3,[2,128]),o($Vj3,[2,129]),o($Vj3,[2,130]),o($Vj3,[2,131]),o($Vj3,[2,132]),o($Vj3,[2,133]),o($Vj3,[2,134]),o($Vj3,[2,135]),o($Vj3,[2,136]),o($Vj3,[2,137]),o($Vj3,[2,138]),o($Vj3,[2,139]),o($Vj3,[2,140]),o($Vj3,[2,141]),o($Vj3,[2,142]),o($Vj3,[2,143]),o($Vj3,[2,144]),o($Vj3,[2,145]),o($Vj3,[2,146]),{21:$VE1,23:$VF1,41:[1,363],42:$VH1,43:$VI1,45:$VJ1,47:$VB2,49:288,51:$VL1,52:$VM1,53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,61:$VU1,62:$VV1,70:$VW1,71:$VX1,72:$VY1,73:$VZ1,81:$V_1,82:$V$1,90:$V02,91:$V12,92:$V22,93:$V32,94:$V42,95:$V52,96:$V62,97:$V72,98:$V82,99:$V92,100:$Va2,101:$Vb2,102:$Vc2,103:$Vd2,104:$Ve2,105:$Vf2,106:$Vg2,107:$Vh2,108:$Vi2,109:$Vj2,110:$Vk2},o($Vl3,[2,205]),o($Vm3,[2,244],{111:342,45:$V3,113:$V7}),{24:[1,364],41:$VP,43:$VQ,45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31,66:$V41,67:$V51,68:$V61},o($VM,[2,248]),o($VM,[2,247],{97:$VB1}),{16:$Vt3,23:[1,366],87:365},o($Vu3,[2,22],{24:[1,368]}),{16:$VE,21:$VF,22:369,29:270,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:370,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{14:122,18:371,34:120,35:121,36:$Vd1,37:$Ve1,40:$V1,45:$V3,111:22,113:$V7},{23:[1,372],24:$Vn3},{23:[1,373]},{23:$VD1,24:$Vp3,39:$Vq3,41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1},{16:$VE,21:$VF,25:291,26:$Vr2,27:374,28:$Vs2,29:290,30:$Vt2,31:$Vu2,32:$Vv2,33:$Vw2,42:$VC2,50:292,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:375,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:$VE,21:$VF,29:376,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},o($Vv3,[2,26],{41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1}),o($Vv3,[2,27],{41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1}),{16:[1,377]},o([5,48,85],[2,82],{10:25,11:26,12:27,13:28,14:29,15:$V0,40:$V1,41:$V2,74:$V4,76:[1,378],77:$V5}),{42:[1,379]},{48:[1,380]},o($Vj3,[2,46]),{42:[1,381]},o($Vr3,$Vk3,{45:[1,382]}),{21:$Vb,33:$Vc,42:$V81,70:$Vf,71:$Vg,72:$Vh,73:$Vi,99:$V91,100:$Va1,115:110,116:383,118:$Vb1,119:39,120:$Vm,121:$Vn,122:$Vo,123:$Vp},{23:[1,384]},{88:[1,385]},{88:[1,386]},{16:[1,388],20:387},o([23,40],[2,35],{24:$Vn3}),o($Vo3,[2,36],{41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1}),o($VD,[2,19]),o($VD,[2,86]),o($VD,[2,87]),{23:[1,389]},{23:[1,390],41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1},{23:[1,391],41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1},{24:[1,392]},{8:393,10:10,11:11,12:12,13:14,14:13,15:$V0,40:$V1,41:$V2,74:$V4,77:$V5},{43:[1,394]},o($Vj3,[2,44]),{21:[1,395]},{42:[1,396]},{23:[1,397],41:$VP,43:$VQ,45:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31,66:$V41,67:$V51,68:$V61},{88:[1,398]},{89:[1,399]},{89:[1,400]},o($Vu3,[2,21]),{17:[1,401]},o($Vw3,[2,23]),o($Vw3,[2,24]),o($Vw3,[2,25]),{16:$VE,21:$VF,29:402,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},o([5,48,76,85],[2,81],{10:25,11:26,12:27,13:28,14:29,15:$V0,40:$V1,41:$V2,74:$V4,77:$V5}),o($VD,[2,42]),{16:$VE,21:$VF,22:403,29:270,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{43:[1,404]},o($Vc1,[2,228]),{89:[1,405]},{51:[1,406]},{51:[1,407]},{21:$VC1},{24:[1,408],41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1},{23:[1,409],24:$Vn3},o($VD,[2,43]),{51:[1,410]},{26:$Vx3,32:$Vy3,79:411,80:$Vz3,82:$VA3,83:$VB3,84:$VC3},{26:$Vx3,32:$Vy3,79:418,80:$Vz3,82:$VA3,83:$VB3,84:$VC3},{16:$VE,21:$VF,29:419,42:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},o($Vs3,[2,51]),{26:$Vx3,32:$Vy3,79:420,80:$Vz3,82:$VA3,83:$VB3,84:$VC3},{47:[1,421]},{81:[1,422]},{81:[1,423]},{81:[1,424]},{81:[1,425]},{81:[1,426]},{81:[1,427]},{23:[2,101],24:[1,428]},{23:[1,429],41:$Vg1,43:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1,55:$Vl1,56:$Vm1,57:$Vn1,58:$Vo1,59:$Vp1,60:$Vq1,61:$Vr1,62:$Vs1,63:$Vt1,64:$Vu1,65:$Vv1,66:$Vw1,67:$Vx1,68:$Vy1},{23:[1,431],47:[1,430]},{8:432,10:10,11:11,12:12,13:14,14:13,15:$V0,23:[1,433],40:$V1,41:$V2,74:$V4,77:$V5},o($VD3,[2,90]),o($VD3,[2,91]),o($VD3,[2,92]),o($VD3,[2,93]),o($VD3,[2,94]),o($VD3,[2,95]),{16:$Vt3,87:434},o($Vw3,[2,28]),{8:435,10:10,11:11,12:12,13:14,14:13,15:$V0,40:$V1,41:$V2,74:$V4,77:$V5},{48:[1,436]},{10:25,11:26,12:27,13:28,14:29,15:$V0,40:$V1,41:$V2,48:[1,437],74:$V4,77:$V5},{90:[1,438]},{23:[2,100]},{10:25,11:26,12:27,13:28,14:29,15:$V0,40:$V1,41:$V2,48:[1,439],74:$V4,77:$V5},{90:[1,440]},{90:[1,441]},o($Va,[2,99]),{90:[1,442]},o($Va,[2,98]),o($Va,[2,97]),o($Va,[2,96])],
defaultActions: {21:[2,1],47:[2,240],48:[2,241],49:[2,242],50:[2,243],51:[2,250],52:[2,251],53:[2,252],54:[2,253],55:[2,254],56:[2,255],57:[2,256],58:[2,257],59:[2,258],60:[2,259],61:[2,260],62:[2,261],63:[2,262],434:[2,100]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const Padre=require("../app/Clases/Models/Nodo.js");
  const Tipo=require("../app/Clases/Hijos/Tipo.js");
  const Funcion=require("../app/Clases/Hijos/Funciones.js");
  const Parametros=require("../app/Clases/Hijos/Parametros.js");
  const Declaracion=require("../app/Clases/Hijos/Declaracion.js");
  const Operacion=require("../app/Clases/Hijos/Operaciones.js");
  const tipoOperacion=require("../app/Clases/Hijos/TipoOperacion.js");
  const Objeto=require("../app/Clases/Models/Objeto.js");
  const Atributo=require("../app/Clases/Models/Atributo.js");
  const Return=require("../app/Clases/Hijos/Return.js");
  const OrderBy=require("../app/Clases/Hijos/OrderBy.js");
  const Where=require("../app/Clases/Hijos/Where.js");
  const Funcioncita=require("../app/Clases/Hijos/Funcioncitas.js");
  const Loop=require("../app/Clases/Hijos/Loop.js");
  const For=require("../app/Clases/Hijos/For.js");
  const If=require("../app/Clases/Hijos/If.js");
  const Llamado=require("../app/Clases/Hijos/Llamados.js");
  const Contenido=require("../app/Clases/Hijos/Contenido.js");
  const Listado=require("../app/Clases/Hijos/Listado.js");
  const Listita=require("../app/Clases/Hijos/Listita.js");
  const Sentencia=require("../app/Clases/Hijos/Sentencias.js");
  const Operador=require("../app/Clases/Hijos/Operador.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 113;
break;
case 1:return 45;
break;
case 2:return 100
break;
case 3:return 21;
break;
case 4:return 23;
break;
case 5:return 97;
break;
case 6:return 96;
break;
case 7:return 47;
break;
case 8:return 48;
break;
case 9:return 59;
break;
case 10:return 101;
break;
case 11:return 61;
break;
case 12:return 41;
break;
case 13:return 62;
break;
case 14:return 43;
break;
case 15:return 51;
break;
case 16:return 99;
break;
case 17:return 24;
break;
case 18:return 90;
break;
case 19:return 94;
break;
case 20:return 52;
break;
case 21:return 53;
break;
case 22:return 54;
break;
case 23:return 81;
break;
case 24:return 55;
break;
case 25:return 57;
break;
case 26:return 58;
break;
case 27:return 56;
break;
case 28:return 15;
break;
case 29:return 17;
break;
case 30:return 36;
break;
case 31:return 37;
break;
case 32:return 38;
break;
case 33:return 40;
break;
case 34:return 74;
break;
case 35:return 75;
break;
case 36:return 76;
break;
case 37:return 26;
break;
case 38:return 28;
break;
case 39:return 30;
break;
case 40:return 33;
break;
case 41:return 39;
break;
case 42:return 85;
break;
case 43:return 86;
break;
case 44:return 63; //=
break;
case 45:return 64; //!=
break;
case 46:return 65; //<
break;
case 47:return 66; //<=
break;
case 48:return 67; //>
break;
case 49:return 68; //>=
break;
case 50:return 19;
break;
case 51:return 77;
break;
case 52:return 88;
break;
case 53:return 89;
break;
case 54:return 80;
break;
case 55:return 82;
break;
case 56:return 84;
break;
case 57:return 'rdouble';
break;
case 58:return 32;
break;
case 59:return 83;
break;
case 60:return 'rdate';
break;
case 61:return 31;
break;
case 62:return 'rdiv';
break;
case 63:return 122;
break;
case 64:return 123;
break;
case 65:return 120;
break;
case 66:return 121;
break;
case 67:return 126;
break;
case 68:return 127;
break;
case 69:return 128;
break;
case 70:return 129;
break;
case 71:return 130;
break;
case 72:return 131;
break;
case 73:return 132;
break;
case 74:return 133;
break;
case 75:return 134;
break;
case 76:return 135;
break;
case 77:return 136;
break;
case 78:return 137;
break;
case 79:return 138;
break;
case 80:/*Se ignoran*/
break;
case 81:/*Comentarios se ignoran*/
break;
case 82:return 72;
break;
case 83:return 73;
break;
case 84:return 70;
break;
case 85:return 71;
break;
case 86:return 16;
break;
case 87:return 42;
break;
case 88:return 118;
break;
case 89:return 98;
break;
case 90:return 5;
break;
}
},
rules: [/^(?:\/\/)/,/^(?:\/)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\?)/,/^(?:div\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:data\b)/,/^(?:upper-case\b)/,/^(?:lower-case\b)/,/^(?:substring\b)/,/^(?:to\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:at\b)/,/^(?:let\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:integer\b)/,/^(?:decimal\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:date\b)/,/^(?:number\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:[ \n\r\t]+)/,/^(?:["(:"][^][":)"])/,/^(?:[\']([^\n\'])*[\'])/,/^(?:[\"]([^\n\"])*[\"])/,/^(?:[-]?[0-9]+[.][0-9]+)/,/^(?:[-]?[0-9]+)/,/^(?:\$([a-zA-Z]|_|ñ|Ñ)+(_|ñ|Ñ|[0-9A-Za-z])*)/,/^(?:(@)?([a-zA-Z]|_)+(_|\.|-|Á|É|Í|Ó|Ú|á|é|í|ó|ú|ñ|Ñ|[0-9A-Za-z])*)/,/^(?:@)/,/^(?:[^<>&]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xquery;
exports.Parser = xquery.Parser;
exports.parse = function () { return xquery.parse.apply(xquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}