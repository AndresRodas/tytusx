/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,19],$V2=[1,20],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,28],$V8=[1,18],$V9=[1,16],$Va=[1,27],$Vb=[1,26],$Vc=[1,15],$Vd=[1,17],$Ve=[1,30],$Vf=[5,16,24,25,26,28,30,31,32,33,36,37,40,41,68,71,72,80,86,88],$Vg=[5,80],$Vh=[5,16,26,28,30,31,32,33,40,41,68,72,80],$Vi=[5,16,24,25,26,28,30,31,32,33,36,37,40,41,67,68,71,72,80,86,88,92],$Vj=[2,14],$Vk=[2,15],$Vl=[5,16,26,28,30,31,32,33,40,41,68,71,72,80,86],$Vm=[1,51],$Vn=[1,42],$Vo=[1,48],$Vp=[1,54],$Vq=[1,55],$Vr=[1,52],$Vs=[1,53],$Vt=[1,46],$Vu=[1,47],$Vv=[1,49],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[1,61],$VB=[1,62],$VC=[1,63],$VD=[1,64],$VE=[1,65],$VF=[1,66],$VG=[1,67],$VH=[1,68],$VI=[1,69],$VJ=[1,70],$VK=[1,71],$VL=[1,72],$VM=[1,73],$VN=[1,75],$VO=[1,87],$VP=[1,81],$VQ=[1,85],$VR=[1,80],$VS=[1,83],$VT=[1,84],$VU=[1,82],$VV=[1,86],$VW=[5,16,24,25,26,28,30,31,32,33,36,37,40,41,67,68,71,72,80,86,88,92,109,110,111,112,113,114,115,116,117,118,119,120,121],$VX=[5,16,24,25,26,28,30,31,32,33,36,37,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,67,68,71,72,80,86,88,92,109,110,111,112,113,114,115,116,117,118,119,120,121],$VY=[1,103],$VZ=[1,104],$V_=[1,105],$V$=[1,106],$V01=[1,107],$V11=[1,108],$V21=[1,109],$V31=[1,110],$V41=[1,111],$V51=[1,112],$V61=[1,113],$V71=[1,114],$V81=[1,115],$V91=[1,116],$Va1=[1,117],$Vb1=[1,120],$Vc1=[1,127],$Vd1=[1,126],$Ve1=[1,125],$Vf1=[1,123],$Vg1=[5,16,24,25,26,28,30,31,32,33,36,37,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,67,68,71,72,80,86,88,92,101,109,110,111,112,113,114,115,116,117,118,119,120,121],$Vh1=[5,16,24,26,28,30,31,32,33,40,41,68,71,72,80,86],$Vi1=[1,133],$Vj1=[1,134],$Vk1=[1,135],$Vl1=[1,136],$Vm1=[1,137],$Vn1=[1,138],$Vo1=[1,139],$Vp1=[1,140],$Vq1=[1,141],$Vr1=[1,142],$Vs1=[1,143],$Vt1=[1,144],$Vu1=[1,145],$Vv1=[1,146],$Vw1=[1,147],$Vx1=[1,148],$Vy1=[1,149],$Vz1=[1,150],$VA1=[1,151],$VB1=[5,16,24,25,26,28,30,31,32,33,36,37,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,68,71,72,80,86],$VC1=[1,163],$VD1=[1,164],$VE1=[1,211],$VF1=[1,215],$VG1=[5,16,24,25,26,28,30,31,32,33,36,37,40,41,43,44,48,49,50,51,52,53,54,55,67,68,71,72,80,86,92,101,109,110,111,112,113,114,115,116,117,118,119,120,121],$VH1=[5,16,24,25,26,28,30,31,32,33,36,37,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,67,68,71,72,80,86,92,101,109,110,111,112,113,114,115,116,117,118,119,120,121],$VI1=[5,16,24,25,26,28,30,31,32,33,36,37,40,41,48,49,67,68,71,72,80,86,92,101,109,110,111,112,113,114,115,116,117,118,119,120,121],$VJ1=[5,16,24,25,26,28,30,31,32,33,36,37,40,41,48,49,50,51,67,68,71,72,80,86,92,101,109,110,111,112,113,114,115,116,117,118,119,120,121],$VK1=[5,16,24,25,26,28,30,31,32,33,36,37,40,41,48,49,50,51,52,53,54,55,67,68,71,72,80,86,92,101,109,110,111,112,113,114,115,116,117,118,119,120,121],$VL1=[1,228],$VM1=[5,16,24,25,26,28,30,31,32,33,36,37,39,40,41,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,68,71,72,80,86],$VN1=[5,16,24,25,26,28,30,31,32,33,36,37,39,40,41,48,49,68,71,72,80,86],$VO1=[5,16,24,25,26,28,30,31,32,33,36,37,39,40,41,48,49,50,51,68,71,72,80,86],$VP1=[5,16,24,25,26,28,30,31,32,33,36,37,39,40,41,48,49,50,51,52,53,54,55,56,57,58,59,60,61,68,71,72,80,86],$VQ1=[5,16,24,25,26,28,30,31,32,33,36,37,40,41,68,71,72,80,86,88,109,110,111,112,113,114,115,116,117,118,119,120,121],$VR1=[1,251],$VS1=[24,25,36,40],$VT1=[2,44],$VU1=[1,252],$VV1=[1,267],$VW1=[36,37,40],$VX1=[1,298],$VY1=[1,296],$VZ1=[1,294],$V_1=[1,295],$V$1=[1,297],$V02=[1,299],$V12=[24,25,85];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"COMIENZO":4,"EOF":5,"XPATH":6,"XQUERY":7,"SENTENCIAS":8,"DECLARACIONES":9,"FORS":10,"LETS":11,"IFS":12,"RETURN":13,"FUNCIONCITAS":14,"LLAMADOS":15,"rfor":16,"variable":17,"rin":18,"CONSULTAR":19,"rat":20,"LOOP":21,"parizq":22,"ORDENAMIENTO":23,"parder":24,"coma":25,"rdata":26,"EXP":27,"rupper":28,"CONDICION":29,"rlower":30,"rnumber":31,"rstring":32,"rsubstring":33,"WHERE":34,"ORDER":35,"rwhere":36,"rorder":37,"rby":38,"rto":39,"rreturn":40,"id":41,"dospuntos":42,"mas":43,"menos":44,"por":45,"div":46,"mod":47,"or":48,"and":49,"igual":50,"difer":51,"menor":52,"mayor":53,"menori":54,"mayori":55,"req":56,"rne":57,"rlt":58,"rle":59,"rgt":60,"rge":61,"resta":62,"rdecimal":63,"rentero":64,"cadena":65,"cadenas":66,"diagonal":67,"rif":68,"rthen":69,"CONT":70,"relse":71,"rlet":72,"ASIGNACIONES":73,"TIPOS":74,"rinteger":75,"inter":76,"decimal":77,"rboolean":78,"rfloat":79,"rdeclare":80,"rfunction":81,"PARAMETROS":82,"ras":83,"rxs":84,"llaveizq":85,"llaveder":86,"puntocoma":87,"barra":88,"INICIO":89,"L_CONTENIDO":90,"CONTENIDO":91,"dobled":92,"PREDICADO":93,"FUNCIONES":94,"EXPRESION":95,"EJES":96,"dosp":97,"punto":98,"arroba":99,"corizq":100,"corder":101,"FUNCION":102,"rlast":103,"rposition":104,"rnode":105,"rtext":106,"EJE":107,"CONTEJES":108,"rancestros":109,"rancestro":110,"ratributo":111,"rchild":112,"rdescenos":113,"rdescen":114,"rseguidorh":115,"rseguidor":116,"rnombres":117,"rparent":118,"rprecedings":119,"rpreceding":120,"rself":121,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"rfor",17:"variable",18:"rin",20:"rat",22:"parizq",24:"parder",25:"coma",26:"rdata",28:"rupper",30:"rlower",31:"rnumber",32:"rstring",33:"rsubstring",36:"rwhere",37:"rorder",38:"rby",39:"rto",40:"rreturn",41:"id",42:"dospuntos",43:"mas",44:"menos",45:"por",46:"div",47:"mod",48:"or",49:"and",50:"igual",51:"difer",52:"menor",53:"mayor",54:"menori",55:"mayori",56:"req",57:"rne",58:"rlt",59:"rle",60:"rgt",61:"rge",62:"resta",63:"rdecimal",64:"rentero",65:"cadena",66:"cadenas",67:"diagonal",68:"rif",69:"rthen",71:"relse",72:"rlet",75:"rinteger",76:"inter",77:"decimal",78:"rboolean",79:"rfloat",80:"rdeclare",81:"rfunction",83:"ras",84:"rxs",85:"llaveizq",86:"llaveder",87:"puntocoma",88:"barra",92:"dobled",97:"dosp",98:"punto",99:"arroba",100:"corizq",101:"corder",103:"rlast",104:"rposition",105:"rnode",106:"rtext",109:"rancestros",110:"rancestro",111:"ratributo",112:"rchild",113:"rdescenos",114:"rdescen",115:"rseguidorh",116:"rseguidor",117:"rnombres",118:"rparent",119:"rprecedings",120:"rpreceding",121:"rself"},
productions_: [0,[3,2],[4,1],[4,1],[7,2],[7,2],[7,1],[7,1],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[10,6],[10,8],[10,4],[10,5],[10,7],[10,3],[21,7],[21,5],[14,4],[14,4],[14,4],[14,2],[14,2],[14,8],[19,2],[19,2],[19,1],[19,1],[34,2],[35,3],[23,3],[23,3],[23,1],[23,1],[23,1],[13,1],[13,2],[13,2],[27,1],[27,1],[27,1],[15,6],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,2],[29,3],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3],[29,1],[29,1],[12,8],[12,6],[11,5],[11,2],[73,1],[73,3],[73,3],[73,1],[73,1],[74,2],[74,2],[74,2],[74,2],[74,2],[74,2],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[70,1],[70,1],[9,16],[9,15],[9,15],[9,14],[82,7],[82,5],[6,3],[6,1],[89,2],[89,1],[90,2],[90,2],[91,1],[91,2],[91,1],[91,1],[91,1],[91,1],[91,1],[91,1],[91,2],[93,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,2],[95,2],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[94,3],[102,1],[102,1],[102,1],[102,1],[96,5],[96,4],[108,1],[108,2],[108,2],[108,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 3: case 14: case 15: case 16: case 17: case 18: case 19: case 103: case 104: case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 160: case 163: case 164: case 165: case 166: case 167: case 168: case 169: case 170: case 171: case 172: case 173: case 174: case 175: case 176:
this.$=$$[$0]
break;
case 4:

                                                                       // Listita.Listita.add($$[$0]);
                                                                        $$[$0-1].push($$[$0]);
                                                                      
break;
case 5:

                                                                     //   Listita.Listita.add($$[$0]);
                                                                        $$[$0-1].push($$[$0]);
                                                                      
break;
case 6:

                                                                       // Listita.Listita.add($$[$0]);
                                                                        this.$=[$$[$0]];
                                                                      
break;
case 7:


                                                                        this.$=[$$[$0]];

                                                                      
break;
case 8: case 9: case 10:

                                                                         this.$=new Sentencia.Sentencia($$[$0],$$[$0-1],"Instrucción");
                                                                      
break;
case 11: case 12: case 13:

                                                                        this.$=new Sentencia.Sentencia($$[$0],$$[$0-1],"Instrucción");
                                                                      
break;
case 20:

                                                                        this.$=new For.For($$[$0-4],"",$$[$0-2],$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column,$$[$0],"Instrucción");
                                                                      
break;
case 21:

                                                                        this.$=new For.For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column,$$[$0],"Instrucción");
                                                                      
break;
case 22:

                                                                        this.$=new For.For("","",$$[$0-2],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column,$$[$0],"Instrucción");
                                                                      
break;
case 23:

                                                                        this.$=new For.For($$[$0-3],"",$$[$0-1],null,_$[$0-4].first_line, _$[$0-4].first_column,$$[$0],"Instrucción");
                                                                      
break;
case 24:

                                                                        this.$=new For.For($$[$0-5],$$[$0-3],$$[$0-1],null,_$[$0-6].first_line, _$[$0-6].first_column,$$[$0],"Instrucción");
                                                                      
break;
case 25:

                                                                        this.$=new For.For("","",$$[$0-1],null,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0],"Instrucción");

                                                                      
break;
case 26:

                                                                       this.$=new Loop.Loop($$[$0-6],$$[$0-3],_$[$0-6].first_line, _$[$0-6].first_column,$$[$0],"Instrucción");
                                                                      
break;
case 27:

                                                                       this.$=new Loop.Loop($$[$0-4],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column,null,"Instrucción");
                                                                      
break;
case 28: case 29: case 30:

                                                                        this.$=new Funcioncita.Funcioncita($$[$0-1],null,null,_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 31: case 32:

                                                                        this.$=new Funcioncita.Funcioncita($$[$0],null,null,_$[$0-1].first_line, _$[$0-1].first_column);
                                                                      
break;
case 33:

                               this.$=new Sentencia.Sentencia($$[$0-6],$$[$0-7],"Instrucción");                                         this.$=new Funcioncita.Funcioncita($$[$0-5],$$[$0-3],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);
                                                                      
break;
case 34: case 35:

                                                                  this.$=new Sentencia.Sentencia($$[$0-1],$$[$0],"Instrucción");
                                                                
break;
case 36: case 37:

                                                                   this.$=$$[$0];
                                                                
break;
case 38:

                                                                  this.$=new Where.Where($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
                                                                
break;
case 39:

                                                                  this.$=new OrderBy.OrderBy($$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                
break;
case 40:

                                                                    $$[$0-2].push($$[$0]);
                                                                    this.$=$$[$0-2];
                                                                  
break;
case 41:

                                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.TO,$$[$0-2],$$[$0])
                                                                  
break;
case 42: case 43:
this.$=[$$[$0]]
break;
case 44:

                                                                    this.$=[$$[$0]]
                                                                  
break;
case 45:

                                                                  this.$=new Return.Return("nothing",_$[$0].first_line, _$[$0].first_column,"Instrucción");
                                                                
break;
case 46: case 47:

                                                                  this.$=new Return.Return($$[$0],_$[$0-1].first_line, _$[$0-1].first_column,"Instrucción");
                                                                
break;
case 48: case 49: case 50:

                                                      this.$=$$[$0]
                                                   
break;
case 51:

                                                              this.$=new Llamado.Llamado($$[$0-5],$$[$0-3],$$[$0-1],"Instrucción");
                                                            
break;
case 52:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.SUMA,$$[$0-2],$$[$0]);
                                                   
break;
case 53:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.RESTA,$$[$0-2],$$[$0]);
                                                   
break;
case 54:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MULTIPLICACION,$$[$0-2],$$[$0]);
                                                   
break;
case 55:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.DIVISION,$$[$0-2],$$[$0]);
                                                   
break;
case 56:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MODAL,$$[$0-2],$$[$0]);
                                                   
break;
case 57:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.OR,$$[$0-2],$$[$0]);
                                                   
break;
case 58:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.AND,$$[$0-2],$$[$0]);
                                                   
break;
case 59:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.IGUAL,$$[$0-2],$$[$0]);
                                                   
break;
case 60:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.DIFERENTE,$$[$0-2],$$[$0]);
                                                   
break;
case 61:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MENOR,$$[$0-2],$$[$0]);
                                                   
break;
case 62:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MAYOR,$$[$0-2],$$[$0]);
                                                   
break;
case 63:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MENORI,$$[$0-2],$$[$0]);
                                                   
break;
case 64:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MAYORI,$$[$0-2],$$[$0]);
                                                   
break;
case 65:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.IGUALU,$$[$0-2],$$[$0]);
                                                   
break;
case 66:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.DIFERENTEU,$$[$0-2],$$[$0]);
                                                   
break;
case 67:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MENORU,$$[$0-2],$$[$0]);
                                                   
break;
case 68:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MENORIU,$$[$0-2],$$[$0]);
                                                   
break;
case 69:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MAYORU,$$[$0-2],$$[$0]);
                                                   
break;
case 70:

                                                    this.$=new Operacion.Operacion(tipoOperacion.Operador.MAYORIU,$$[$0-2],$$[$0]);
                                                   
break;
case 71:

                                                    this.$=new Operador.Operador(Tipo.Tipo.DECIMAL,$$[$0-1]+$$[$0],null);
                                                   
break;
case 72:

                                                    this.$=new Operador.Operador(Tipo.Tipo.INTEGER,$$[$0-1]+$$[$0],null);
                                                   
break;
case 73:

                                                    this.$=$$[$0-1];
                                                   
break;
case 74: case 78:
 this.$=new Operador.Operador(Tipo.Tipo.STRING,$$[$0],null); 
break;
case 75:
 this.$=new Operador.Operador(Tipo.Tipo.DECIMAL,$$[$0],null); 
break;
case 76:
 this.$=new Operador.Operador(Tipo.Tipo.INTEGER,$$[$0],null);
break;
case 77:
 this.$=new Operador.Operador(Tipo.Tipo.ID,$$[$0],null); 
break;
case 79:

                                                     this.$=new Operador.Operador(Tipo.Tipo.VARIABLE,$$[$0-2],$$[$0]);
                                                   
break;
case 80:
 this.$=new Operador.Operador(Tipo.Tipo.VARIABLE,$$[$0],null); 
break;
case 81:
 this.$=new Operador.Operador(Tipo.Tipo.LLAMADA,$$[$0],null); 
break;
case 82:

                                                                      this.$=new If.If($$[$0-5],$$[$0-2],$$[$0],_$[$0-7].first_line, _$[$0-7].first_column);
                                                                    
break;
case 83:

                                                                      this.$=new If.If($$[$0-3],$$[$0],null,_$[$0-5].first_line, _$[$0-5].first_column);
                                                                    
break;
case 84:

                                                 this.$=new Declaracion.Declaracion($$[$0-3],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column,"Instrucción");
                                                
break;
case 85:

                                                 this.$=new Declaracion.Declaracion($$[$0],null,_$[$0-1].first_line, _$[$0-1].first_column,"Instrucción");
                                                
break;
case 86: case 89: case 90:

                                                  this.$=$$[$0];
                                                
break;
case 87: case 88:

                                                  this.$=$$[$0-1];
                                                
break;
case 91: case 97:

                        this.$=Tipo.Tipo.INTEGER;
                      
break;
case 92: case 98:

                        this.$=Tipo.Tipo.DECIMAL;
                      
break;
case 93:


                        this.$=Tipo.Tipo.STRING;
                      
break;
case 94:


                        this.$=Tipo.Tipo.BOOLEAN;
                      
break;
case 95:


                        this.$=Tipo.Tipo.DATA;
                      
break;
case 96:


                        this.$=Tipo.Tipo.FLOAT;
                      
break;
case 99:

                        this.$=Tipo.Tipo.STRING;
                      
break;
case 100:

                        this.$=Tipo.Tipo.BOOLEAN;
                      
break;
case 101:

                        this.$=Tipo.Tipo.DATA;
                      
break;
case 102:

                        this.$=Tipo.Tipo.FLOAT;
                      
break;
case 105:

                                                                                                                                this.$=new Funcion.default($$[$0-13],$$[$0-11],$$[$0-9],$$[$0-4],$$[$0-2],_$[$0-15].first_line, _$[$0-15].first_column,"Instrucción");
                                                                                                                              
break;
case 106:

                                                                                                                                this.$=new Funcion.default($$[$0-12],$$[$0-10],null,$$[$0-4],$$[$0-2],_$[$0-14].first_line, _$[$0-14].first_column,"Instrucción");
                                                                                                                              
break;
case 107:

                                                                                                                                this.$=new Funcion.default($$[$0-12],$$[$0-10],$$[$0-8],$$[$0-3],null,_$[$0-14].first_line, _$[$0-14].first_column,"Instrucción");
                                                                                                                              
break;
case 108:

                                                                                                                                this.$=new Funcion.default($$[$0-11],$$[$0-9],null,$$[$0-3],null,_$[$0-13].first_line, _$[$0-13].first_column,"Instrucción");
                                                                                                                              
break;
case 109:

                                                        this.$=new Parametros.Parametros($$[$0-6],$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column,$$[$0]);
                                                      
break;
case 110:

                                                        this.$=new Parametros.Parametros($$[$0-4],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column,null);
                                                      
break;
case 111:
 this.$=new xpath.XPath($$[$0-2]+$$[$0-1]+$$[$0]) 
break;
case 112:
this.$=new xpath.XPath($$[$0]) 
break;
case 113:
 this.$=$$[$0-1]+$$[$0]
break;
case 114: case 117: case 122: case 123: case 124:
 this.$=$$[$0] 
break;
case 115: case 116: case 118: case 125:
 this.$=$$[$0-1]+$$[$0] 
break;
case 119: case 120: case 121:
 this.$ = $$[$0] 
break;
case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 153:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 142: case 143: case 161: case 162:
this.$=$$[$0-1]+$$[$0]
break;
case 154: case 155: case 156: case 157:
this.$=$$[$0];
break;
case 158:
this.$=$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 159:
this.$=$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:6,9:7,10:11,11:12,12:13,13:14,14:10,15:9,16:$V0,26:$V1,28:$V2,30:$V3,31:$V4,32:$V5,33:$V6,40:$V7,41:$V8,67:$V9,68:$Va,72:$Vb,80:$Vc,89:5,90:8,92:$Vd},{1:[3]},{5:[1,29]},{5:[2,2],88:$Ve},{5:[2,3],8:31,9:32,10:11,11:12,12:13,13:14,14:10,15:9,16:$V0,26:$V1,28:$V2,30:$V3,31:$V4,32:$V5,33:$V6,40:$V7,41:$V8,68:$Va,72:$Vb,80:$Vc},o($Vf,[2,112],{90:33,67:$V9,92:$Vd}),o($Vg,[2,6],{10:34,11:35,12:36,13:37,14:38,15:39,16:$V0,26:$V1,28:$V2,30:$V3,31:$V4,32:$V5,33:$V6,40:$V7,41:$V8,68:$Va,72:$Vb}),o($Vh,[2,7]),o($Vi,[2,114]),o($Vh,$Vj),o($Vh,$Vk),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),o($Vl,[2,19]),{81:[1,40]},{22:$Vm,41:$Vn,45:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,91:41,94:43,95:44,96:45,97:$Vt,98:$Vu,99:$Vv,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:56,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK,120:$VL,121:$VM},{22:$Vm,41:$Vn,45:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,91:74,94:43,95:44,96:45,97:$Vt,98:$Vu,99:$Vv,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:56,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK,120:$VL,121:$VM},{42:$VN},{22:[1,76]},{22:[1,77]},{22:[1,78]},{15:88,17:$VO,22:$VP,29:79,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:89,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{22:[1,90]},{17:[1,91],21:92},{17:[1,93]},{22:[1,94]},o([5,16,40,71,72,80,86],[2,45],{27:95,12:96,29:97,14:98,15:99,17:$VO,22:$VP,26:$V1,28:$V2,30:$V3,31:$V4,32:$V5,33:$V6,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV,68:$Va}),{1:[2,1]},{67:$V9,89:100,90:8,92:$Vd},o($Vg,[2,4],{10:34,11:35,12:36,13:37,14:38,15:39,16:$V0,26:$V1,28:$V2,30:$V3,31:$V4,32:$V5,33:$V6,40:$V7,41:$V8,68:$Va,72:$Vb}),o($Vh,[2,5]),o($Vi,[2,113]),o($Vl,[2,8]),o($Vl,[2,9]),o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),o($Vl,[2,13]),{41:[1,101]},o($VW,[2,115]),o($VX,[2,117],{93:102,100:$VY}),o($VX,[2,119]),o([5,16,24,25,26,28,30,31,32,33,36,37,40,41,67,68,71,72,80,86,92,109,110,111,112,113,114,115,116,117,118,119,120,121],[2,120],{43:$VZ,44:$V_,45:$V$,46:$V01,47:$V11,48:$V21,49:$V31,50:$V41,51:$V51,52:$V61,53:$V71,54:$V81,55:$V91,88:$Va1}),o($Vi,[2,121],{107:118,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK,120:$VL,121:$VM}),o($VX,[2,122]),o($VX,[2,123]),o($VW,[2,124]),{41:$Vb1,45:[1,119]},{22:[1,121]},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:122,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},o($Vg1,[2,145]),o($Vg1,[2,146]),o($Vg1,[2,147]),o($Vg1,[2,148]),{42:[1,128]},{22:[2,154]},{22:[2,155]},{22:[2,156]},{22:[2,157]},{42:[2,164]},{42:[2,165]},{42:[2,166]},{42:[2,167]},{42:[2,168]},{42:[2,169]},{42:[2,170]},{42:[2,171]},{42:[2,172]},{42:[2,173]},{42:[2,174]},{42:[2,175]},{42:[2,176]},o($VW,[2,116]),{41:[1,129]},{14:98,15:99,17:$VO,22:$VP,26:$V1,27:130,28:$V2,29:97,30:$V3,31:$V4,32:$V5,33:$V6,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:131,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:132,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},o($Vh1,[2,31],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1}),{63:[1,152],64:[1,153]},{15:88,17:$VO,22:$VP,29:154,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},o($VB1,[2,74]),o($VB1,[2,75]),o($VB1,[2,76]),o($VB1,[2,77],{42:$VN}),o($VB1,[2,78]),o($VB1,[2,80],{67:[1,155]}),o($VB1,[2,81]),o($Vh1,[2,32],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1}),{17:[1,156]},{18:[1,157],20:[1,158]},{13:160,19:159,34:161,35:162,36:$VC1,37:$VD1,40:$V7},o($Vl,[2,85],{42:[1,165]}),{15:88,17:$VO,22:$VP,29:166,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},o($Vl,[2,46]),o($Vl,[2,47]),o($Vh1,[2,48],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1}),o($Vh1,[2,49]),o([5,16,24,26,28,30,31,32,33,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,68,71,72,80,86],[2,50]),o($Vf,[2,111],{90:33,67:$V9,92:$Vd}),{42:[1,167]},o($VW,[2,118]),{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:168,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:169,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:170,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:171,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:172,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:173,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:174,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:175,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:176,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:177,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:178,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:179,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:180,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:181,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{22:$Vm,41:$Vc1,63:$Vp,64:$Vq,65:$Vr,66:$Vs,94:124,95:182,97:$Vd1,98:$Ve1,99:$Vf1,102:50,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{42:[1,183]},o($VX,[2,125]),o($Vg1,[2,142]),{24:[1,184]},{24:[1,185],43:$VZ,44:$V_,45:$V$,46:$V01,47:$V11,48:$V21,49:$V31,50:$V41,51:$V51,52:$V61,53:$V71,54:$V81,55:$V91,88:$Va1},{41:$Vb1,45:[1,186]},o($Vg1,[2,144]),o($Vg1,[2,149]),o($Vg1,[2,150]),o($Vg1,[2,151]),{42:[1,187]},{22:[1,188]},{24:[1,189]},{24:[1,190],43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1},{24:[1,191],43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1},{15:88,17:$VO,22:$VP,29:192,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:193,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:194,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:195,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:196,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:197,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:198,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:199,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:200,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:201,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:202,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:203,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:204,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:205,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:206,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:207,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:208,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:209,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:210,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},o($VB1,[2,71]),o($VB1,[2,72]),{24:$VE1,43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1},{41:[1,212]},{25:[1,213]},{6:214,22:$VF1,67:$V9,89:5,90:8,92:$Vd},{17:[1,216]},{13:217,40:$V7},o($Vl,[2,25]),{35:218,37:$VD1,40:[2,36]},{34:219,36:$VC1,40:[2,37]},{15:88,17:$VO,22:$VP,29:220,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{38:[1,221]},{50:[1,222]},{24:[1,223],43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1},{41:[1,224]},{43:$VZ,44:$V_,45:$V$,46:$V01,47:$V11,48:$V21,49:$V31,50:$V41,51:$V51,52:$V61,53:$V71,54:$V81,55:$V91,88:$Va1,101:[1,225]},o($VG1,[2,127],{45:$V$,46:$V01,47:$V11,88:$Va1}),o($VG1,[2,128],{45:$V$,46:$V01,47:$V11,88:$Va1}),o($VH1,[2,129],{88:$Va1}),o($VH1,[2,130],{88:$Va1}),o($VH1,[2,131],{88:$Va1}),o($VI1,[2,132],{43:$VZ,44:$V_,45:$V$,46:$V01,47:$V11,50:$V41,51:$V51,52:$V61,53:$V71,54:$V81,55:$V91,88:$Va1}),o($VI1,[2,133],{43:$VZ,44:$V_,45:$V$,46:$V01,47:$V11,50:$V41,51:$V51,52:$V61,53:$V71,54:$V81,55:$V91,88:$Va1}),o($VJ1,[2,134],{43:$VZ,44:$V_,45:$V$,46:$V01,47:$V11,52:$V61,53:$V71,54:$V81,55:$V91,88:$Va1}),o($VJ1,[2,135],{43:$VZ,44:$V_,45:$V$,46:$V01,47:$V11,52:$V61,53:$V71,54:$V81,55:$V91,88:$Va1}),o($VK1,[2,136],{43:$VZ,44:$V_,45:$V$,46:$V01,47:$V11,88:$Va1}),o($VK1,[2,137],{43:$VZ,44:$V_,45:$V$,46:$V01,47:$V11,88:$Va1}),o($VK1,[2,138],{43:$VZ,44:$V_,45:$V$,46:$V01,47:$V11,88:$Va1}),o($VK1,[2,139],{43:$VZ,44:$V_,45:$V$,46:$V01,47:$V11,88:$Va1}),o([5,16,24,25,26,28,30,31,32,33,36,37,40,41,67,68,71,72,80,86,92,101,109,110,111,112,113,114,115,116,117,118,119,120,121],[2,140],{43:$VZ,44:$V_,45:$V$,46:$V01,47:$V11,48:$V21,49:$V31,50:$V41,51:$V51,52:$V61,53:$V71,54:$V81,55:$V91,88:$Va1}),{42:[1,226]},o($Vg1,[2,153]),o($Vg1,[2,141]),o($Vg1,[2,143]),{41:$VL1,67:$V9,90:229,92:$Vd,108:227},{6:232,15:233,17:$VO,22:$VP,23:230,29:231,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV,67:$V9,89:5,90:8,92:$Vd},o($Vh1,[2,28]),o($Vh1,[2,29]),o($Vh1,[2,30]),o($VM1,[2,52],{45:$Vk1,46:$Vl1,47:$Vm1}),o($VM1,[2,53],{45:$Vk1,46:$Vl1,47:$Vm1}),o($VB1,[2,54]),o($VB1,[2,55]),o($VB1,[2,56]),o($VN1,[2,57],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1}),o($VN1,[2,58],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1}),o($VO1,[2,59],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1}),o($VO1,[2,60],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1}),o($VP1,[2,61],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1}),o($VP1,[2,62],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1}),o($VP1,[2,63],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1}),o($VP1,[2,64],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1}),o($VP1,[2,65],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1}),o($VP1,[2,66],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1}),o($VP1,[2,67],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1}),o($VP1,[2,68],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1}),o($VP1,[2,69],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1}),o($VP1,[2,70],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1}),o($VB1,[2,73]),o($VB1,[2,79]),{15:88,17:$VO,22:$VP,29:234,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{13:236,19:235,34:161,35:162,36:$VC1,37:$VD1,40:$V7,88:$Ve},{6:232,15:233,17:$VO,22:$VP,23:237,29:231,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV,67:$V9,89:5,90:8,92:$Vd},{18:[1,238]},o($Vl,[2,22]),{40:[2,34]},{40:[2,35]},o([37,40],[2,38],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1}),{6:232,15:233,17:$VO,22:$VP,23:239,29:231,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV,67:$V9,89:5,90:8,92:$Vd},{6:241,14:244,15:88,17:$VO,22:[1,242],26:$V1,28:$V2,29:243,30:$V3,31:$V4,32:$V5,33:$V6,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV,67:$V9,73:240,89:5,90:8,92:$Vd},{69:[1,245]},{22:[1,246]},o($VW,[2,126]),{41:$VL1,67:$V9,90:229,92:$Vd,108:247},o($VQ1,[2,159],{90:248,67:$V9,92:$Vd}),o($VW,[2,160],{93:249,100:$VY}),o($VW,[2,163]),{24:[1,250],25:$VR1},o($VS1,$VT1,{39:$VU1,43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1}),o($VS1,[2,42],{88:$Ve}),o([24,25,36,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],[2,43]),{25:[1,253],43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1},{13:254,40:$V7},o($Vl,[2,23]),{24:[1,255],25:$VR1},{6:256,67:$V9,89:5,90:8,92:$Vd},o([36,40],[2,39],{25:$VR1}),o($Vl,[2,84]),o($Vl,[2,86],{88:$Ve}),{6:232,14:258,15:233,17:$VO,22:$VP,23:257,26:$V1,28:$V2,29:259,30:$V3,31:$V4,32:$V5,33:$V6,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV,67:$V9,89:5,90:8,92:$Vd},o($Vl,[2,89],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1}),o($Vl,[2,90]),{8:261,10:11,11:12,12:13,13:14,14:264,15:263,16:$V0,17:$VO,22:$VP,26:$V1,27:262,28:$V2,29:97,30:$V3,31:$V4,32:$V5,33:$V6,40:$V7,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV,68:$Va,70:260,72:$Vb},{17:$VV1,24:[1,266],82:265},o($VQ1,[2,158],{90:248,67:$V9,92:$Vd}),o($VW,[2,162]),o($VW,[2,161]),o($VB1,[2,51]),{6:232,15:233,17:$VO,22:$VP,23:268,29:231,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV,67:$V9,89:5,90:8,92:$Vd},{15:88,17:$VO,22:$VP,29:269,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},{15:88,17:$VO,22:$VP,29:270,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV},o($Vl,[2,20]),o($VW1,[2,27],{25:[1,271]}),{13:273,19:272,34:161,35:162,36:$VC1,37:$VD1,40:$V7,88:$Ve},{24:[1,274],25:$VR1},{24:[1,275]},{24:$VE1,25:$VT1,39:$VU1,43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1},o([5,16,26,28,30,31,32,33,40,41,68,72,80,86],[2,83],{71:[1,276]}),o([5,71,80,86],[2,103],{10:34,11:35,12:36,13:37,14:38,15:39,16:$V0,26:$V1,28:$V2,30:$V3,31:$V4,32:$V5,33:$V6,40:$V7,41:$V8,68:$Va,72:$Vb}),o($Vl,[2,104]),o([5,16,26,28,30,31,32,33,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,68,71,72,80,86],$Vj),o($Vl,$Vk),{24:[1,277]},{83:[1,278]},{83:[1,279]},o([24,36,40],[2,40],{25:$VR1}),o($VS1,[2,41],{43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1}),{24:[1,280],43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,51:$Vq1,52:$Vr1,53:$Vs1,54:$Vt1,55:$Vu1,56:$Vv1,57:$Vw1,58:$Vx1,59:$Vy1,60:$Vz1,61:$VA1},{17:[1,282],21:281},{13:283,40:$V7},o($Vl,[2,24]),o($Vl,[2,87]),o($Vl,[2,88]),{8:261,10:11,11:12,12:13,13:14,14:264,15:263,16:$V0,17:$VO,22:$VP,26:$V1,27:262,28:$V2,29:97,30:$V3,31:$V4,32:$V5,33:$V6,40:$V7,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV,68:$Va,70:284,72:$Vb},{83:[1,285]},{84:[1,286]},{84:[1,287]},o($Vh1,[2,33]),o($VW1,[2,26]),{18:[1,288]},o($Vl,[2,21]),o($Vl,[2,82]),{84:[1,289]},{42:[1,290]},{42:[1,291]},{22:$VF1},{42:[1,292]},{26:$VX1,32:$VY1,74:293,75:$VZ1,77:$V_1,78:$V$1,79:$V02},{26:$VX1,32:$VY1,74:300,75:$VZ1,77:$V_1,78:$V$1,79:$V02},{26:$VX1,32:$VY1,74:301,75:$VZ1,77:$V_1,78:$V$1,79:$V02},{85:[1,302]},o($V12,[2,97],{76:[1,303]}),o($V12,[2,98],{76:[1,304]}),o($V12,[2,99],{76:[1,305]}),o($V12,[2,100],{76:[1,306]}),o($V12,[2,101],{76:[1,307]}),o($V12,[2,102],{76:[1,308]}),{24:[2,110],25:[1,309]},{24:[1,311],85:[1,310]},{8:261,10:11,11:12,12:13,13:14,14:264,15:263,16:$V0,17:$VO,22:$VP,24:[1,313],26:$V1,27:262,28:$V2,29:97,30:$V3,31:$V4,32:$V5,33:$V6,40:$V7,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV,68:$Va,70:312,72:$Vb},o($V12,[2,91]),o($V12,[2,92]),o($V12,[2,93]),o($V12,[2,94]),o($V12,[2,95]),o($V12,[2,96]),{17:$VV1,82:314},{8:261,10:11,11:12,12:13,13:14,14:264,15:263,16:$V0,17:$VO,22:$VP,26:$V1,27:262,28:$V2,29:97,30:$V3,31:$V4,32:$V5,33:$V6,40:$V7,41:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV,68:$Va,70:315,72:$Vb},{86:[1,316]},{86:[1,317]},{87:[1,318]},{24:[2,109]},{86:[1,319]},{87:[1,320]},{87:[1,321]},o($Vh,[2,108]),{87:[1,322]},o($Vh,[2,107]),o($Vh,[2,106]),o($Vh,[2,105])],
defaultActions: {29:[2,1],57:[2,154],58:[2,155],59:[2,156],60:[2,157],61:[2,164],62:[2,165],63:[2,166],64:[2,167],65:[2,168],66:[2,169],67:[2,170],68:[2,171],69:[2,172],70:[2,173],71:[2,174],72:[2,175],73:[2,176],218:[2,34],219:[2,35],314:[2,109]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const Padre=require("../app/Clases/Models/Nodo.js");
  const Tipo=require("../app/Clases/Hijos/Tipo.js");
  const Funcion=require("../app/Clases/Hijos/Funciones.js");
  const Parametros=require("../app/Clases/Hijos/Parametros.js");
  const Declaracion=require("../app/Clases/Hijos/Declaracion.js");
  const Operacion=require("../app/Clases/Hijos/Operaciones.js");
  const tipoOperacion=require("../app/Clases/Hijos/TipoOperacion.js");
  const Objeto=require("../app/Clases/Models/Objeto.js");
  const Atributo=require("../app/Clases/Models/Atributo.js");
  const Return=require("../app/Clases/Hijos/Return.js");
  const OrderBy=require("../app/Clases/Hijos/OrderBy.js");
  const Where=require("../app/Clases/Hijos/Where.js");
  const Funcioncita=require("../app/Clases/Hijos/Funcioncitas.js");
  const Loop=require("../app/Clases/Hijos/Loop.js");
  const For=require("../app/Clases/Hijos/For.js");
  const If=require("../app/Clases/Hijos/If.js");
  const Llamado=require("../app/Clases/Hijos/Llamados.js");
  const Contenido=require("../app/Clases/Hijos/Contenido.js");
  const Listado=require("../app/Clases/Hijos/Listado.js");
  const Listita=require("../app/Clases/Hijos/Listita.js");
  const Sentencia=require("../app/Clases/Hijos/Sentencias.js");
  const Operador=require("../app/Clases/Hijos/Operador.js");

  //****************XPATH**************************
  	const TablaSim = require('../app/Clases/XPath/TablaSimbolosXP.js')
	//Para ponerlo sería Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("S -> INIT EOF", "S.val := INIT.val"));
	var DIndice = require("../app/Clases/XPath/DobleIndice.js")
	var Indice =  require("../app/Clases/XPath/Indice.js")
	var Expresion =  require("../app/Clases/XPath/Expresion.js")
	var Axes = require("../app/Clases/XPath/Axes.js")
	var Funcion2 = require("../app/Clases/XPath/Funciones.js")
	var Predicado = require("../app/Clases/XPath/Predicado.js")
	var Instruccion = require("../app/Clases/XPath/NodoAbs.js")
	//Nodo
	var Nodo=require("../app/Clases/Models/Nodo.js")
  var xpath=require("../app/Clases/Hijos/XPath.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 92;
break;
case 1:return 67;
break;
case 2:return 97
break;
case 3:return 22;
break;
case 4:return 24;
break;
case 5:return 100;
break;
case 6:return 101;
break;
case 7:return 85;
break;
case 8:return 86;
break;
case 9:return 50;
break;
case 10:return 51;
break;
case 11:return 54;
break;
case 12:return 52;
break;
case 13:return 55;
break;
case 14:return 53;
break;
case 15:return 42;
break;
case 16:return 98;
break;
case 17:return 25;
break;
case 18:return 87;
break;
case 19:return 88;
break;
case 20:return 43;
break;
case 21:return 44;
break;
case 22:return 45;
break;
case 23:return 76;
break;
case 24:return 46;
break;
case 25:return 48;
break;
case 26:return 49;
break;
case 27:return 47;
break;
case 28:return 16;
break;
case 29:return 18;
break;
case 30:return 36;
break;
case 31:return 37;
break;
case 32:return 38;
break;
case 33:return 40;
break;
case 34:return 68;
break;
case 35:return 69;
break;
case 36:return 71;
break;
case 37:return 26;
break;
case 38:return 28;
break;
case 39:return 30;
break;
case 40:return 33;
break;
case 41:return 39;
break;
case 42:return 80;
break;
case 43:return 81;
break;
case 44:return 56; //=
break;
case 45:return 57; //!=
break;
case 46:return 58; //<
break;
case 47:return 59; //<=
break;
case 48:return 60; //>
break;
case 49:return 61; //>=
break;
case 50:return 20;
break;
case 51:return 72;
break;
case 52:return 83;
break;
case 53:return 84;
break;
case 54:return 75;
break;
case 55:return 77;
break;
case 56:return 79;
break;
case 57:return 'rdouble';
break;
case 58:return 32;
break;
case 59:return 78;
break;
case 60:return 'rdate';
break;
case 61:return 31;
break;
case 62:return 'rdiv';
break;
case 63:return 105;
break;
case 64:return 106;
break;
case 65:return 103;
break;
case 66:return 104;
break;
case 67:return 109;
break;
case 68:return 110;
break;
case 69:return 111;
break;
case 70:return 112;
break;
case 71:return 113;
break;
case 72:return 114;
break;
case 73:return 115;
break;
case 74:return 116;
break;
case 75:return 117;
break;
case 76:return 118;
break;
case 77:return 119;
break;
case 78:return 120;
break;
case 79:return 121;
break;
case 80:/*Se ignoran*/
break;
case 81:/*Comentarios se ignoran*/
break;
case 82:return 65;
break;
case 83:return 66;
break;
case 84:return 63;
break;
case 85:return 64;
break;
case 86:return 17;
break;
case 87:return 41;
break;
case 88:return 99;
break;
case 89:return 'CARACTER';
break;
case 90:return 5;
break;
}
},
rules: [/^(?:\/\/)/,/^(?:\/)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\?)/,/^(?:div\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:data\b)/,/^(?:upper-case\b)/,/^(?:lower-case\b)/,/^(?:substring\b)/,/^(?:to\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:at\b)/,/^(?:let\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:integer\b)/,/^(?:decimal\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:date\b)/,/^(?:number\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:[ \n\r\t]+)/,/^(?:["(:"][^][":)"])/,/^(?:[\']([^\n\'])*[\'])/,/^(?:[\"]([^\n\"])*[\"])/,/^(?:[-]?[0-9]+[.][0-9]+)/,/^(?:[-]?[0-9]+)/,/^(?:\$([a-zA-Z]|_|ñ|Ñ)+(_|ñ|Ñ|[0-9A-Za-z])*)/,/^(?:(@)?([a-zA-Z]|_)+(_|\.|-|Á|É|Í|Ó|Ú|á|é|í|ó|ú|ñ|Ñ|[0-9A-Za-z])*)/,/^(?:@)/,/^(?:[^<>&]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xquery;
exports.Parser = xquery.Parser;
exports.parse = function () { return xquery.parse.apply(xquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}