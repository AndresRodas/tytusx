/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XPathASC = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,3],$V2=[1,5],$V3=[1,4],$V4=[1,6],$V5=[1,7],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,27],$Va=[1,20],$Vb=[1,18],$Vc=[1,19],$Vd=[1,22],$Ve=[1,23],$Vf=[1,24],$Vg=[1,25],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,46],$Vl=[1,30],$Vm=[1,31],$Vn=[1,32],$Vo=[1,33],$Vp=[1,34],$Vq=[1,35],$Vr=[1,36],$Vs=[1,37],$Vt=[1,38],$Vu=[1,39],$Vv=[1,40],$Vw=[1,41],$Vx=[1,42],$Vy=[2,5,6,11,12,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,46,47,48,49,50,51,52,53,54,55,56,57,58],$Vz=[1,53],$VA=[2,5,6,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,46,47,48,49,50,51,52,53,54,55,56,57,58],$VB=[1,54],$VC=[2,5,12,16,31,46,47,48,49,50,51,52,53,54,55,56,57,58],$VD=[1,81],$VE=[1,82],$VF=[1,68],$VG=[1,69],$VH=[1,70],$VI=[1,71],$VJ=[1,72],$VK=[1,73],$VL=[1,74],$VM=[1,75],$VN=[1,76],$VO=[1,77],$VP=[1,78],$VQ=[1,79],$VR=[1,80],$VS=[5,6,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31],$VT=[1,84],$VU=[1,89],$VV=[1,88],$VW=[1,86],$VX=[1,87],$VY=[2,5,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,46,47,48,49,50,51,52,53,54,55,56,57,58],$VZ=[1,96],$V_=[2,5,12,15,16,31,46,47,48,49,50,51,52,53,54,55,56,57,58],$V$=[2,63],$V01=[2,5,12,15,16,17,18,22,23,24,25,26,27,28,29,31,46,47,48,49,50,51,52,53,54,55,56,57,58],$V11=[2,5,12,15,16,17,18,19,20,22,23,24,25,26,27,28,29,31,46,47,48,49,50,51,52,53,54,55,56,57,58],$V21=[2,5,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,46,47,48,49,50,51,52,53,54,55,56,57,58],$V31=[2,5,12,15,16,22,23,31,46,47,48,49,50,51,52,53,54,55,56,57,58],$V41=[2,5,12,15,16,22,23,24,25,31,46,47,48,49,50,51,52,53,54,55,56,57,58],$V51=[2,5,12,15,16,22,23,24,25,26,27,28,29,31,46,47,48,49,50,51,52,53,54,55,56,57,58],$V61=[1,125],$V71=[1,126];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INICIO":4,"EOF":5,"diagonal":6,"id":7,"PREDICADO":8,"EXPRESION":9,"EJES":10,"dobled":11,"barra":12,"punto":13,"doblep":14,"corizq":15,"corder":16,"mas":17,"menos":18,"por":19,"div":20,"mod":21,"or":22,"and":23,"igual":24,"dif":25,"menor":26,"mayor":27,"menori":28,"mayori":29,"parizq":30,"parder":31,"arroba":32,"FUNCIONES":33,"cadena":34,"decimal":35,"entero":36,"cadenas":37,"FUNCION":38,"rlast":39,"rposition":40,"rnode":41,"rtext":42,"EJE":43,"dospuntos":44,"CONTENIDO":45,"rancestros":46,"rancestro":47,"ratributo":48,"rchild":49,"rdescenos":50,"rdescen":51,"rseguidorh":52,"rseguidor":53,"rnombres":54,"rparent":55,"rprecedings":56,"rpreceding":57,"rself":58,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"diagonal",7:"id",11:"dobled",12:"barra",13:"punto",14:"doblep",15:"corizq",16:"corder",17:"mas",18:"menos",19:"por",20:"div",21:"mod",22:"or",23:"and",24:"igual",25:"dif",26:"menor",27:"mayor",28:"menori",29:"mayori",30:"parizq",31:"parder",32:"arroba",34:"cadena",35:"decimal",36:"entero",37:"cadenas",39:"rlast",40:"rposition",41:"rnode",42:"rtext",44:"dospuntos",46:"rancestros",47:"rancestro",48:"ratributo",49:"rchild",50:"rdescenos",51:"rdescen",52:"rseguidorh",53:"rseguidor",54:"rnombres",55:"rparent",56:"rprecedings",57:"rpreceding",58:"rself"},
productions_: [0,[3,2],[4,4],[4,3],[4,3],[4,2],[4,3],[4,3],[4,2],[4,3],[4,2],[4,4],[4,3],[4,3],[4,2],[4,3],[4,3],[4,2],[4,3],[4,2],[4,3],[4,1],[4,2],[4,1],[4,1],[4,3],[4,3],[4,2],[4,2],[4,3],[4,3],[4,2],[4,2],[4,2],[8,4],[8,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,2],[33,3],[38,1],[38,1],[38,1],[38,1],[38,2],[10,4],[10,5],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,2],[45,1],[45,3],[45,2],[45,1],[45,2],[45,2],[45,1],[45,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$=new NodoAST.default("Path"); this.$.AgregarHijo($$[$0-1]); return this.$; 
break;
case 2:
 this.$=new NodoAST.default("/");
	 								  let nodo1=new NodoAST.default($$[$0-1]); nodo1.AgregarHijo($$[$0]);
	 								  this.$.AgregarHijo($$[$0-3]); this.$.AgregarHijo(nodo1); 
break;
case 3:
 this.$=new NodoAST.default("/");
									  let nodo2=new NodoAST.default($$[$0-1]); nodo2.AgregarHijo($$[$0]);
									  this.$.AgregarHijo(nodo2); 
break;
case 4:
 this.$=new NodoAST.default("/");
									  let nodo3=new NodoAST.default($$[$0]);
									  this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo(nodo3); 
break;
case 5:
 this.$=new NodoAST.default("/");
									  let nodo4=new NodoAST.default($$[$0]);
									  this.$.AgregarHijo(nodo4); 
break;
case 6: case 9:
 this.$=new NodoAST.default("/");
									  this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 7:
 this.$=new NodoAST.default("/");
									  $$[$0-1].AgregarHijo($$[$0]); this.$.AgregarHijo($$[$0-1]); 
break;
case 8: case 10:
 this.$=new NodoAST.default("/");
									  this.$.AgregarHijo($$[$0]); 
break;
case 11:
 this.$=new NodoAST.default("//");
									  let nodo5=new NodoAST.default($$[$0-1]); nodo5.AgregarHijo($$[$0]);
									  this.$.AgregarHijo($$[$0-3]); this.$.AgregarHijo(nodo5); 
break;
case 12:
 this.$=new NodoAST.default("//");
									  let nodo6=new NodoAST.default($$[$0-1]); nodo6.AgregarHijo($$[$0]);
									  this.$.AgregarHijo(nodo6); 
break;
case 13:
 this.$=new NodoAST.default("//");
									  let nodo7=new NodoAST.default($$[$0]);
									  this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo(nodo7); 
break;
case 14:
 this.$=new NodoAST.default("//");
									  let nodo8=new NodoAST.default($$[$0]);
									  this.$.AgregarHijo(nodo8); 
break;
case 15: case 18:
 this.$=new NodoAST.default("//");
									  this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 16:
 this.$=new NodoAST.default("//");
									  $$[$0-1].AgregarHijo($$[$0]); this.$.AgregarHijo($$[$0-1]); 
break;
case 17: case 19:
 this.$=new NodoAST.default("//");
									  this.$.AgregarHijo($$[$0]); 
break;
case 20:
 this.$=new NodoAST.default("|");
									  this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 21: case 23: case 24: case 53: case 55: case 56: case 57: case 58: case 59: case 60: case 61:
 this.$=new NodoAST.default($$[$0]); 
break;
case 22:
 this.$=new NodoAST.default($$[$0-1]); this.$.AgregarHijo($$[$0]); 
break;
case 25:
 this.$=new NodoAST.default("/");
									  let nodo9=new NodoAST.default($$[$0]);
									  this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo(nodo9); 
break;
case 26:
 this.$=new NodoAST.default("/");
									  let nodo10=new NodoAST.default($$[$0]);
									  this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo(nodo10); 
break;
case 27:
 this.$=new NodoAST.default("/");
									  let nodo11=new NodoAST.default($$[$0]);
									  this.$.AgregarHijo(nodo11); 
break;
case 28:
 this.$=new NodoAST.default("/");
									  let nodo12=new NodoAST.default($$[$0]);
									  this.$.AgregarHijo(nodo12); 
break;
case 29:
 this.$=new NodoAST.default("//");
									  let nodo13=new NodoAST.default($$[$0]);
									  this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo(nodo13); 
break;
case 30:
 this.$=new NodoAST.default("//");
									  let nodo14=new NodoAST.default($$[$0]);
									  this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo(nodo14); 
break;
case 31:
 this.$=new NodoAST.default("//");
									  let nodo15=new NodoAST.default($$[$0]);
									  this.$.AgregarHijo(nodo15); 
break;
case 32:
 this.$=new NodoAST.default("//");
									  let nodo16=new NodoAST.default($$[$0]);
									  this.$.AgregarHijo(nodo16); 
break;
case 33:
 ErrorL.Errores.add(new nodoError.Error("Sintáctico","Se esperaba el inicio de una instrucción "+yytext,_$[$0-1].first_line,_$[$0-1].first_column,"XPath")); 
break;
case 34:
 this.$=$$[$0-3]; this.$.AgregarHijo($$[$0-1]); 
break;
case 35:
 this.$=new NodoAST.default("Predicado"); this.$.AgregarHijo($$[$0-1]); 
break;
case 36:
 this.$=new NodoAST.default("+"); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 37:
 this.$=new NodoAST.default("-"); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 38:
 this.$=new NodoAST.default("*"); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 39:
 this.$=new NodoAST.default("div"); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 40:
 this.$=new NodoAST.default("mod"); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 41:
 this.$=new NodoAST.default("or"); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 42:
 this.$=new NodoAST.default("and"); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 43:
 this.$=new NodoAST.default("="); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 44:
 this.$=new NodoAST.default("!="); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 45:
 this.$=new NodoAST.default("<"); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 46:
 this.$=new NodoAST.default(">"); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 47:
 this.$=new NodoAST.default("<="); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 48:
 this.$=new NodoAST.default(">="); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 49:
 this.$=new NodoAST.default("/"); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 50:
 this.$=new NodoAST.default("//"); this.$.AgregarHijo($$[$0-2]); this.$.AgregarHijo($$[$0]); 
break;
case 51:
 this.$=$$[$0-1]; 
break;
case 52:
 this.$=new NodoAST.default("@"); this.$.AgregarHijo($$[$0]); 
break;
case 54: case 65: case 66: case 67: case 68: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84:
 this.$=$$[$0]; 
break;
case 62:
 this.$=new NodoAST.default("Path"); this.$.AgregarHijo($$[$0]); 
break;
case 63:
 ErrorL.Errores.add(new nodoError.Error("Sintáctico","Se esperaba una expresión en el predicado "+yytext,_$[$0-1].first_line,_$[$0-1].first_column,"XPath")); 
break;
case 64:
 this.$=new NodoAST.default("Funcion");
	 						  let nodof=new NodoAST.default($$[$0-2]); this.$.AgregarHijo(nodof); 
break;
case 69:
 ErrorL.Errores.add(new nodoError.Error("Sintáctico","Error en la función "+yytext,_$[$0-1].first_line,_$[$0-1].first_column,"XPath")); 
break;
case 70:
 this.$=new NodoAST.default("Eje");
	 											  let nodoe=new NodoAST.default($$[$0-3]); nodoe.AgregarHijo($$[$0]);
												  this.$.AgregarHijo(nodoe); 
break;
case 71:
 this.$=new NodoAST.default($$[$0-3]); this.$.AgregarHijo($$[$0-4]); this.$.AgregarHijo($$[$0]); 
break;
case 85:
 ErrorL.Errores.add(new nodoError.Error("Sintáctico","No se ha reconocido el AXES "+yytext,_$[$0-1].first_line,_$[$0-1].first_column,"XPath")); 
break;
case 86:
 this.$=new NodoAST.default("Contenido");
	 					  let nodoc1=new NodoAST.default($$[$0]); this.$.AgregarHijo(nodoc1); 
break;
case 87:
 this.$=new NodoAST.default("Contenido");
	 					  let nodoc2=new NodoAST.default($$[$0-2]); this.$.AgregarHijo(nodoc2); 
break;
case 88:
 this.$=new NodoAST.default("Contenido");
						  let nodoc6=new NodoAST.default($$[$0-1]); nodoc6.AgregarHijo($$[$0]);
						  this.$.AgregarHijo(nodoc6); 
break;
case 89:
 this.$=new NodoAST.default("Contenido");
	 					  let nodoc3=new NodoAST.default($$[$0]); this.$.AgregarHijo(nodoc3); 
break;
case 90:
 this.$=new NodoAST.default("Contenido");
	 					  let nodoc4=new NodoAST.default($$[$0-1]+$$[$0]); this.$.AgregarHijo(nodoc4); 
break;
case 91:
 this.$=new NodoAST.default("Contenido");
	 					  let nodoc5=new NodoAST.default($$[$0-1]+$$[$0]); this.$.AgregarHijo(nodoc5); 
break;
case 92: case 93:
 this.$=new NodoAST.default("Contenido"); this.$.AgregarHijo($$[$0]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:$V1,7:$V2,11:$V3,13:$V4,14:$V5},{1:[3]},{5:[1,9],6:$V6,11:$V7,12:$V8},{2:$V9,4:26,6:$V1,7:[1,13],9:14,10:15,11:$V3,13:[1,16],14:[1,17],19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:28,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx},{2:$V9,4:26,6:$V1,7:[1,47],9:48,10:49,11:$V3,13:[1,51],14:[1,50],19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:28,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx},o($Vy,[2,21],{8:52,15:$Vz}),o($VA,[2,23]),o($VA,[2,24]),{5:$VB},{1:[2,1]},{2:$V9,4:26,6:$V1,7:[1,55],9:56,10:57,11:$V3,13:[1,58],14:[1,59],19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:28,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx},{2:$V9,4:26,6:$V1,7:[1,60],9:61,10:62,11:$V3,13:[1,63],14:[1,64],19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:28,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx},{2:$V0,4:65,6:$V1,7:$V2,11:$V3,13:$V4,14:$V5},o($Vy,[2,5],{8:66,15:$Vz}),o($VC,[2,8],{8:67,6:$VD,11:$VE,15:$Vz,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR}),o($VS,[2,10],{43:83,2:$VT,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx}),o($VA,[2,27]),o($VA,[2,28]),{2:$VU,4:26,6:$V1,7:$VV,9:85,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:90,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},o($VA,[2,53]),o($VA,[2,54]),o($VA,[2,55]),o($VA,[2,56]),o($VA,[2,57]),o($VA,[2,61]),o($VY,[2,62],{6:$V6,11:$V7,12:$V8}),{5:$VB,6:[1,91]},{44:[1,92]},{30:[1,93]},{44:[2,72]},{44:[2,73]},{44:[2,74]},{44:[2,75]},{44:[2,76]},{44:[2,77]},{44:[2,78]},{44:[2,79]},{44:[2,80]},{44:[2,81]},{44:[2,82]},{44:[2,83]},{44:[2,84]},{30:[2,65]},{30:[2,66]},{30:[2,67]},{30:[2,68]},o($Vy,[2,14],{8:94,15:$Vz}),o($VC,[2,17],{8:95,6:$VD,11:$VE,15:$Vz,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR}),o($VS,[2,19],{43:83,2:$VT,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx}),o($VA,[2,31]),o($VA,[2,32]),o($Vy,[2,22],{15:$VZ}),{2:$VU,4:26,6:$V1,7:$VV,9:97,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},o($VA,[2,33]),o($Vy,[2,4],{8:98,15:$Vz}),o($V_,[2,6],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR}),o($VS,[2,9],{43:83,2:$VT,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx}),o($VA,[2,25]),o($VA,[2,26]),o($Vy,[2,13],{8:99,15:$Vz}),o($V_,[2,15],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR}),o($VS,[2,18],{43:83,2:$VT,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx}),o($VA,[2,29]),o($VA,[2,30]),o($VY,[2,20],{6:$V6,11:$V7,12:$V8}),o($Vy,[2,3],{15:$VZ}),o($Vy,[2,7],{15:$VZ}),{2:$VU,4:26,6:$V1,7:$VV,9:100,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:101,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:102,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:103,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:104,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:105,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:106,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:107,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:108,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:109,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:110,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:111,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:112,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:113,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{2:$VU,4:26,6:$V1,7:$VV,9:114,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{44:[1,115]},{6:[1,116]},{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR,31:[1,117]},o($VA,[2,58]),o($VA,[2,59]),o($Vy,[2,60],{8:52,15:$Vz}),{5:$VB,6:[1,118]},o($V_,[2,52],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR}),o([2,5,6,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,44,46,47,48,49,50,51,52,53,54,55,56,57,58],$V$),{44:[1,119]},{31:[1,120]},o($Vy,[2,12],{15:$VZ}),o($Vy,[2,16],{15:$VZ}),{2:$VU,4:26,6:$V1,7:$VV,9:121,11:$V3,13:$VW,14:$VX,19:$Va,30:$Vb,32:$Vc,33:21,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk},{6:$VD,11:$VE,16:[1,122],17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR},o($Vy,[2,2],{15:$VZ}),o($Vy,[2,11],{15:$VZ}),o($V01,[2,36],{6:$VD,11:$VE,19:$VH,20:$VI,21:$VJ}),o($V01,[2,37],{6:$VD,11:$VE,19:$VH,20:$VI,21:$VJ}),o($V11,[2,38],{6:$VD,11:$VE,21:$VJ}),o($V11,[2,39],{6:$VD,11:$VE,21:$VJ}),o($V21,[2,40],{6:$VD,11:$VE}),o($V31,[2,41],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,24:$VM,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR}),o($V31,[2,42],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,24:$VM,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR}),o($V41,[2,43],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,26:$VO,27:$VP,28:$VQ,29:$VR}),o($V41,[2,44],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,26:$VO,27:$VP,28:$VQ,29:$VR}),o($V51,[2,45],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ}),o($V51,[2,46],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ}),o($V51,[2,47],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ}),o($V51,[2,48],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ}),o($V_,[2,49],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR}),o($V_,[2,50],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR}),{44:[1,123]},{44:[2,85]},o($VA,[2,51]),o([2,5,6,11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,46,47,48,49,50,51,52,53,54,55,56,57,58],$V$),{2:$VU,4:26,6:$V1,7:$V61,9:128,11:$V3,13:$VW,14:$VX,19:$V71,30:$Vb,32:$Vc,33:127,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk,45:124},o($VA,[2,64]),{6:$VD,11:$VE,16:[1,129],17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR},o($VA,[2,35]),{2:$VU,4:26,6:$V1,7:$V61,9:128,11:$V3,13:$VW,14:$VX,19:$V71,30:$Vb,32:$Vc,33:127,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:29,39:$Vh,40:$Vi,41:$Vj,42:$Vk,45:130},o($VA,[2,70]),o($Vy,[2,86],{8:132,15:$Vz,30:[1,131]}),o($V21,[2,89],{6:[1,133],11:[1,134]}),o($VA,[2,92]),o($V_,[2,93],{6:$VD,11:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR}),o($VA,[2,34]),o($VA,[2,71]),{31:[1,135]},o($Vy,[2,88],{15:$VZ}),o($VA,[2,90]),o($VA,[2,91]),o($VA,[2,87])],
defaultActions: {9:[2,1],30:[2,72],31:[2,73],32:[2,74],33:[2,75],34:[2,76],35:[2,77],36:[2,78],37:[2,79],38:[2,80],39:[2,81],40:[2,82],41:[2,83],42:[2,84],43:[2,65],44:[2,66],45:[2,67],46:[2,68],116:[2,85]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var NodoAST = require("../app/Clases/Models/NodoAST.js");
	var nodoError=require("../app/Clases/Models/Errores.js");
  	var ErrorL=require("../app/Clases/Models/ListaError.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 11;
break;
case 1:return 6;
break;
case 2:return 14;
break;
case 3:return 13;
break;
case 4:return 32;
break;
case 5:return 12;
break;
case 6:return 17;
break;
case 7:return 18;
break;
case 8:return 19;
break;
case 9:return 20;
break;
case 10:return 24;
break;
case 11:return 25;
break;
case 12:return 28;
break;
case 13:return 26;
break;
case 14:return 29;
break;
case 15:return 27;
break;
case 16:return 22;
break;
case 17:return 23;
break;
case 18:return 21;
break;
case 19:return 15;
break;
case 20:return 16;
break;
case 21:return 30;
break;
case 22:return 31;
break;
case 23:return 44;
break;
case 24:return 41;
break;
case 25:return 42;
break;
case 26:return 39;
break;
case 27:return 40;
break;
case 28:return 46;
break;
case 29:return 47;
break;
case 30:return 48;
break;
case 31:return 49;
break;
case 32:return 50;
break;
case 33:return 51;
break;
case 34:return 52;
break;
case 35:return 53;
break;
case 36:return 54;
break;
case 37:return 55;
break;
case 38:return 56;
break;
case 39:return 57;
break;
case 40:return 58;
break;
case 41:/*Se ignoran*/
break;
case 42:return 34;
break;
case 43:return 37;
break;
case 44:return 35;
break;
case 45:return 36;
break;
case 46:return 7;
break;
case 47:return 5;
break;
case 48: ErrorL.Errores.add(new nodoError.Error("Léxico","Caracter "+yy_.yytext+
" no reconocido",yy_.yylineno,yy_.yylloc.first_column,"XPath")) 
break;
}
},
rules: [/^(?:\/\/)/,/^(?:\/)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:@)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:[ \n\r\t]+)/,/^(?:[\']([^\n])*[\'])/,/^(?:[\"]([^\n\"])*[\"])/,/^(?:[-]?[0-9]+[.][0-9]+)/,/^(?:[-]?[0-9]+)/,/^(?:([a-zA-Z]|_)+(_|\.|-|:|Á|É|Í|Ó|Ú|á|é|í|ó|ú|ñ|Ñ|[0-9A-Za-z])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XPathASC;
exports.Parser = XPathASC.Parser;
exports.parse = function () { return XPathASC.parse.apply(XPathASC, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}