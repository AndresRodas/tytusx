/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,6],$V1=[1,25],$V2=[2,9],$V3=[1,24],$V4=[1,27],$V5=[1,28],$V6=[1,35],$V7=[1,33],$V8=[1,36],$V9=[1,34],$Va=[2,5,6],$Vb=[2,14,25],$Vc=[1,51],$Vd=[1,56],$Ve=[1,54],$Vf=[1,52],$Vg=[1,55],$Vh=[1,53],$Vi=[1,46],$Vj=[1,50],$Vk=[1,49],$Vl=[1,47],$Vm=[1,48],$Vn=[1,57],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,72],$Vu=[2,6,7,8,9,10,12,16,20,25,29,32,33,34,35,36,37,38,39],$Vv=[2,14,20,25];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INIT":4,"EOF":5,"eInicio":6,"inter":7,"xml":8,"version":9,"igual":10,"vers":11,"encoding":12,"FORMATO":13,"eFin":14,"NODOS":15,"utf":16,"ascii":17,"iso":18,"NODO":19,"ID":20,"CONT":21,"ATRIBUTOS":22,"CONT2":23,"FINAL":24,"barra":25,"OPCIONES":26,"TEXTO":27,"ATRIBUTO":28,"CADENA":29,"CHAR":30,"PALABRA":31,"integer":32,"double":33,"CARACTER":34,"mayorque":35,"menorque":36,"apostrofe":37,"comilla":38,"ampersand":39,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"eInicio",7:"inter",8:"xml",9:"version",10:"igual",11:"vers",12:"encoding",14:"eFin",16:"utf",17:"ascii",18:"iso",20:"ID",25:"barra",29:"CADENA",30:"CHAR",32:"integer",33:"double",34:"CARACTER",35:"mayorque",36:"menorque",37:"apostrofe",38:"comilla",39:"ampersand"},
productions_: [0,[3,2],[4,12],[4,2],[13,1],[13,1],[13,1],[13,2],[15,2],[15,0],[19,3],[19,2],[21,2],[21,1],[23,2],[23,2],[23,2],[24,5],[24,5],[24,4],[22,2],[22,1],[28,3],[28,3],[26,2],[26,1],[27,2],[27,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                        //ESTADO 1 ES PARA TS
                        if(Estado.Estado.cambio==1){
                          Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("S -> INIT EOF", "S.val := INIT.val"));
                          this.$=$$[$0-1]; return {list:this.$,encoding:encoding};
                        }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                          let NodoS = new Nodo.default("S", "");
                          NodoS.AgregarHijo($$[$0-1]);
                          this.$=NodoS;
                          return {list:this.$,encoding:encoding};
                        }
                    
                    
break;
case 2:

                          //ESTADO 1 ES PARA TS
                        if(Estado.Estado.cambio==1){
                          Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("INIT -> eInicio inter xml version igual vers encoding igual FORMATO inter eFin NODOS", "INIT.val := vers.lexval + FORMATO.val + NODOS.val"));
                          this.$ = $$[$0]
                        }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                          let NodoVersion = new Nodo.default("INIT", "INIT -> eInicio inter xml version igual vers encoding igual FORMATO inter eFin NODOS");
                          NodoVersion.AgregarHijo(new Nodo.default("VERSION", ""))
                          NodoVersion.AgregarHijo(new Nodo.default($$[$0-11],""));
                          NodoVersion.AgregarHijo(new Nodo.default($$[$0-10],""));
                          NodoVersion.AgregarHijo(new Nodo.default($$[$0-9],""));
                          NodoVersion.AgregarHijo(new Nodo.default($$[$0-8],""));
                          NodoVersion.AgregarHijo(new Nodo.default($$[$0-7],""));
                          NodoVersion.AgregarHijo(new Nodo.default($$[$0-6],""));
                          NodoVersion.AgregarHijo(new Nodo.default($$[$0-5],""));
                          NodoVersion.AgregarHijo(new Nodo.default($$[$0-4],""));
                          NodoVersion.AgregarHijo($$[$0-3]);
                          NodoVersion.AgregarHijo(new Nodo.default($$[$0-2],""));
                          NodoVersion.AgregarHijo(new Nodo.default($$[$0-1],""));
                          NodoVersion.AgregarHijo($$[$0]);
                          this.$ = NodoVersion;
                        }
                      
break;
case 3:

                        ErrorL.Errores.add(new nodoError.Error("Sintáctico","Se esperaba una línea de código de inicialización en lugar de: "+yytext,_$[$0-1].first_line, _$[$0-1].first_column,"XML"));
                      
break;
case 4:

                          //ESTADO 1 ES PARA TS
                        if(Estado.Estado.cambio==1){
                          Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("FORMATO -> utf", "FORMATO.val := utf.lexval"));
                          this.$=$$[$0]
                        }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                          this.$ = new Nodo.default("FORMATO", "FORMATO -> utf");
                          this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                        }
                        encoding="utf";
                      
break;
case 5:

                          //ESTADO 1 ES PARA TS
                        if(Estado.Estado.cambio==1){
                          Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("FORMATO -> ascii", "FORMATO.val := ascii.lexval"));
                          this.$=$$[$0]
                        }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                          this.$ = new Nodo.default("FORMATO", "FORMATO -> ascii");
                          this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                        }
                        encoding="ascii"
                      
break;
case 6:

                        //ESTADO 1 ES PARA TS
                        if(Estado.Estado.cambio==1){
                          Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("FORMATO -> iso", "FORMATO.val := iso.lexval"));
                          this.$=$$[$0]
                        }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                          this.$ = new Nodo.default("FORMATO", "FORMATO -> iso");
                          this.$.AgregarHijo(new Nodo.default($$[$0], ""));
                        }
                        encoding="iso"
                      
break;
case 7:

                        ErrorL.Errores.add(new nodoError.Error("Sintáctico","Error sintáctico en la etiqueta: "+yytext,_$[$0-1].first_line, _$[$0-1].first_column,"XML"));
                      
break;
case 8:

                                      //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        this.$=new Raiz.default("NODOS","");
                                        this.$.agregarHijo($$[$0-1]);
                                        this.$.agregarHijo($$[$0]);
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("NODOS -> NODO NODOS", "NODOS.val := NODO.val + NODOS1.val"));
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let lnodos = new Nodo.default("NODOS","NODOS -> NODO NODOS");
                                        lnodos.AgregarHijo($$[$0-1]);
                                        lnodos.AgregarHijo($$[$0]);
                                        this.$=lnodos;
                                      }
                                    
break;
case 9:

                                      //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("NODOS -> EPSILO", "-"));
                                        this.$=[]
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("EPSILO", "NODOS -> EPSILO");
                                      }
                                    
break;
case 10:

                                      //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("NODO -> eInicio ID CONT", "NODO.val := ID.lexval + CONT.val"));
                                        let nombreInit=$$[$0-1];
                                        let atributos=$$[$0].atributos;
                                        let unica=$$[$0].cont2.unica;
                                        let elementos=$$[$0].cont2.final.nodos;
                                        let texto=$$[$0].cont2.final.texto;
                                        let nombreFin=$$[$0].cont2.final.id;
                                        if(atributos==undefined){atributos=null;}
                                        if(unica==undefined){unica:false;}
                                        if(elementos==undefined){elementos=null;}
                                        if(texto==undefined){texto="";}
                                        if(nombreFin==undefined){nombreFin=""}
                                        let elemento=new Objeto.default(nombreInit,nombreFin,texto,atributos,elementos,unica,_$[$0-2].first_line,_$[$0-2].first_column);
                                        let p4=new Raiz.default("ELEMENTO");
                                        p4.agregarHijo(elemento);
                                        this.$= p4;
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let nonodo = new Nodo.default("NODO","NODO -> eInicio ID CONT");
                                        nonodo.AgregarHijo(new Nodo.default($$[$0-2], ""));
                                        nonodo.AgregarHijo(new Nodo.default($$[$0-1], ""));
                                        nonodo.AgregarHijo($$[$0]);
                                        this.$=nonodo;
                                      }
                                    
break;
case 11:

                                      ErrorL.Errores.add(new nodoError.Error("Sintáctico","No se esperaba esta expresión: "+yytext,_$[$0-1].first_line, _$[$0-1].first_column,"XML"));
                                    
break;
case 12:

                                      //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("CONT -> ATRIBUTOS CONT2", "CONT.val := ATRIBUTOS.val"));
                                        this.$={atributos:$$[$0-1],cont2:$$[$0]}
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let c1 = new Nodo.default("CONT","CONT -> ATRIBUTOS CONT2");
                                        c1.AgregarHijo($$[$0-1]);
                                        c1.AgregarHijo($$[$0]);
                                        this.$=c1;
                                      }
                                    
break;
case 13:

                                      //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("CONT -> CONT2", "CONT.val := CONT2.val"));
                                        this.$={cont2:$$[$0]}
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$=new Nodo.default("CONT2", "CONT -> CONT2")
                                        this.$.AgregarHijo($$[$0]);
                                      }
                                    
break;
case 14:

                                      //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("CONT2 -> eFin FINAL", "CONT2.val := FINAL.val"));
                                        this.$= {final:$$[$0]}
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let C1 = new Nodo.default("CONT2","CONT2 -> eFin FINAL");
                                        C1.AgregarHijo(new Nodo.default($$[$0-1], ""));
                                        C1.AgregarHijo($$[$0]);
                                        this.$ = C1;
                                      }
                                    
break;
case 15:

                                      //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("CONT2 -> barra eFin", "CONT2.val := -"));
                                        this.$={unica:true}
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let C2 = new Nodo.default("CONT2","CONT2 -> barra eFin");
                                        C2.AgregarHijo(new Nodo.default($$[$0-1], ""));
                                        C2.AgregarHijo(new Nodo.default($$[$0], ""));
                                        this.$=C2;
                                      }
                                    
break;
case 16:

                        ErrorL.Errores.add(new nodoError.Error("Sintáctico","Se esperaba el fin de la etiqueta: "+yytext,_$[$0-1].first_line, _$[$0-1].first_column));
                      
break;
case 17:

                                      //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("FINAL -> OPCIONES eInicio barra ID eFin", "FINAL.val := OPCIONES.val ID.lexval"));
                                        this.$={nodos:$$[$0-4],id:$$[$0-1]}
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let f1 = new Nodo.default("FINAL","FINAL -> OPCIONES eInicio barra ID eFin");
                                        f1.AgregarHijo($$[$0-4]);
                                        f1.AgregarHijo(new Nodo.default($$[$0-3], ""));
                                        f1.AgregarHijo(new Nodo.default($$[$0-2], ""));
                                        f1.AgregarHijo(new Nodo.default($$[$0-1], ""));
                                        f1.AgregarHijo(new Nodo.default($$[$0], ""));
                                        this.$=f1;
                                      }
                                    
break;
case 18:

                                     //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("FINAL -> TEXTO eInicio barra ID eFin", "FINAL.val := TEXTO.val + ID.lexval"));
                                        this.$={texto:$$[$0-4],id:$$[$0-1]}
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let f2 = new Nodo.default("FINAL","FINAL -> TEXTO eInicio barra ID eFin");
                                        f2.AgregarHijo($$[$0-4]);
                                        f2.AgregarHijo(new Nodo.default($$[$0-3], ""));
                                        f2.AgregarHijo(new Nodo.default($$[$0-2], ""));
                                        f2.AgregarHijo(new Nodo.default($$[$0-1], ""));
                                        f2.AgregarHijo(new Nodo.default($$[$0], ""));
                                        this.$=f2;
                                      }
                                    
break;
case 19:

                                     //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("FINAL -> eInicio barra ID eFin", "FINAL.val := ID.lexval"));
                                        this.$={id: $$[$0-1]};
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let f3 = new Nodo.default("FINAL","FINAL -> eInicio barra ID eFin");
                                        f3.AgregarHijo(new Nodo.default($$[$0-3], ""));
                                        f3.AgregarHijo(new Nodo.default($$[$0-2], ""));
                                        f3.AgregarHijo(new Nodo.default($$[$0-1], ""));
                                        f3.AgregarHijo(new Nodo.default($$[$0], ""));
                                        this.$=f3;
                                      }
                                    
break;
case 20:

                                      //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("ATRIBUTOS -> ATRIBUTO ATRIBUTOS", "ATRIBUTOS.val := ATRIBUTO.val + ATRIBUTOS1.val"));
                                        this.$=new Raiz.default("ATRIBUTOS","");
                                        this.$.agregarHijo($$[$0-1]);
                                        this.$.agregarHijo($$[$0])
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let nodoatr = new Nodo.default("ATRIBUTOS","ATRIBUTOS -> ATRIBUTO ATRIBUTOS");
                                        nodoatr.AgregarHijo($$[$0]);
                                        nodoatr.AgregarHijo($$[$0-1]);
                                        this.$=nodoatr;
                                      }
                                    
break;
case 21:

                                     //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("ATRIBUTOS -> ATRIBUTO", "ATRIBUTOS.val := ATRIBUTOS.val"));
                                        this.$= new Raiz.default("ATRIBUTO");
                                        this.$.agregarHijo($$[$0]);
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$=new Nodo.default("ATRIBUTOS", "ATRIBUTOS -> ATRIBUTO");
                                        this.$.AgregarHijo($$[$0]);
                                      }
                                    
break;
case 22:

                                     //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("ATRIBUTO -> ID IGUAL CADENA", "ATRIBUTO.val := ID.lexval + igual.lexval + CADENA.lexval"));
                                        let atributo=new Atributo.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
                                        let p2=new Raiz.default("ATRIBUTO");
                                        p2.agregarHijo(atributo);
                                        this.$= p2;
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let atid = new Nodo.default("ATRIBUTO", "ATRIBUTO -> ID IGUAL CADENA");
                                        atid.AgregarHijo(new Nodo.default($$[$0-2], ""));
                                        atid.AgregarHijo(new Nodo.default($$[$0-1], ""));
                                        atid.AgregarHijo(new Nodo. default($$[$0], ""));
                                        this.$=atid;
                                      }
                                    
break;
case 23:

                                      //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("ATRIBUTO -> ID IGUAL CHAR", "ATRIBUTO.val := ID.lexval + igual.lexval + CHAR.lexval"));
                                        let atributo2=new Atributo.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
                                        let p3=new Raiz.default("ATRIBUTO");
                                        p3.agregarHijo(atributo2);
                                        this.$= p3;
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let atch = new Nodo.default("ATRIBUTO", "ATRIBUTO -> ID IGUAL CHAR");
                                        atch.AgregarHijo(new Nodo.default($$[$0-2], ""));
                                        atch.AgregarHijo(new Nodo.default($$[$0-1], ""));
                                        atch.AgregarHijo(new Nodo. default($$[$0], ""));
                                        this.$=atch;
                                      }
                                    
break;
case 24:

                                      //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("OPCIONES -> NODO OPCIONES", "OPCIONES.val := NODO.val + OPCIONES.val"));
                                        this.$=new Raiz.default("NODOS","");
                                        this.$.agregarHijo($$[$0-1]);
                                        this.$.agregarHijo($$[$0]);
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let nodoop = new Nodo.default("OPCIONES","OPCIONES -> NODO OPCIONES");
                                        nodoop.AgregarHijo($$[$0]);
                                        nodoop.AgregarHijo($$[$0-1]);
                                        this.$=nodoop;
                                      }
                                    
break;
case 25:

                                      //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("OPCIONES -> NODO", "OPCIONES.val := NODO.val"));
                                        this.$=$$[$0]
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$=new Nodo.default("OPCIONES", "OPCIONES -> NODO");
                                        this.$.AgregarHijo($$[$0])
                                      }
                                    
break;
case 26:

                                     //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> PALABRA TEXTOTEXTO -> PALABRA TEXTO", "TEXTO.val:= PALABRA.lexval + TEXTO1.val"));
                                        this.$=$$[$0-1]+" " +$$[$0]
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let Ltexto = new Nodo.default("TEXTO","TEXTO -> PALABRA TEXTO");
                                        Ltexto.AgregarHijo($$[$0-1]);
                                        Ltexto.AgregarHijo($$[$0]);
                                        this.$=Ltexto;
                                      }
                                   
break;
case 27:

                                    //ESTADO 1 ES PARA TS
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("TEXTO -> PALABRA", "TEXTO.val:= PALABRA.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        let Ltexto2 = new Nodo.default("TEXTO","TEXTO -> PALABRA");
                                        Ltexto2.AgregarHijo($$[$0]);
                                        this.$= Ltexto2;
                                      }
                                  
break;
case 28:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> ID", "PALABRA.val:= ID.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> ID");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 29:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> integer", "PALABRA.val:= integer.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> integer");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 30:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> double", "PALABRA.val:= double.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> double");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 31:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> CADENA", "PALABRA.val:= CADENA.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> CADENA");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 32:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> barra", "PALABRA.val:= barra.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> barra");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 33:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> inter", "PALABRA.val:= inter.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> inter");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 34:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> igual", "PALABRA.val:= igual.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> igual");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 35:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> utf", "PALABRA.val:= utf.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> utf");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 36:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> version", "PALABRA.val:= version.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> version");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 37:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> encoding", "PALABRA.val:= encodign.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> encoding");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 38:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> xml", "PALABRA.val:= xml.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> xml");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 39:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> caracter", "PALABRA.val:= caracter.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> caracter");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 40:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> mayorque", "PALABRA.val:= mayorque.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> mayorque");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 41:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> menorque", "PALABRA.val:= menorque.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> menorque");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 42:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> apostrofe", "PALABRA.val:= apostrofe.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> apostrofe");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 43:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> comilla", "PALABRA.val:= comilla.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> comilla");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 44:
 
                                      if(Estado.Estado.cambio==1){
                                        Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("PALABRA -> ampersand", "PALABRA.val:= ampersand.lexval"));
                                        this.$= $$[$0];
                                      }else if(Estado.Estado.cambio==2){//ESTADO DOS PARA CST
                                        this.$ = new Nodo.default("PALABRA", "PALABRA -> ampersand");
                                        this.$.AgregarHijo(new Nodo.default($$[$0], ""))
                                      }
                                    
break;
case 45:

                                      ErrorL.Errores.add(new nodoError.Error("Sintáctico","Caracter no permitido para texto de etiqueta: "+yytext,_$[$0-1].first_line, _$[$0-1].first_column,"XML"));
                                    
break;
}
},
table: [{2:[1,4],3:1,4:2,6:[1,3]},{1:[3]},{5:[1,5]},{7:[1,6]},{5:[1,7]},{1:[2,1]},{8:[1,8]},{5:[2,3]},{9:[1,9]},{10:[1,10]},{11:[1,11]},{12:[1,12]},{10:[1,13]},{2:[1,18],13:14,16:[1,15],17:[1,16],18:[1,17]},{7:[1,19]},{7:[2,4]},{7:[2,5]},{7:$V0},{5:[1,20]},{14:[1,21]},{7:[2,7]},{2:$V1,5:$V2,6:$V3,15:22,19:23},{5:[2,2]},{2:$V1,5:$V2,6:$V3,15:26,19:23},{20:$V4},{14:$V5},{5:[2,8]},{2:$V6,14:$V7,20:$V8,21:29,22:30,23:31,25:$V9,28:32},o($Va,[2,11]),o($Va,[2,10]),{2:$V6,14:$V7,23:37,25:$V9},o($Va,[2,13]),o($Vb,[2,21],{28:32,22:38,20:$V8}),{2:[1,45],6:[1,42],7:$Vc,8:$Vd,9:$Ve,10:$Vf,12:$Vg,16:$Vh,19:43,20:$Vi,24:39,25:$Vj,26:40,27:41,29:$Vk,31:44,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs},{14:[1,63]},{6:[1,64]},{10:[1,65]},o($Va,[2,12]),o($Vb,[2,20]),o($Va,[2,14]),{2:$V1,6:[1,66],19:67},{6:[1,68]},{20:$V4,25:[1,69]},o($V0,[2,25]),{2:[1,71],6:[2,27],7:$Vc,8:$Vd,9:$Ve,10:$Vf,12:$Vg,16:$Vh,20:$Vi,25:$Vj,27:70,29:$Vk,31:44,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs},{6:$Vt,14:$V5},o($Vu,[2,28]),o($Vu,[2,29]),o($Vu,[2,30]),o($Vu,[2,31]),o($Vu,[2,32]),o($Vu,[2,33]),o($Vu,[2,34]),o($Vu,[2,35]),o($Vu,[2,36]),o($Vu,[2,37]),o($Vu,[2,38]),o($Vu,[2,39]),o($Vu,[2,40]),o($Vu,[2,41]),o($Vu,[2,42]),o($Vu,[2,43]),o($Vu,[2,44]),o($Va,[2,15]),o($Va,[2,16]),{29:[1,73],30:[1,74]},{20:$V4,25:[1,75]},o($V0,[2,24]),{25:[1,76]},{20:[1,77]},{6:[2,26]},{6:$Vt},o($Vu,[2,45]),o($Vv,[2,22]),o($Vv,[2,23]),{20:[1,78]},{20:[1,79]},{14:[1,80]},{14:[1,81]},{14:[1,82]},o($Va,[2,19]),o($Va,[2,17]),o($Va,[2,18])],
defaultActions: {5:[2,1],7:[2,3],15:[2,4],16:[2,5],17:[2,6],20:[2,7],22:[2,2],26:[2,8],70:[2,26]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const Estado=require('../app/Clases/Models/Estado.js')
  const Gram = require('../app/Clases/Models/ListaGramatica.js')
  var NodoGram = require('../app/Clases/Models/NodoGramatica.js')
  var Nodo=require("../app/Clases/Models/Nodo.js")
  var Raiz=require("../app/Clases/Models/Raiz.js")
  var Atributo=require("../app/Clases/Models/Atributo.js")
  var Objeto=require("../app/Clases/Models/Objeto.js")
  var nodoError=require("../app/Clases/Models/Errores.js")
  var ErrorL=require("../app/Clases/Models/ListaError.js")
  encoding="";
  texto=""
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:this.begin("Comentario"); 
break;
case 2:
break;
case 3: this.popState();
break;
case 4:return 9
break;
case 5:return 12
break;
case 6:return 8
break;
case 7:return 36
break;
case 8:return 35
break;
case 9:return 39
break;
case 10:return 37
break;
case 11:return 38
break;
case 12:return 16
break;
case 13:return 17
break;
case 14:return 18
break;
case 15:return 6
break;
case 16:return 14
break;
case 17:return 25
break;
case 18:return 7
break;
case 19:return 10
break;
case 20:return 33;
break;
case 21:return 32;
break;
case 22:return 20;
break;
case 23:return 11;
break;
case 24:return 29;
break;
case 25:return 30;
break;
case 26:return 34
break;
case 27:return 5;
break;
case 28: ErrorL.Errores.add(new nodoError.Error("Léxico","Caracter "+yy_.yytext+
" no reconocido",yy_.yylineno,yy_.yylloc.first_column,"XML")) 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:<!--)/i,/^(?:[^"-->"]+)/i,/^(?:-->)/i,/^(?:version\b)/i,/^(?:encoding\b)/i,/^(?:xml\b)/i,/^(?:&lt;)/i,/^(?:&gt;)/i,/^(?:&amp;)/i,/^(?:&apos;)/i,/^(?:&quot;)/i,/^(?:"UTF-8")/i,/^(?:"ASCII")/i,/^(?:"ISO-8859-1")/i,/^(?:<)/i,/^(?:>)/i,/^(?:\/)/i,/^(?:\?)/i,/^(?:=)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z]|_)+(_|\.|-|:|á|é|í|ó||[0-9A-Za-z]||)*)/i,/^(?:[\"]([0-9]+\.[0-9]+)["\"])/i,/^(?:[\"]([^\"\n]|(\\")|(\\'))*[\"])/i,/^(?:[\'][^\'\n]*[\'])/i,/^(?:[^<>&]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"Comentario":{"rules":[2,3],"inclusive":false},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analyzer;
exports.Parser = Analyzer.Parser;
exports.parse = function () { return Analyzer.parse.apply(Analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}