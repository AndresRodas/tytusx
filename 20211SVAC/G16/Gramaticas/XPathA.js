/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XPathA = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[5,6],$V3=[5,6,9,11],$V4=[1,11],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[1,20],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,26],$Vf=[1,27],$Vg=[1,28],$Vh=[1,29],$Vi=[1,30],$Vj=[1,31],$Vk=[1,32],$Vl=[1,33],$Vm=[1,34],$Vn=[1,35],$Vo=[1,36],$Vp=[1,37],$Vq=[1,38],$Vr=[1,39],$Vs=[1,40],$Vt=[1,41],$Vu=[1,42],$Vv=[5,6,9,11,55,56,57,58,59,60,61,62,63,64,65,66,67],$Vw=[5,6,9,11,19,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,55,56,57,58,59,60,61,62,63,64,65,66,67],$Vx=[1,46],$Vy=[1,66],$Vz=[1,49],$VA=[1,47],$VB=[1,48],$VC=[1,50],$VD=[1,51],$VE=[1,52],$VF=[1,53],$VG=[1,54],$VH=[1,55],$VI=[1,56],$VJ=[1,57],$VK=[1,58],$VL=[1,59],$VM=[1,60],$VN=[1,61],$VO=[1,62],$VP=[1,63],$VQ=[1,64],$VR=[1,65],$VS=[1,76],$VT=[1,75],$VU=[1,74],$VV=[1,72],$VW=[5,6,9,11,19,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,55,56,57,58,59,60,61,62,63,64,65,66,67],$VX=[5,6,11,22,23,24,27,28,29,30,31,32,33,34,42,55,56,57,58,59,60,61,62,63,64,65,66,67],$VY=[5,6,11,19,22,23,24,25,27,28,29,30,31,32,33,34,42,55,56,57,58,59,60,61,62,63,64,65,66,67],$VZ=[5,6,11,22,27,28,42,55,56,57,58,59,60,61,62,63,64,65,66,67],$V_=[5,6,11,22,27,28,29,30,42,55,56,57,58,59,60,61,62,63,64,65,66,67],$V$=[5,6,11,22,27,28,29,30,31,32,33,34,42,55,56,57,58,59,60,61,62,63,64,65,66,67],$V01=[5,6,11,22,42,55,56,57,58,59,60,61,62,63,64,65,66,67],$V11=[1,108],$V21=[5,6,55,56,57,58,59,60,61,62,63,64,65,66,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"MULTIPLE":4,"EOF":5,"|":6,"INICIO":7,"L_CONTENIDO":8,"/":9,"CONTENIDO":10,"dobled":11,"id":12,"PREDICADO":13,"FUNCIONES":14,"EXPRESION":15,"EJES":16,"dosp":17,"punto":18,"*":19,"@":20,"[":21,"]":22,"+":23,"-":24,"div":25,"mod":26,"or":27,"and":28,"igual":29,"dif":30,"menor":31,"mayor":32,"menori":33,"mayori":34,"eq":35,"ne":36,"lt":37,"le":38,"gt":39,"ge":40,"(":41,")":42,"cadena":43,"decimal":44,"entero":45,"cadenas":46,"FUNCION":47,"rlast":48,"rposition":49,"rnode":50,"rtext":51,"EJE":52,"dospuntos":53,"CONTEJES":54,"rancestros":55,"rancestro":56,"ratributo":57,"rchild":58,"rdescenos":59,"rdescen":60,"rseguidorh":61,"rseguidor":62,"rnombres":63,"rparent":64,"rprecedings":65,"rpreceding":66,"rself":67,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"|",9:"/",11:"dobled",12:"id",17:"dosp",18:"punto",19:"*",20:"@",21:"[",22:"]",23:"+",24:"-",25:"div",26:"mod",27:"or",28:"and",29:"igual",30:"dif",31:"menor",32:"mayor",33:"menori",34:"mayori",35:"eq",36:"ne",37:"lt",38:"le",39:"gt",40:"ge",41:"(",42:")",43:"cadena",44:"decimal",45:"entero",46:"cadenas",48:"rlast",49:"rposition",50:"rnode",51:"rtext",53:"dospuntos",55:"rancestros",56:"rancestro",57:"ratributo",58:"rchild",59:"rdescenos",60:"rdescen",61:"rseguidorh",62:"rseguidor",63:"rnombres",64:"rparent",65:"rprecedings",66:"rpreceding",67:"rself"},
productions_: [0,[3,2],[4,3],[4,1],[7,2],[7,1],[8,2],[8,2],[10,1],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,2],[10,2],[13,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[14,3],[47,1],[47,1],[47,1],[47,1],[16,5],[16,4],[54,1],[54,2],[54,2],[54,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return "OK" 
break;
case 2: case 3: case 10: case 11: case 12:
 this.$ = $$[$0] 
break;
case 4:
 this.$=$$[$0-1] 
break;
case 5:
 this.$=$$[$0] 
break;
case 6:
 this.$ = new Indice.Indice($$[$0]); TablaSim.TablaSimbolosXP.add(this.$)
break;
case 7:
 this.$ = new DIndice.DobleIndice($$[$0]); TablaSim.TablaSimbolosXP.add(this.$)
break;
case 8:
 this.$ = new Expresion.Expresion($$[$0], 'nan', 'id');
break;
case 9: case 58:
 this.$ = new Expresion.Expresion($$[$0-1], $$[$0], 'IdPredicado') 
break;
case 13:
 this.$ = new Expresion.Expresion($$[$0], 'nan', 'dospuntos') 
break;
case 14:
 this.$ = new Expresion.Expresion($$[$0], 'nan', 'punto') 
break;
case 15:
 this.$ = new Expresion.Expresion($$[$0], 'nan', 'aterisco') 
break;
case 16:
 this.$ = new Expresion.Expresion($$[$0-1], $$[$0], 'atributoT') 
break;
case 17:
 this.$ = new Expresion.Expresion($$[$0-1], $$[$0], 'atributoid')
break;
case 18:
this.$ = new Predicado.Predicado($$[$0-1])
break;
case 19:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], '+')
break;
case 20:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], '-')
break;
case 21:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], '*')
break;
case 22:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'div')
break;
case 23:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'mod')
break;
case 24:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'or')
break;
case 25:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'and')
break;
case 26:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'igual')
break;
case 27:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'noigual')
break;
case 28:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'menor')
break;
case 29:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'mayor')
break;
case 30:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'menori')
break;
case 31:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'mayori')
break;
case 32:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'eq')
break;
case 33:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'ne')
break;
case 34:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'lt')
break;
case 35:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'le')
break;
case 36:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'gt')
break;
case 37:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'ge')
break;
case 38:
this.$= new Expresion.Expresion($$[$0-2], $$[$0], 'otro')
break;
case 39:
this.$= new Expresion.Expresion($$[$0-1], "nan", 'expresion')
break;
case 40:
this.$= new Expresion.Expresion($$[$0-1], $$[$0], 'atributoid')
break;
case 41:
this.$= new Expresion.Expresion($$[$0-1], $$[$0], 'atributoT')
break;
case 42:
this.$= $$[$0]
break;
case 43:
this.$= new Expresion.Expresion($$[$0], 'nan', 'cadena')
break;
case 44:
this.$= new Expresion.Expresion($$[$0], 'nan', 'decimal')
break;
case 45:
this.$= new Expresion.Expresion($$[$0], 'nan', 'entero')
break;
case 46:
this.$= new Expresion.Expresion($$[$0], 'nan', 'punto')
break;
case 47:
this.$= new Expresion.Expresion($$[$0], 'nan', 'dosp')
break;
case 48:
this.$= new Expresion.Expresion($$[$0], 'nan', 'id')
break;
case 49:
this.$= new Expresion.Expresion($$[$0], 'nan', 'cadenas')
break;
case 50:
this.$=$$[$0-2]
break;
case 51:
this.$= new Funcion.Funciones("last");
break;
case 52:
this.$= new Funcion.Funciones("position");
break;
case 53:
this.$= new Funcion.Funciones("node");
break;
case 54:
this.$= new Funcion.Funciones("text");
break;
case 55: case 56:
 this.$ = new Axes.Axes($$[$0-3], $$[$0]) 
break;
case 57:
 this.$= new Expresion.Expresion($$[$0], 'nan', 'id') 
break;
case 59:
  
break;
case 61:
this.$="ancestros"
break;
case 62:
this.$="ancestro"
break;
case 63:
this.$="atributo"
break;
case 64:
this.$="child"
break;
case 65:
this.$="descenos"
break;
case 66:
this.$="descen"
break;
case 67:
this.$="seguidorh"
break;
case 68:
this.$="seguidor"
break;
case 69:
this.$="nombre"
break;
case 70:
this.$="parent"
break;
case 71:
this.$="precedencias"
break;
case 72:
this.$="precedencia"
break;
case 73:
this.$="self"
break;
}
},
table: [{3:1,4:2,7:3,8:4,9:$V0,11:$V1},{1:[3]},{5:[1,7],6:[1,8]},o($V2,[2,3],{8:9,9:$V0,11:$V1}),o($V3,[2,5]),{10:10,12:$V4,14:12,15:13,16:14,17:$V5,18:$V6,19:$V7,20:$V8,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:25,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{10:43,12:$V4,14:12,15:13,16:14,17:$V5,18:$V6,19:$V7,20:$V8,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:25,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{1:[2,1]},{7:44,8:4,9:$V0,11:$V1},o($V3,[2,4]),o($Vv,[2,6]),o($Vw,[2,8],{13:45,21:$Vx}),o($Vw,[2,10]),o([5,6,11,55,56,57,58,59,60,61,62,63,64,65,66,67],[2,11],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,28:$VF,29:$VG,30:$VH,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V3,[2,12],{52:67,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($Vw,[2,13]),o($Vw,[2,14]),o($Vv,[2,15]),{12:[1,69],19:[1,68]},{41:[1,70]},{12:$VS,14:73,15:71,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},o($VW,[2,43]),o($VW,[2,44]),o($VW,[2,45]),o($VW,[2,49]),{53:[1,77]},{41:[2,51]},{41:[2,52]},{41:[2,53]},{41:[2,54]},{53:[2,61]},{53:[2,62]},{53:[2,63]},{53:[2,64]},{53:[2,65]},{53:[2,66]},{53:[2,67]},{53:[2,68]},{53:[2,69]},{53:[2,70]},{53:[2,71]},{53:[2,72]},{53:[2,73]},o($Vv,[2,7]),o($V2,[2,2],{8:9,9:$V0,11:$V1}),o($Vv,[2,9]),{12:$VS,14:73,15:78,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:79,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:80,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:81,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:82,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:83,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:84,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:85,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:86,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:87,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:88,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:89,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:90,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:91,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:92,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:93,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:94,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:95,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:96,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:97,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{12:$VS,14:73,15:98,17:$VT,18:$VU,20:$VV,41:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:19,48:$Ve,49:$Vf,50:$Vg,51:$Vh},{53:[1,99]},o($Vw,[2,16]),o($Vw,[2,17]),{42:[1,100]},{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,28:$VF,29:$VG,30:$VH,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,42:[1,101]},{12:[1,102],19:[1,103]},o($VW,[2,42]),o($VW,[2,46]),o($VW,[2,47]),o($VW,[2,48]),{53:[1,104]},{9:$Vy,19:$Vz,22:[1,105],23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,28:$VF,29:$VG,30:$VH,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR},o($VX,[2,19],{9:$Vy,19:$Vz,25:$VC,26:$VD,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($VX,[2,20],{9:$Vy,19:$Vz,25:$VC,26:$VD,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($VY,[2,21],{9:$Vy,26:$VD,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($VY,[2,22],{9:$Vy,26:$VD,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o([5,6,11,19,22,23,24,25,26,27,28,29,30,31,32,33,34,42,55,56,57,58,59,60,61,62,63,64,65,66,67],[2,23],{9:$Vy,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($VZ,[2,24],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,29:$VG,30:$VH,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($VZ,[2,25],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,29:$VG,30:$VH,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V_,[2,26],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V_,[2,27],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V$,[2,28],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V$,[2,29],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V$,[2,30],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V$,[2,31],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V01,[2,32],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,28:$VF,29:$VG,30:$VH,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V01,[2,33],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,28:$VF,29:$VG,30:$VH,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V01,[2,34],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,28:$VF,29:$VG,30:$VH,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V01,[2,35],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,28:$VF,29:$VG,30:$VH,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V01,[2,36],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,28:$VF,29:$VG,30:$VH,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V01,[2,37],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,28:$VF,29:$VG,30:$VH,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),o($V01,[2,38],{9:$Vy,19:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,28:$VF,29:$VG,30:$VH,31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR}),{53:[1,106]},o($VW,[2,50]),o($VW,[2,39]),o($VW,[2,40]),o($VW,[2,41]),{8:109,9:$V0,11:$V1,12:$V11,54:107},o($Vv,[2,18]),{8:109,9:$V0,11:$V1,12:$V11,54:110},o($V21,[2,56],{8:111,9:$V0,11:$V1}),o($Vv,[2,57],{13:112,21:$Vx}),o($Vv,[2,60]),o($V21,[2,55],{8:111,9:$V0,11:$V1}),o($Vv,[2,59]),o($Vv,[2,58])],
defaultActions: {7:[2,1],26:[2,51],27:[2,52],28:[2,53],29:[2,54],30:[2,61],31:[2,62],32:[2,63],33:[2,64],34:[2,65],35:[2,66],36:[2,67],37:[2,68],38:[2,69],39:[2,70],40:[2,71],41:[2,72],42:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const TablaSim = require('../app/Clases/XPath/TablaSimbolosXP.js')
	//Para ponerlo sería Gram.ReporteGramatical.add( new NodoGram.NodoGramatica("S -> INIT EOF", "S.val := INIT.val"));
	var DIndice = require("../app/Clases/XPath/DobleIndice.js")
	var Indice =  require("../app/Clases/XPath/Indice.js")
	var Expresion =  require("../app/Clases/XPath/Expresion.js")
	var Axes = require("../app/Clases/XPath/Axes.js")
	var Funcion = require("../app/Clases/XPath/Funciones.js")
	var Predicado = require("../app/Clases/XPath/Predicado.js")
	var Instruccion = require("../app/Clases/XPath/NodoAbs.js")
	//Nodo
	var Nodo=require("../app/Clases/Models/Nodo.js")
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 11;
break;
case 1:return 9;
break;
case 2:return 17;
break;
case 3:return 18;
break;
case 4:return 20;
break;
case 5:return 6;
break;
case 6:return 23;
break;
case 7:return 24;
break;
case 8:return 19;
break;
case 9:return 25;
break;
case 10:return 29;
break;
case 11:return 30;
break;
case 12:return 33;
break;
case 13:return 31;
break;
case 14:return 34;
break;
case 15:return 32;
break;
case 16:return 27;
break;
case 17:return 28;
break;
case 18:return 26;
break;
case 19:return 21;
break;
case 20:return 22;
break;
case 21:return 41;
break;
case 22:return 42;
break;
case 23:return 53;
break;
case 24:return 50;
break;
case 25:return 51;
break;
case 26:return 48;
break;
case 27:return 49;
break;
case 28:return 55;
break;
case 29:return 56;
break;
case 30:return 57;
break;
case 31:return 58;
break;
case 32:return 59;
break;
case 33:return 60;
break;
case 34:return 61;
break;
case 35:return 62;
break;
case 36:return 63;
break;
case 37:return 64;
break;
case 38:return 65;
break;
case 39:return 66;
break;
case 40:return 67;
break;
case 41:return 35;
break;
case 42:return 36;
break;
case 43:return 37;
break;
case 44:return 38;
break;
case 45:return 39;
break;
case 46:return 40;
break;
case 47:/*Se ignoran*/
break;
case 48:return 43;
break;
case 49:return 46;
break;
case 50:return 44;
break;
case 51:return 45;
break;
case 52:return 12;
break;
case 53:return 5;
break;
case 54: ErrorL.Errores.add(new nodoError.Error("Léxico","Caracter "+yy_.yytext+
" no reconocido",yy_.yylineno,yy_.yylloc.first_column,"XPath")) 
break;
}
},
rules: [/^(?:\/\/)/,/^(?:\/)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:@)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mon\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:[ \n\r\t]+)/,/^(?:[\']([^\n])*[\'])/,/^(?:[\"]([^\n\"])*[\"])/,/^(?:[-]?[0-9]+[.][0-9]+)/,/^(?:[-]?[0-9]+)/,/^(?:([a-zA-Z]|_)+(_|\.|-|:|Á|É|Í|Ó|Ú|á|é|í|ó|ú|ñ|Ñ|[0-9A-Za-z])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XPathA;
exports.Parser = XPathA.Parser;
exports.parse = function () { return XPathA.parse.apply(XPathA, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}