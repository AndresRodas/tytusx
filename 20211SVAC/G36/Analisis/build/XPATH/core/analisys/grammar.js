/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,47],$V1=[1,5],$V2=[1,6],$V3=[1,36],$V4=[1,37],$V5=[1,38],$V6=[1,39],$V7=[1,40],$V8=[1,41],$V9=[1,42],$Va=[1,43],$Vb=[1,44],$Vc=[1,28],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,46],$Vj=[1,14],$Vk=[1,15],$Vl=[1,16],$Vm=[1,17],$Vn=[1,18],$Vo=[1,19],$Vp=[1,20],$Vq=[1,21],$Vr=[1,22],$Vs=[1,23],$Vt=[1,24],$Vu=[1,49],$Vv=[1,50],$Vw=[1,51],$Vx=[1,52],$Vy=[1,53],$Vz=[1,54],$VA=[1,55],$VB=[1,56],$VC=[1,57],$VD=[1,58],$VE=[1,59],$VF=[1,60],$VG=[1,61],$VH=[1,62],$VI=[5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,58,60],$VJ=[5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,58,60],$VK=[1,70],$VL=[5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,57,58,60],$VM=[20,38,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,59,61,62,63,64,65,66,67,68,69,70],$VN=[5,7,8,11,12,13,14,15,16,17,18,58,60],$VO=[5,7,8,9,10,11,12,13,14,15,16,17,18,20,58,60],$VP=[5,11,12,13,14,15,16,17,18,58,60],$VQ=[5,17,18,58,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Body":4,"EOF":5,"Expr":6,"tkSuma":7,"tkResta":8,"tkDiv":9,"tkMod":10,"tkIgual":11,"tkNotIgual":12,"tkMenor":13,"tkMayor":14,"tkMayorIgual":15,"tkMenorIgual":16,"tkAnd":17,"tkOr":18,"tkUnion":19,"tkMul":20,"PathExpr":21,"tkRoot":22,"RelativePathExpr":23,"tkCurrentNode":24,"StepTemp":25,"NodeType":26,"StepExpr":27,"FilterExpr":28,"AxisStep":29,"AxisOption":30,"PredicateList":31,"ReverseStep":32,"ForwardStep":33,"ForwardAxis":34,"tkAccesPoints":35,"NodeTest":36,"AbbrevForwardStep":37,"tkChild":38,"tkDescendant":39,"tkAttribute":40,"tkSelf":41,"tkDescendantOS":42,"tkFollowSibling":43,"tkFollowing":44,"tkNamespace":45,"tkSelectAtrib":46,"ReverseAxis":47,"tkPAbrev":48,"tkParent":49,"tkAncestorOS":50,"tkPrecedSibling":51,"tkPreced":52,"tkAncestor":53,"tkId":54,"PrimaryExpr":55,"Predicate":56,"tkBraIzq":57,"tkBraDer":58,"tkParIzq":59,"tkParDer":60,"tkEntero":61,"tkDecimal":62,"tkCadena":63,"tkTrue":64,"tkFalse":65,"tkContexItemExpr":66,"tkLast":67,"tkText":68,"tkPosition":69,"tkNode":70,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tkSuma",8:"tkResta",9:"tkDiv",10:"tkMod",11:"tkIgual",12:"tkNotIgual",13:"tkMenor",14:"tkMayor",15:"tkMayorIgual",16:"tkMenorIgual",17:"tkAnd",18:"tkOr",19:"tkUnion",20:"tkMul",22:"tkRoot",24:"tkCurrentNode",35:"tkAccesPoints",38:"tkChild",39:"tkDescendant",40:"tkAttribute",41:"tkSelf",42:"tkDescendantOS",43:"tkFollowSibling",44:"tkFollowing",45:"tkNamespace",46:"tkSelectAtrib",48:"tkPAbrev",49:"tkParent",50:"tkAncestorOS",51:"tkPrecedSibling",52:"tkPreced",53:"tkAncestor",54:"tkId",57:"tkBraIzq",58:"tkBraDer",59:"tkParIzq",60:"tkParDer",61:"tkEntero",62:"tkDecimal",63:"tkCadena",64:"tkTrue",65:"tkFalse",66:"tkContexItemExpr",67:"tkLast",68:"tkText",69:"tkPosition",70:"tkNode"},
productions_: [0,[3,2],[4,1],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,1],[21,2],[21,2],[21,1],[23,1],[25,3],[25,1],[26,1],[26,1],[27,1],[27,1],[29,2],[29,1],[30,1],[30,1],[33,3],[33,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[37,2],[37,1],[32,3],[32,1],[47,1],[47,1],[47,1],[47,1],[47,1],[36,1],[36,1],[28,1],[28,2],[31,2],[31,1],[56,3],[55,3],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,3],[55,3],[55,3],[55,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  this.$= new Ast($$[$0-1]);   this.$.errores = errorList; return  this.$.execute(tablaSimbolos);    
break;
case 2:
 this.$ = $$[$0];  
break;
case 3: case 4:
 this.$= new Additive($$[$0-1],$$[$0-2],$$[$0],errorList,yylineno, _$[$0-1].first_column ); 
break;
case 5:
 this.$= new Div($$[$0-2],$$[$0],errorList,yylineno, _$[$0-1].first_column );         
break;
case 6:
 this.$= new Mod($$[$0-2],$$[$0],errorList,yylineno, _$[$0-1].first_column );         
break;
case 7:
 this.$= new Equal($$[$0-2],$$[$0],errorList,yylineno,_$[$0-1].first_column);         
break;
case 8:
 this.$ = new NotEqual($$[$0-2],$$[$0],errorList,yylineno,_$[$0-1].first_column);     
break;
case 9:
 this.$ = new LessThan($$[$0-2],$$[$0],errorList,yylineno,_$[$0-1].first_column);     
break;
case 10:
 this.$ = new GreatThan($$[$0-2],$$[$0],errorList,yylineno,_$[$0-1].first_column);    
break;
case 11:
 this.$ = new GEThan($$[$0-2],$$[$0],errorList,yylineno,_$[$0-1].first_column);       
break;
case 12:
 this.$ = new LEThan($$[$0-2],$$[$0],errorList,yylineno,_$[$0-1].first_column);       
break;
case 13:
 this.$ = new And($$[$0-2],$$[$0],errorList,yylineno,_$[$0-1].first_column);          
break;
case 14:
 this.$ = new Or($$[$0-2],$$[$0],errorList,yylineno,_$[$0-1].first_column);           
break;
case 15:
 this.$ = $$[$0-2]; 
break;
case 16:
 this.$ = new Mul($$[$0-2],$$[$0],errorList,yylineno,_$[$0-1].first_column);   
break;
case 17:
 this.$=$$[$0];   
break;
case 18:
  this.$ =  new NodoCurrent(undefined,$$[$0],errorList,yylineno,_$[$0-1].first_column);     
break;
case 19:
  this.$ =  new NodoRaiz($$[$0],errorList, yylineno,_$[$0-1].first_column);                 
break;
case 20: case 21:
  this.$=$$[$0]; 
break;
case 22:
 this.$ =  new NodoCurrent($$[$0-2],$$[$0-1],errorList,yylineno,_$[$0-1].first_column);         
break;
case 23: case 24: case 25:
 this.$=$$[$0];  
break;
case 26: case 27:
   this.$=$$[$0];    
break;
case 28: case 29: case 42:
             
break;
case 30:
            
break;
case 31:
  this.$=$$[$0];    
break;
case 32:
              
break;
case 33:
  this.$ = $$[$0];    
break;
case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41:
 this.$=1;  
break;
case 43:
  this.$=$$[$0];     
break;
case 44: case 45: case 52:
       
break;
case 46: case 47: case 48: case 49: case 50:
  this.$=1; 
break;
case 51:
   this.$= new Literal('id', $$[$0], yylineno, _$[$0].first_column );   
break;
case 53:
 this.$=$$[$0]; 
break;
case 54:
  
break;
case 55: case 56: case 64: case 65: case 66: case 67: case 68:
     
break;
case 57:
 this.$=$$[$0-1];   
break;
case 58:
 this.$= $$[$0-1];   
break;
case 59:
 this.$ = new  Literal('int', parseInt($$[$0]), yylineno, _$[$0].first_column );            
break;
case 60:
 this.$ = new  Literal('decimal', $$[$0], yylineno, _$[$0].first_column);                   
break;
case 61:
 this.$ = new  Literal('cadena', $$[$0], yylineno, _$[$0].first_column );                   
break;
case 62: case 63:
 this.$ = new  Literal('boolean', $$[$0], yylineno, _$[$0].first_column );                  
break;
}
},
table: [{3:1,4:2,6:3,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{1:[3]},{5:[1,48]},{5:[2,2],7:$Vu,8:$Vv,9:$Vw,10:$Vx,11:$Vy,12:$Vz,13:$VA,14:$VB,15:$VC,16:$VD,17:$VE,18:$VF,19:$VG,20:$VH},o($VI,[2,17]),{20:$V0,23:63,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{20:$V0,23:64,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},o($VI,[2,20]),o($VI,[2,21],{26:65,22:[1,66],24:[1,67]}),o($VJ,[2,23]),o($VJ,[2,26]),o($VJ,[2,27]),o($VJ,[2,53],{31:68,56:69,57:$VK}),o($VJ,[2,29],{56:69,31:71,57:$VK}),{6:72,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},o($VL,[2,59]),o($VL,[2,60]),o($VL,[2,61]),o($VL,[2,62]),o($VL,[2,63]),o($VL,[2,64]),{59:[1,73]},{59:[1,74]},{59:[1,75]},{59:[1,76]},o($VL,[2,30]),o($VL,[2,31]),{35:[1,77]},o($VL,[2,45]),{35:[1,78]},o($VL,[2,33]),{35:[2,46]},{35:[2,47]},{35:[2,48]},{35:[2,49]},{35:[2,50]},{35:[2,34]},{35:[2,35]},{35:[2,36]},{35:[2,37]},{35:[2,38]},{35:[2,39]},{35:[2,40]},{35:[2,41]},{20:$V0,36:79,54:$Vi},o($VL,[2,43]),o($VL,[2,51]),o($VL,[2,52]),{1:[2,1]},{6:80,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{6:81,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{6:82,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{6:83,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{6:84,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{6:85,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{6:86,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{6:87,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{6:88,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{6:89,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{6:90,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{6:91,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{6:92,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{6:93,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},o($VI,[2,18]),o($VI,[2,19]),{20:$V0,27:94,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},o($VM,[2,24]),o($VM,[2,25]),o($VJ,[2,54],{56:95,57:$VK}),o($VL,[2,56]),{6:96,20:$V0,21:4,22:$V1,23:7,24:$V2,25:8,27:9,28:10,29:11,30:13,32:25,33:26,34:29,36:45,37:30,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,47:27,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:12,59:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},o($VJ,[2,28],{56:95,57:$VK}),{7:$Vu,8:$Vv,9:$Vw,10:$Vx,11:$Vy,12:$Vz,13:$VA,14:$VB,15:$VC,16:$VD,17:$VE,18:$VF,19:$VG,20:$VH,60:[1,97]},{60:[1,98]},{60:[1,99]},{60:[1,100]},{60:[1,101]},{20:$V0,36:102,54:$Vi},{20:$V0,36:103,54:$Vi},o($VL,[2,42]),o($VN,[2,3],{9:$Vw,10:$Vx,19:$VG,20:$VH}),o($VN,[2,4],{9:$Vw,10:$Vx,19:$VG,20:$VH}),o($VO,[2,5],{19:$VG}),o($VO,[2,6],{19:$VG}),o($VP,[2,7],{7:$Vu,8:$Vv,9:$Vw,10:$Vx,19:$VG,20:$VH}),o($VP,[2,8],{7:$Vu,8:$Vv,9:$Vw,10:$Vx,19:$VG,20:$VH}),o($VP,[2,9],{7:$Vu,8:$Vv,9:$Vw,10:$Vx,19:$VG,20:$VH}),o($VP,[2,10],{7:$Vu,8:$Vv,9:$Vw,10:$Vx,19:$VG,20:$VH}),o($VP,[2,11],{7:$Vu,8:$Vv,9:$Vw,10:$Vx,19:$VG,20:$VH}),o($VP,[2,12],{7:$Vu,8:$Vv,9:$Vw,10:$Vx,19:$VG,20:$VH}),o($VQ,[2,13],{7:$Vu,8:$Vv,9:$Vw,10:$Vx,11:$Vy,12:$Vz,13:$VA,14:$VB,15:$VC,16:$VD,19:$VG,20:$VH}),o($VQ,[2,14],{7:$Vu,8:$Vv,9:$Vw,10:$Vx,11:$Vy,12:$Vz,13:$VA,14:$VB,15:$VC,16:$VD,19:$VG,20:$VH}),o($VI,[2,15]),o($VO,[2,16],{19:$VG}),o($VJ,[2,22]),o($VL,[2,55]),{7:$Vu,8:$Vv,9:$Vw,10:$Vx,11:$Vy,12:$Vz,13:$VA,14:$VB,15:$VC,16:$VD,17:$VE,18:$VF,19:$VG,20:$VH,58:[1,104]},o($VL,[2,58]),o($VL,[2,65]),o($VL,[2,66]),o($VL,[2,67]),o($VL,[2,68]),o($VL,[2,44]),o($VL,[2,32]),o($VL,[2,57])],
defaultActions: {31:[2,46],32:[2,47],33:[2,48],34:[2,49],35:[2,50],36:[2,34],37:[2,35],38:[2,36],39:[2,37],40:[2,38],41:[2,39],42:[2,40],43:[2,41],48:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


     const Ast = require('../AST/ast.js');
     const Literal = require('../Literal/literal.js');
     const NodoRaiz = require('../nodeAcces/nodoRaiz.js');
     const NodoCurrent = require('../nodeAcces/nodoRaiz.js');
     //op
     const Additive = require('../operacion/additive.js');
     const Div = require('../operacion/div.js');
     const Mod = require('../operacion/mod.js');
     const Equal = require('../relacionales/equal.js');
     const NotEqual = require('../relacionales/notEqual.js');
     const LessThan = require('../relacionales/lessThan.js');
     const GreatThan = require('../relacionales/greatThan.js');
     const LEThan    = require('../relacionales/lEThan.js');
     const GEThan    = require('../relacionales/gEthan.js');
     const And    = require('../logicas/and.js');
     const Or    = require('../logicas/or.js');
     const Mul   = require('../operacion/mult.js');
     
     //table
    const tablaSimbolos = require('./prueba.js');

    var simbolos    = [];
    var errorList   = [];
    let tokenList   = [];
    var contadorNodos = 0; 


    function insertToken(fila, column , tipo , descrip){
        tokenList.push({"fila": fila, "column": column, "tipo": tipo, "descripcion": descrip  });      
    }
    function insertError(tipo, fila, columna, descrip){
        errorList.push({"tipo": tipo , "fila": fila , "columna": columna , "descripcion": descrip});    
    }    
    function yyerror(val) {  
        console.log("Error!", val); 
         } 

    function insertToken(tok){
        tokenList.push({"valor": tok});

        
    }     
 

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return      'tkAncestorOS'
break;
case 1:return      'tkDescendantOS'
break;
case 2:return      'tkPrecedSibling'
break;
case 3:return      'tkFollowSibling'   
break;
case 4:return      'tkAncestor'
break;
case 5:return      'tkAttribute'
break;
case 6:return      'tkChild'
break;
case 7:return      'tkDescendant'         
break;
case 8:return      'tkFollowing'
break;
case 9:return      'tkNamespace'
break;
case 10:return      'tkParent'
break;
case 11:return      'tkPreced'
break;
case 12:return      'tkSelf'
break;
case 13:return      'tkLast'
break;
case 14:return      'tkNode'
break;
case 15:return      'tkPosition' 
break;
case 16:return      'tkText'
break;
case 17:return      'tkOr'
break;
case 18:return      'tkDiv'
break;
case 19:return      'tkAnd'
break;
case 20:return      'tkMod' 
break;
case 21:return      'tkFalse'
break;
case 22:return      'tkTrue'    
break;
case 23:return      'tkAccesPoints' 
break;
case 24:return      'tkAnd'
break;
case 25:return       'tkUnion'
break;
case 26:return      'tkMayorIgual'
break;
case 27:return      'tkMenorIgual'
break;
case 28:return      'tkMayor'
break;
case 29:return      'tkMenor'
break;
case 30:return      'tkIgual'
break;
case 31:return      'tkNotIgual'
break;
case 32:return      'tkMul'
break;
case 33:return      'tkSuma'
break;
case 34:return      'tkResta'
break;
case 35:return  'tkComa'
break;
case 36:return  'tkLlaveIzq'
break;
case 37:return  'tkLlaveDer' 
break;
case 38:return  'tkParIzq'
break;
case 39:return  'tkParDer'
break;
case 40:return  'tkBraIzq'
break;
case 41:return  'tkBraDer' 
break;
case 42:return  'tkPAbrev'  
break;
case 43:return  'tkContexItemExpr'
break;
case 44:return  'tkSelectAtrib'
break;
case 45:return  'tkCurrentNode' 
break;
case 46:return  'tkRoot'   
break;
case 47:  return 61;   
break;
case 48:  return 62;  
break;
case 49:  return 54;       
break;
case 50:  return 63;   
break;
case 51:  /*Los Ignoramos*/   
break;
case 52:  return 5;   
break;
case 53:insertError('Lexico',yy_.yylineno,'-', `No se esperaba este caracter ${yy_.yytext}`);
break;
}
},
rules: [/^(?:ancestor-or-self\b)/,/^(?:descendant-or-self\b)/,/^(?:preceding-sibling\b)/,/^(?:following-sibling\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:last\b)/,/^(?:node\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?:or\b)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:::)/,/^(?:&&)/,/^(?:[|])/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:!=)/,/^(?:\*)/,/^(?:\+)/,/^(?:-)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:[.]{2})/,/^(?:[.])/,/^(?:@)/,/^(?:[\/]{2})/,/^(?:[\/])/,/^(?:[0-9]+)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[a-zA-ZñÑ][a-zA-ZñÑ0-9_]*)/,/^(?:"[^"\""]*")/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}